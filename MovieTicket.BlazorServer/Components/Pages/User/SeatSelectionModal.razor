@using static MovieTicket.BlazorServer.Components.Pages.User.Home

@if (cinemaDto != null)
{
    <div class="container-modal">
        <!--Seats Layout-->
        <div class="seat-grid text-center">
            @for (int x = 1; x <= cinemaDto.Row; x++)
            {
                int row = x;
                <div class="row row-cols-auto">
                    @for (int y = 1; y <= cinemaDto.Column; y++)
                    {
                        var seat = lstSeats.FirstOrDefault(s => s.Row == x && s.Column == y);
                        <div class="col">
                            @if (seat.Status == SeatStatus.Available)
                            {
                                <button type="button" id="seat" data-bs-toggle="button" data-seat-status="@seat.SeatTypeName" class="btn seat-btn" data-id="@seat.Id" aria-pressed="false" @onclick="(() => SeatSelection(seat.Id))">
                                    @seat.Position
                                </button>
                            }
                            else
                            {
                                <button type="button" id="seat" data-seat-status="@(seat.Status == SeatStatus.Unavailable ? "Unavailable" : @seat.SeatTypeName)" class="btn seat-unavailable" data-id="@seat.Id">
                                    @seat.Position
                                </button>
                            }
                        </div>
                    }
                </div>
            }
        </div>
        <hr>
    </div>
}
else
{
    <p>Không có dữ liệu</p>
}

<script>
    function toggleButtonById(buttonId) {
    var button = document.querySelector(`button[data-id='${buttonId}']`);
    if (button) {
    button.classList.toggle('active');
    }
    }
</script>

@code {
    [Parameter] public Guid ShowtimeId { get; set; }
    [Parameter] public EventCallback<EventCallbackArgs> OnSeatSelection { get; set; }
    public EventCallbackArgs args = new();
    private CinemaDto cinemaDto { get; set; } = new();
    private IQueryable<SeatDTO> lstSeats { get; set; }
    private List<SeatUpdateRequest> lstSeatUpdateRequests = new();
    private List<TicketPriceDto> lstTicketPrices { get; set; }
    private Guid SeatId = Guid.Empty;
    private List<SeatDTO> lstSeatsSelected = new();//list ghế đã chọn
    private string SeatsSelectedstr = "";
    private string TickeTotalString = null;
    private decimal TotalTicket;
    private ShowTimeDto showtimeDto = new();
    string today = DateTime.Now.DayOfWeek.ToString();
    private AuthenticationState AuthenState;
    private Guid userId = Guid.Empty;
    private CreateCheckRequest request = new();
    private List<TicketRequest> lstTicketRequests = new();
    private CancellationToken cancellationToken;

    protected override async Task OnParametersSetAsync()
    {
        if (ShowtimeId != Guid.Empty)
        {
            var response = await ShowTimeService.GetById(ShowtimeId);
            showtimeDto = response.Data;
            var cinema = await CinemaService.GetCinemaById(showtimeDto.CinemaId);
            cinemaDto = cinema.Data;
            lstSeats = await SeatService.GetSeats(cinemaDto.Id);
            var responseTicket = await TicketPriceService.GetAllAsync(new TicketPriceWithPaginationRequest(), new PagingParameters()
                {
                    PageNumber = 1,
                    PageSize = 180
                });
            lstTicketPrices = responseTicket.Item.ToList();
            AuthenState = await AuthStateProvider.GetAuthenticationStateAsync();
            var getUser = AuthenState.User.FindFirstValue(ClaimTypes.NameIdentifier);
            userId = Guid.Parse(getUser);
        }
    }

    private async Task SeatSelection(Guid id)
    {
        await Task.Delay(300);
        if (id != Guid.Empty)
        {
            SeatId = id;
            var response = await SeatService.GetById(SeatId);
            var seat = response.Data;
            List<SeatDTO> Couple = new();
            SeatDTO seat2 = new();
            if (seat.SeatTypeName == "Couple")
            {
                Couple.Add(seat);
                if (seat.Column % 2 == 0)
                {
                    seat2 = lstSeats.FirstOrDefault(s => s.Row == seat.Row && s.Column == seat.Column - 1);
                    Couple.Add(seat2);
                    await JSRuntime.InvokeVoidAsync("toggleButtonById", seat2.Id.ToString());
                }
                else
                {
                    seat2 = lstSeats.FirstOrDefault(s => s.Row == seat.Row && s.Column == seat.Column + 1);
                    Couple.Add(seat2);
                    await JSRuntime.InvokeVoidAsync("toggleButtonById", seat2.Id.ToString());
                }
                foreach (var item in Couple)
                {
                    if (lstSeatsSelected.Any(s => s.Id == item.Id)) //check tồn tại trong list ghế đã chọn
                    {
                        //nếu đã tồn tại thì xóa
                        if (SeatsSelectedstr.Contains(item.Position))
                        {
                            SeatsSelectedstr = SeatsSelectedstr.Replace(item.Position, "");
                        }
                        lstSeatsSelected.RemoveAll(s => s.Id == item.Id);
                        lstSeatUpdateRequests.RemoveAll(s => s.Id == item.Id);
                    }
                    else
                    {
                        //nếu chưa tồn tại thì thêm
                        if (lstSeatsSelected.Count >= 8)
                        {
                            await JSRuntime.InvokeVoidAsync("alert", "Bạn chỉ được chọn tối đa 8 ghế");
                            await JSRuntime.InvokeVoidAsync("toggleButtonById", seat2.Id.ToString());
                            await JSRuntime.InvokeVoidAsync("toggleButtonById", seat.Id.ToString());
                            StateHasChanged();
                            return;
                        }
                        if (!SeatsSelectedstr.Contains(item.Position))
                        {
                            SeatsSelectedstr += item.Position + " ";
                        }
                        lstSeatsSelected.Add(item);
                        lstSeatUpdateRequests.Add(new SeatUpdateRequest
                            {
                                Id = item.Id,
                                Selection = Domain.Enums.SeatSelection.Checked
                            });
                    };
                }
                CalculateTotal();
                TickeTotalString = TotalTicket.ToString("#,##0") + "VND";
                args = new EventCallbackArgs
                    {
                        lstSeats = lstSeatsSelected,
                        str = SeatsSelectedstr,
                        TotalTicket = TotalTicket,

                    };
                await OnSeatSelection.InvokeAsync(args);
                StateHasChanged();
            }
            else
            {
                if (lstSeatsSelected.Any(s => s.Id == seat.Id)) //check tồn tại trong list ghế đã chọn
                {
                    //nếu đã tồn tại thì xóa
                    if (SeatsSelectedstr.Contains(seat.Position))
                    {
                        SeatsSelectedstr = SeatsSelectedstr.Replace(seat.Position, "");
                    }
                    lstSeatsSelected.RemoveAll(s => s.Id == seat.Id);
                    lstSeatUpdateRequests.RemoveAll(s => s.Id == seat.Id);
                }
                else
                {
                    //nếu chưa tồn tại thì thêm
                    if (lstSeatsSelected.Count >= 8)
                    {
                        await JSRuntime.InvokeVoidAsync("alert", "Bạn chỉ được chọn tối đa 8 ghế");
                        await JSRuntime.InvokeVoidAsync("toggleButtonById", seat.Id.ToString());
                        StateHasChanged();
                        return;
                    }
                    if (!SeatsSelectedstr.Contains(seat.Position))
                    {
                        SeatsSelectedstr += seat.Position + " ";
                    }
                    lstSeatsSelected.Add(seat);
                    lstSeatUpdateRequests.Add(new SeatUpdateRequest
                        {
                            Id = seat.Id,
                            Selection = Domain.Enums.SeatSelection.Checked
                        });
                };
                CalculateTotal();
                TickeTotalString = TotalTicket.ToString("#,##0") + "VND";
                args = new EventCallbackArgs
                    {
                        lstSeats = lstSeatsSelected,
                        str = SeatsSelectedstr,
                        TotalTicket = TotalTicket,
                    };
                await OnSeatSelection.InvokeAsync(args);
                StateHasChanged();
            }
        }
    }

    private decimal CalculateTotal() //tính tổng tiền
    {
        TotalTicket = 0;
        foreach (var item in lstSeatsSelected)
        {
            var ticketPrice = lstTicketPrices.FirstOrDefault(x => x.SeatName == item.SeatTypeName && x.Type == showtimeDto.ScreenTypeName && x.CinemaTypeName
                == cinemaDto.CinemaTypeName && x.Day == DayOfTheWeek(today) && x.Status == TicketPriceStatus.Active);
            if (ticketPrice != null)
            {
                TotalTicket += (Decimal)ticketPrice.Price;
            }
        }
        return TotalTicket;
    }

    private string DayOfTheWeek(string day) //check ngày
    {
        if (day.Equals("Saturday") || day.Equals("Sunday"))
        {
            return "T7-CN";
        }
        else
        {
            return "T2-T6";
        }
    }
    public async Task Reset()
    {
        foreach (var seat in lstSeatsSelected)
        {
            await JSRuntime.InvokeVoidAsync("toggleButtonById", seat.Id.ToString());
        }
        lstSeatsSelected.Clear();
        SeatsSelectedstr = "";
        TotalTicket = 0;
        StateHasChanged();
    }

}