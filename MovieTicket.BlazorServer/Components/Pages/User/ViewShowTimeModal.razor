@using MovieTicket.Application.DataTransferObjs.ShowTime
<div class="container-fluid ">
	<ul class="nav" style="flex-wrap: wrap">
		@if (dateRange != null)
		{
			@foreach (var item in dateRange)
			{
				<li class="date @(selectedDate == item ? "active" : "")" id="myButton">
					<a class="nav-link" @onclick="()=>GetDate(item)">
						<span class="tab-number">@item.ToString("dd")</span><span class="month">/@item.ToString("MM")</span>
					</a>
				</li>
			}
		}
	</ul>
	<ul class="nav mt-3">
		@if (ShowTimes.Count() >= 1)
		{
			@foreach (var item in ShowTimeSort)
			{
				if (item.CinemaCenterName != previousCinemaCenterName || item.ScreenTypeName != previousScreenTypeName || item.TranslationTypeName != previousTranslationTypeName || item.FilmId != previousFilmId)
				{
					var isActive = ((item.ScreenTypeName == selectedScreenTypeSort && item.TranslationTypeName == selectedTranslationTypeSort) || count == 0) ? "active" : "";

					<li class="sort-show-time @isActive" @onclick="() => SelectedSort(item.ScreenTypeName,item.TranslationTypeName)" id="myButton1">@item.ScreenTypeName - @item.TranslationTypeName</li>
					count++;
				}
				previousCinemaCenterName = item.CinemaCenterName;
				previousScreenTypeName = item.ScreenTypeName;
				previousFilmId = item.FilmId;
				previousTranslationTypeName = item.TranslationTypeName;
			}
		}
	</ul>
</div>



<div class="container-fluid px-3 scrollable" style="height: 580px">

	@if (ShowTimes.Count() != 0)
	{
		if (ShowTimes.Count() == 1)
		{
			@foreach (var item in ShowTimes)
			{


				<hr />
				<div class="text-dark fs-3 mb-2">@item.CinemaCenterName</div>
				<div class="text-dark fs-5 mb-2">Rạp @item.ScreenTypeName</div>

				<button class="btn btn-outline-secondary me-2 my-2" @onclick="() => OpenSeatSelection(item.Id)">@item.StartTime.Value.ToString("HH:mm")</button>
				previousCinemaCenterName = item.CinemaCenterName;
				previousScreenTypeName = item.ScreenTypeName;
				previousFilmId = item.FilmId;
			}
		}
		else
		{
			@foreach (var item in ShowTimes)
			{

				//check
				if (item.CinemaCenterName != previousCinemaCenterName || item.ScreenTypeName != previousScreenTypeName || item.FilmId != previousFilmId)
				{
					<hr />
					<div class="text-dark fs-3 mb-2">@item.CinemaCenterName</div>
					<div class="text-dark fs-5 mb-2">Rạp @item.ScreenTypeName</div>
				}
				<button class="btn btn-outline-secondary me-2 my-2" @onclick="() => OpenSeatSelection(item.Id)">@item.StartTime.Value.ToString("HH:mm")</button>
				previousCinemaCenterName = item.CinemaCenterName;
				previousScreenTypeName = item.ScreenTypeName;
				previousFilmId = item.FilmId;

			}
		}


	}
	else
	{
		<div style="" class="">Xin lỗi, không có suất chiếu vào ngày này, hãy chọn một ngày khác.</div>
	}
</div>

<style>
	.sort-show-time.active {
		background-color: #0056b3;
		color: white;
	}

	.sort-show-time {
		background-color: white;
		color: black;
		border: 1px solid #0056b3;
		border-radius: 5px;
		padding: 5px 10px;
		margin-right: 5px;
		cursor: pointer;
	}

	.date.active {
		border-bottom: 3px solid #0056b3 /* Màu viền khi active */
	}

		.date.active a {
			color: #0056b3; /* Màu chữ cho link trong li khi active */
		}


	.date a {
		color: black;
	}

	.date {
		border-bottom: 1px solid rgb(199, 200, 201);
		transition: background-color 0.3s ease, color 0.3s ease; /* Hiệu ứng chuyển đổi */
	}

		.date:hover {
			background-color: #f8f9fa; /* Màu nền khi hover (không active) */
			cursor: pointer; /* Thay đổi con trỏ khi hover */
		}

	.nav-tabs .nav-link {
		font-size: 24px;
		font-weight: bold;
	}

	.tab-number {
		font-size: 40px;
	}

	.tab-text {
		font-size: 14px;
	}

	.scrollable {
		/* 56px là chiều cao của navbar */
		height: 100%;
		accent-color: rgb(56, 172, 239);
		overflow-y: scroll; /* Cuộn dọc */
	}
</style>
<script>
	// Lấy phần tử button
	const button = document.getElementById('myButton');

	// Thêm sự kiện click
	button.addEventListener('click', function () {
		// Kiểm tra nếu đã có lớp 'active' hay chưa
		if (button.classList.contains('active')) {
			// Nếu có, xóa lớp 'active'
			button.classList.remove('active');
		} else {
			// Nếu không có, thêm lớp 'active'
			button.classList.add('active');
		}
	});
	const button = document.getElementById('myButton1');

	// Thêm sự kiện click
	button.addEventListener('click', function () {
		// Kiểm tra nếu đã có lớp 'active' hay chưa
		if (button.classList.contains('active')) {
			// Nếu có, xóa lớp 'active'
			button.classList.remove('active');
		} else {
			// Nếu không có, thêm lớp 'active'
			button.classList.add('active');
		}
	});
</script>
@code {
	[Parameter]
	public string Id { get; set; }
	[Parameter] public EventCallback<Guid> OnShowtimeSelected { get; set; }
	private List<DateTime> dateRange = new List<DateTime>();
	private DateTime selectedDate = DateTime.Today;
	private List<ShowTimeDto> ShowTimes = new List<ShowTimeDto>();
	private PagingParameters PagingParameters = new PagingParameters();
	private List<ShowTimeDto> ShowTimeSort = new List<ShowTimeDto>();
	public MetaData MetaData { set; get; } = new MetaData();
	private string previousCinemaCenterName = null;
	private string previousScreenTypeName = null;
	private string previousTranslationTypeName = null;
	private string selectedScreenTypeSort = null;
	private string selectedTranslationTypeSort = null;
	private Guid previousFilmId = Guid.Empty;
	private int count = 0;
	private Guid ShowTimeId = Guid.Empty;

	protected async override Task OnParametersSetAsync()
	{
		if (!String.IsNullOrEmpty(Id))
		{
			var lstObjScheduel = await ScheduelService.GetAllAsync();
			var findId = lstObjScheduel.FirstOrDefault(x => x.FilmId == Guid.Parse(Id));
			if (findId != null)
			{
				dateRange = GetDatesInRange(DateTime.Now, DateTime.Now.AddDays(14));
			}
			var paginationReponse = await ShowTimeService.GetAll(new ShowTimeSearch()
				{
					ShowtimeDate = selectedDate,
				}, new PagingParameters()
				{
					PageSize = 30
				});
			ShowTimeSort = paginationReponse.Item.Where(x => x.FilmId == Guid.Parse(Id)).GroupBy(x => new { x.CinemaCenterName, x.ScreenTypeName }).SelectMany(x => x).OrderBy(x => x.ScreenTypeName).ToList();
			ShowTimes = paginationReponse.Item.Where(x => x.FilmId == Guid.Parse(Id) && x.ScreenTypeName == ShowTimeSort[0].ScreenTypeName && x.TranslationTypeName == ShowTimeSort[0].TranslationTypeName).GroupBy(x => new { x.CinemaCenterName, x.ScreenTypeName }).SelectMany(x => x).ToList();
			MetaData = paginationReponse.MetaData;
		}
	}

	private async Task GetDate(DateTime date)
	{
		ShowTimeSort.Clear();
		ShowTimes.Clear();
		selectedDate = date;
		var paginationReponse = await ShowTimeService.GetAll(new ShowTimeSearch()
			{
				ShowtimeDate = selectedDate,
			}, new PagingParameters()
			{
				PageSize = 30
			});

		ShowTimeSort = paginationReponse.Item.Where(x => x.FilmId == Guid.Parse(Id)).GroupBy(x => new { x.CinemaCenterName, x.ScreenTypeName }).SelectMany(x => x).OrderBy(x => x.ScreenTypeName).ToList();
		ShowTimes = paginationReponse.Item.Where(x => x.FilmId == Guid.Parse(Id) && x.ScreenTypeName == ShowTimeSort[0].ScreenTypeName && x.TranslationTypeName == ShowTimeSort[0].TranslationTypeName).GroupBy(x => new { x.CinemaCenterName, x.ScreenTypeName }).SelectMany(x => x).ToList();
		MetaData = paginationReponse.MetaData;
		previousCinemaCenterName = null;
		previousScreenTypeName = null;
		previousFilmId = Guid.Empty;
		previousTranslationTypeName = null;
		selectedScreenTypeSort = null;
		selectedTranslationTypeSort = null;
		count = 0;
	}

	private List<DateTime> GetDatesInRange(DateTime start, DateTime end)
	{
		List<DateTime> dates = new List<DateTime>();

		// Chuyển về cùng ngày, bỏ qua giờ phút giây
		DateTime currentDate = start.Date;
		end = end.Date;

		while (currentDate <= end)
		{
			dates.Add(currentDate);
			currentDate = currentDate.AddDays(1);
		}

		return dates;
	}
	private async Task SelectedSort(string screenType, string translationType)
	{
		selectedTranslationTypeSort = translationType;
		selectedScreenTypeSort = screenType;
		var paginationReponse = await ShowTimeService.GetAll(new ShowTimeSearch()
			{
				ShowtimeDate = selectedDate,
			}, new PagingParameters()
			{
				PageSize = 30
			});
		ShowTimes = paginationReponse.Item.Where(x => x.FilmId == Guid.Parse(Id) && x.ScreenTypeName == screenType && x.TranslationTypeName == translationType).GroupBy(x => new { x.CinemaCenterName, x.ScreenTypeName }).SelectMany(x => x).ToList();
		MetaData = paginationReponse.MetaData;
		previousCinemaCenterName = null;
		previousScreenTypeName = null;
		previousFilmId = Guid.Empty;
	}
	private async Task SelectTimeOnAlert(string id)
	{
		var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn có muốn chọn suất chiếu này {id}?");

		if (confirmed)
		{
			StateHasChanged();
		}
	}
	private async Task OpenSeatSelection(Guid id)
	{
		ShowTimeId = id;
		await OnShowtimeSelected.InvokeAsync(ShowTimeId);
	}

}