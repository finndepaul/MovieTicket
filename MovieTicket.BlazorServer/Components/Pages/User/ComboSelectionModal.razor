@using static MovieTicket.BlazorServer.Components.Pages.Staff.OfflineCounter
@using static MovieTicket.BlazorServer.Components.Pages.User.CinemaSystem
@using static MovieTicket.BlazorServer.Components.Pages.User.Home

@if (lstCombo == null)
{
	<div class="spinner-border text-primary" role="status">
		<span class="visually-hidden">Loading...</span>
	</div>
}
else
{
	<div class="container">
		<div class="d-flex justify-content-end mx-5">
			<div class="d-flex">
				<p class="border border-warning bg-warning text-light fw-bold fs-24 me-2 p-3">@_timeLeft.ToString(@"mm")</p>
				<p class="border border-warning bg-warning text-light fw-bold fs-24 p-3">@_timeLeft.ToString(@"ss")</p>
			</div>
		</div>
		<div class="row row-cols-1 row-cols-md-3 g-4">
			@foreach (var item in lstCombo)
			{
				<div class="col">
					<div class="card mb-3" style="max-width: 540px;">
						<div class="row g-0">
							<div class="col-md-4">
								<img src="@item.Image" class="img-fluid object-fit-contain rounded-start" alt="...">
							</div>
							<div class="col-md-8">
								<div class="card-body">
									<h5 class="card-title">@item.Name</h5>
									<p class="card-text">@item.Description</p>
									<p class="card-text">Giá: <span class="fw-bold">@item.Price.Value.ToString("#,##0")đ</span></p>
									<div class="input-group mb-3" style="width:50%">
										<span class="btn btn-danger input-group-text" @onclick="() => Minus(item.Id)">
											<i class="bi bi-dash-lg"></i>
										</span>
										<input type="text" class="form-control text-center" style="font-size: 18px"
											   value="@comboQuantities.GetValueOrDefault(item.Id, 0)" disabled />
										<span class="btn btn-danger input-group-text" @onclick="() => Plus(item.Id)">
											<i class="bi bi-plus-lg"></i>
										</span>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
			}
		</div>
	</div>
}


@code {
	[Parameter] public Guid BillId { get; set; }
	[Parameter] public EventCallback<EventCallbackHomeArgs> OnComboSelection { get; set; }
	[Parameter] public EventCallback<EventCallbackCinemaSystemArgs> OnComboSelectionCinemaSystem { get; set; }
    [Parameter] public EventCallback<EventCallbackOfflineCounterArgs> OnComboSelectionOfflineCounter { get; set; }
	public EventCallbackHomeArgs args = new();
	public EventCallbackCinemaSystemArgs argsCinemaSystem = new();
    public EventCallbackOfflineCounterArgs argsOfflineCounter = new();
	private List<ComboDto> lstCombo = new List<ComboDto>();
	private Dictionary<Guid, int> comboQuantities = new();
	private List<ComboRequest> lstComboSelected = new List<ComboRequest>();
	CancellationToken cancellationToken;
	private TimeSpan _timeLeft;
	private Timer? _timer;
	private bool _isCountdownFinished = false;
	private DateTime EndTime = DateTime.Now.AddMinutes(5);
	private string? location;

	protected async override Task OnParametersSetAsync()
	{
		if (BillId != Guid.Empty)
		{
			lstCombo = await ComboService.GetAll();
		}
		if (OnComboSelection.HasDelegate)
		{
			StartCountdown();
		}
        base.OnParametersSet();
	}
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			location = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "page");
		}
	}

	private void StartCountdown()
	{
		_isCountdownFinished = false; // Reset trạng thái
		_timeLeft = EndTime - DateTime.Now;

		if (_timeLeft > TimeSpan.Zero)
		{
			_timer = new System.Threading.Timer(UpdateCountdown, null, 0, 1000);
		}
	}
	private void UpdateCountdown(object? state)
	{
		// Không làm gì nếu countdown đã hoàn thành
		if (_isCountdownFinished) return;

		_timeLeft = EndTime - DateTime.Now;

		if (_timeLeft <= TimeSpan.Zero)
		{
			_timeLeft = TimeSpan.Zero; // Đảm bảo không âm
			_isCountdownFinished = true; // Đánh dấu đã hoàn thành
			_timer?.Dispose(); // Dừng timer hoàn toàn

			// Gọi hàm xử lý sau countdown
			ExecuteFunctionAfterCountdown();
		}

		// Cập nhật giao diện
		InvokeAsync(StateHasChanged);
	}
	public void Dispose()
	{
		_timer?.Dispose();
	}
	private async Task ExecuteFunctionAfterCountdown()
	{
		Console.WriteLine("Đếm ngược đã hoàn thành!");
		return;
		// Thực hiện các thao tác khác tại đây
	}
	
	private async Task Plus(Guid comboId)
	{
		if (!comboQuantities.ContainsKey(comboId))
		{
			comboQuantities[comboId] = 0;
		}
		if (comboQuantities[comboId] >= 4)
		{
			return; // Dừng tăng số lượng
		}
		comboQuantities[comboId]++;

		// Cập nhật lstComboSelected
		var existingItem = lstComboSelected.FirstOrDefault(x => x.ComboId == comboId);
		if (existingItem != null)
		{
			existingItem.Quantity = comboQuantities[comboId];
		}
		else
		{
			lstComboSelected.Add(new ComboRequest { ComboId = comboId, Quantity = comboQuantities[comboId] });
		}
		if(location != null && location == "Home"){
			args = new EventCallbackHomeArgs
				{
					_lstCombo = lstComboSelected,
					TotalCombo = CalculateTotal()
				};
			await OnComboSelection.InvokeAsync(args);
        }
        else if (location != null && location == "CinemaSystem")
        {
            argsCinemaSystem = new EventCallbackCinemaSystemArgs
                {
                    _lstCombo = lstComboSelected,
                    TotalCombo = CalculateTotal()
                };
            await OnComboSelectionCinemaSystem.InvokeAsync(argsCinemaSystem);
        }
		else if(location != null && location == "OfflineCounter"){
            argsOfflineCounter = new EventCallbackOfflineCounterArgs
                {
                    _lstCombo = lstComboSelected,
                    TotalCombo = CalculateTotal()
                };
		}
		// Làm mới giao diện ngay lập tức
		StateHasChanged();
	}

	private async Task Minus(Guid comboId)
	{
		if (comboQuantities.ContainsKey(comboId) && comboQuantities[comboId] > 0)
		{
			comboQuantities[comboId]--;
		}
		else
		{
			comboQuantities[comboId] = 0;
		}

		// Cập nhật lstComboSelected
		var existingItem = lstComboSelected.FirstOrDefault(x => x.ComboId == comboId);
		if (existingItem != null)
		{
			if (comboQuantities[comboId] == 0)
			{
				lstComboSelected.Remove(existingItem);
			}
			else
			{
				existingItem.Quantity = comboQuantities[comboId];
			}
		}
		if (location != null && location == "Home")
		{
			args = new EventCallbackHomeArgs
				{
					_lstCombo = lstComboSelected,
					TotalCombo = CalculateTotal()
				};
			await OnComboSelection.InvokeAsync(args);
		}
		else if (location != null && location == "CinemaSystem")
		{
			argsCinemaSystem = new EventCallbackCinemaSystemArgs
				{
					_lstCombo = lstComboSelected,
					TotalCombo = CalculateTotal()
				};
			await OnComboSelectionCinemaSystem.InvokeAsync(argsCinemaSystem);
		}
		else if (location != null && location == "OfflineCounter")
		{
			argsOfflineCounter = new EventCallbackOfflineCounterArgs
				{
					_lstCombo = lstComboSelected,
					TotalCombo = CalculateTotal()
				};
		}
		// Làm mới giao diện ngay lập tức
		StateHasChanged();
	}
	private async Task HandleCheckOut()
	{
		// Update bill
		var billCombo = new ComboCheckRequest // coupon sẽ ở đây
			{
				BillId = BillId,
				LstCombos = lstComboSelected,
			};
		var result = await UserHomeService.AddComboToCheckAsync(billCombo, cancellationToken);
		var bill = await UserHomeService.GetBillForCheckOut(BillId);
		PayOS payOS = new PayOS("696efb39-86fe-44ce-8182-a7a1bbe9881b", "d662ce34-c955-4710-a264-ab9a97e5319a",
		"1e063ea755ccf53bf11fc90b624238daa15b57bb11fdcc6535a5ec48e84be53a");
		ItemData itemData = new ItemData(bill.FilmName, 1, Convert.ToInt32(bill.AfterDiscount));
		List<ItemData> lstItemDatas = new List<ItemData>();
		lstItemDatas.Add(itemData);
		PaymentData paymentData = new PaymentData
		(
			bill.BillCode,
			Convert.ToInt32(bill.TotalMoney),
			"VHD Cinema",
			lstItemDatas,
			"https://localhost:7239/",
			$"https://localhost:7239/check-out-success/{BillId}"
		);
		CreatePaymentResult createPayment = await payOS.createPaymentLink(paymentData);
		NavigationManager.NavigateTo(createPayment.checkoutUrl, true);
	}

	private decimal CalculateTotal()
	{
		decimal totalCombo = 0;
		foreach (var item in lstComboSelected)
		{
			var combo = lstCombo.FirstOrDefault(x => x.Id == item.ComboId);
			totalCombo += (Decimal)combo.Price.Value * item.Quantity;
		}
		return totalCombo;
	}
}
