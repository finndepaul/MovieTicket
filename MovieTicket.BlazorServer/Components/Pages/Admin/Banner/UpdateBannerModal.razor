@page "/banner/update-banner/{id:guid}"
@inject ICloudinaryService CloudinaryService
@attribute [Authorize(Roles = "Admin")]

<div class="container d-flex">
    <EditForm Model="request" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-3">
            <label class="form-label">Tên</label>
            <InputText @bind-Value="request.Name" class="form-control">@request.Name</InputText>
        </div>
        <div class="mb-3">
            @if (!string.IsNullOrEmpty(request.Image))
            {
                <img src="@request.Image" alt="Banner" style="width: 300px; height: auto;" />
            }
        </div>
        <div class="mb-3">
            <label class="form-label">Chọn ảnh mới</label>
            <InputFile OnChange="HandleImageChange" class="form-control" />
        </div>
        <div class="mb-3 justify-content-center">
            <input type="submit" class="btn btn-success" value="Sửa" />
        </div>
    </EditForm>
</div>

@code {
    [Parameter]
    public Guid BannerId { get; set; }
    private BannerDTO bannerDTO = new();
    private BannerUpdateRequest request = new();

    protected override async Task OnParametersSetAsync()
    {
        if (bannerDTO != null)
        {
            var banner = await BannerService.GetById(BannerId);
            request = new BannerUpdateRequest
                {
                    Name = bannerDTO.Name,
                    Image = bannerDTO.Image
                };
        }
    }

    private async Task HandleSubmit()
    {   
        
        request.Id = BannerId;
        ResponseObject<BannerDTO> response = await BannerService.Update(request);
        if (response.Status == StatusCodes.Status200OK)
        {
            await JSRuntime.InvokeVoidAsync("alert", response.Message);
            NavigationManager.NavigateTo("/banner", forceLoad: true);
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", response.Message);
        }
    }

    private async Task HandleImageChange(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            try
            {
                // Kiểm tra kích thước file trước khi xử lý
                if (file.Size > 10 * 1024 * 1024) // 10 MB
                {
                    await JSRuntime.ToastrError("Kích thước file vượt quá giới hạn cho phép (10 MB).");
                    return;
                }

                using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // 10 MB
                using var content = new MultipartFormDataContent();
                using var fileContent = new StreamContent(stream);

                fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);
                content.Add(fileContent, "formFile", file.Name);

                // Gọi API để upload ảnh
                var imageUrl = await CloudinaryService.UploadImageAsync(content);
                if (!string.IsNullOrEmpty(imageUrl))
                {
                    request.Image = imageUrl;
                    await JSRuntime.ToastrSuccess("Upload ảnh thành công.");
                }
                else
                {
                    await JSRuntime.ToastrError("Upload ảnh thất bại.");
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.ToastrError($"Đã xảy ra lỗi: {ex.Message}");
            }
        }
    }
}
