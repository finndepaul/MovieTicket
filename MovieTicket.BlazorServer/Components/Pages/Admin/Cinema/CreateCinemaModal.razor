@page "/create-cinema/{CinemaCenterName}"
@attribute [Authorize(Roles ="Admin")];

<div class="container-input">
    <EditForm Model="request" OnValidSubmit="CreateCinema">
        <DataAnnotationsValidator />

        <div class="input-group mt-3">
            <label class="input-group-text" for="CinemaCenterName">Rạp</label>
            <input type="text" value="@CinemaCenterName" id="CinemaCenterName" class="form-control" disabled/>
        </div>

        <div class="input-group mt-3">
            <label class="input-group-text" for="name">Tên phòng chiếu</label>
            <InputText @bind-Value="request.Name" id="name" class="form-control"/>
        </div>
        <div class="validate mt-1"><ValidationMessage For="@(() => request.Name)" /></div>

         <div class="input-group mt-3">
            <label class="input-group-text" for="cinemaType">Loại phòng chiếu</label>
            <div id="cinemaType" class="form-control">
                @foreach (var type in cinemaTypes)
                {   
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="radio" name="cinemaType" id="@type.Name" @onchange="@(()=>OnCinemaTypeChange(type.Id))" />
                        <label class="form-check-label" for="@type.Name">@type.Name</label>
                    </div>
                }
            </div>
        </div>
        <div class="validate mt-1"><ValidationMessage For="@(() => request.CinemaTypeId)" /></div>

        <div class="input-group mt-3">
            <label class="input-group-text" for="row">Số hàng</label>
            <InputNumber @bind-Value="request.Row" id="row" class="form-control" />
        </div>
        <div class="validate mt-1"><ValidationMessage For="@(() => request.Row)" /></div>

        <div class="input-group mt-3">
            <label class="input-group-text" for="column">Số cột</label>
            <InputNumber @bind-Value="request.Column" id="column" class="form-control" />
        </div>
        <div class="validate mt-1"><ValidationMessage For="@(() => request.Column)" /></div>

        <div class="input-group mt-3">
            <label class="input-group-text" for="description">Mô tả</label>
            <InputText @bind-Value="request.Description" id="description" class="form-control" />
        </div>
        <div class="validate mt-1"><ValidationMessage For="@(() => request.Description)" /></div>
        
            <div class="my-3 d-flex justify-content-center">
            <input type="submit" class="btn btn-success" value="Tạo" />
        </div>
    </EditForm>
</div>

@code {
    [Parameter]
    public string CinemaCenterName { get; set; }
    [Parameter]
    public EventCallback<string> OnCreateSuccess { get; set; } //thông báo vào truyền CinemaCenterName về Cinema.razor

    private CinemaCreateRequest request = new();
    private List<CinemaTypeDto> cinemaTypes = new();
    private IQueryable<CinemaCenterDto> CinemaCenterDtos;
    private IQueryable<CinemaDto> _lstCinemas;

    protected override async void OnInitialized()
    {
        cinemaTypes = await CinemaTypeService.GetListCinemaTypesAsync();
    }

    public void ResetForm() => request = new CinemaCreateRequest(); // Reset form

    private void OnCinemaTypeChange(Guid cinemaTypeId)
    {
        request.CinemaTypeId = cinemaTypeId.ToString();
        if (cinemaTypeId == Guid.Empty)
        {
            // Trigger validation message
            request.CinemaTypeId = null;
        }
    }
 
    private async Task CreateCinema()
    {
        CinemaCenterDtos = await CinemaCenterService.GetCinemaCentersAsync(new CinemaCenterSearch()
            {
                Name = CinemaCenterName,
                Address = null
            });
        if (CinemaCenterDtos.Any())
        {
            request.CinemaCenterId = CinemaCenterDtos.First().Id;
        }
        // if(request.CinemaTypeId == Guid.Empty)
        // {
        //     await JSRuntime.InvokeVoidAsync("alert", "Vui lòng chọn loại phòng chiếu");
        //     return;
        // }
        ResponseObject<CinemaDto> response = await CinemaService.Create(request);
        if (response.Status == StatusCodes.Status200OK)
        {
            await JSRuntime.InvokeVoidAsync("alert", response.Message);
            await OnCreateSuccess.InvokeAsync(CinemaCenterName);
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", response.Message);
        }
    }
}
