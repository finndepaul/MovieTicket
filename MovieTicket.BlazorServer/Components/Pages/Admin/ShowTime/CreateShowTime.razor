@page "/showtime-create/{Date}"
@using MovieTicket.Application.DataTransferObjs.Film
@using MovieTicket.Application.DataTransferObjs.Schedule
@using MovieTicket.Application.DataTransferObjs.ScreenType
@using MovieTicket.Application.DataTransferObjs.ShowTime
@using MovieTicket.Application.DataTransferObjs.TranslationType
@using MovieTicket.BlazorServer.Services.Interfaces
@inject IFilmService FilmService
@inject IScreenTypeServices ScreenTypeService
@inject ITranslationTypeService TranslationTypeService
@inject IScheduelService ScheduelService
@inject IShowTimeService ShowTimeService  
@inject IJSRuntime _IJSRuntime;
<EditForm Model="ShowTime" OnValidSubmit="HandleCreateAsync">
	<DataAnnotationsValidator />
	<div class="mb-3">
		<label for="movieTitle" class="form-label">Phim chiếu</label>
		<select class="form-select" id="movieTitle" value="@selectedFilmId" @onchange="OnFilmChange">
			<option value="">Select a film</option>
			@foreach (var film in FilmValidate)
			{
				<option value="@film.Id">@film.Name</option>
			}
		</select>
		<ValidationMessage For="@(() => ShowTime.FilmId)" class="text-danger" />
	</div>

	<div class="mb-3">
		<label for="screeningDate" class="form-label">Ngày chiếu</label>
		<input type="date" class="form-control" id="screeningDate" @bind="@Date" disabled>
	</div>

	<div class="mb-3">
		<label for="format" class="form-label">Hình thức chiếu</label>
		<select class="form-select" id="format" @bind="ShowTime.ScreenTypeId">
			<option value="">Select a screen type</option>
			@foreach (var item in ScreenTypeValidate)
			{
				<option value="@item.Id">@item.Type</option>
			}
		</select>
		<ValidationMessage For="@(() => ShowTime.ScreenTypeId)" class="text-danger" />
		@if (!string.IsNullOrEmpty(screenTypeErrorMessage))
		{
			<small class="text-danger">@screenTypeErrorMessage</small>
		}
	</div>

	<div class="mb-3">
		<label for="translationType" class="form-label">Hình thức dịch</label>
		<select class="form-select" id="translationType" @bind="ShowTime.TranslationTypeId">
			<option value="">Select a translation type</option>
			@foreach (var item in TranslationTypeValidate)
			{
				<option value="@item.Id">@item.Type</option>
			}
		</select>
		<ValidationMessage For="@(() => ShowTime.TranslationTypeId)" class="text-danger" />
	</div>

	<div class="mb-3">
		<label for="screeningTime" class="form-label">Thời gian chiếu</label>
		<div class="row">
			<div class="col">
				<input type="time" class="form-control" id="startTime" value="@startTimeValue" @onchange="OnStartTime">
				<ValidationMessage For="@(() => ShowTime.StartTime)" class="text-danger" />
			</div>
			<div class="col">
				<input type="time" class="form-control" id="endTime" @bind="ShowTime.EndTime" disabled>
				<ValidationMessage For="@(() => ShowTime.EndTime)" class="text-danger" />
			</div>
		</div>
	</div>
	<div class="modal-footer">
		<button type="submit" class="btn btn-primary">Tạo suất chiếu</button>
	</div>
</EditForm>

@code {
	[Parameter] public Guid? CinemaCenterId { get; set; }
	[Parameter] public Guid? CinemaId { get; set; }
	[Parameter] public DateTime Date { get; set; }
	[Parameter]public EventCallback<(Guid CinemaCenterId, Guid CinemaId, DateTime ShowtimeDate)> OnCreateSuccess { get; set; }
	private IEnumerable<FilmDto> Films = new List<FilmDto>();
	private IEnumerable<FilmDto> FilmValidate = new List<FilmDto>();
	private ShowTimeCreateRequest ShowTime = new ShowTimeCreateRequest();
	private List<ScreenTypeDto> ScreenTypeDtos = new List<ScreenTypeDto>();
	private List<ScreenTypeDto> ScreenTypeValidate = new List<ScreenTypeDto>();
	private CinemaDto cinemas;
	private List<TranslationTypeDto> TranslationTypeDtos = new List<TranslationTypeDto>();
	private List<TranslationTypeDto> TranslationTypeValidate = new List<TranslationTypeDto>();
	private IEnumerable<ScheduleDto> scheduleDtos = new List<ScheduleDto>();
	private CinemaTypeDto cinemaTypes;
	public Guid idFilm;
	private string selectedFilmId = "";
	private string startTimeValue = "";
	private string screenTypeErrorMessage = "";
	protected override async Task OnParametersSetAsync()
	{
		ShowTime.ShowtimeDate = Date;
		ShowTime.CinemaCenterId = CinemaCenterId;
		ShowTime.CinemaId = CinemaId;		

	}
	protected override async Task OnInitializedAsync()
	{
		Films = await FilmService.GetAllFilms();
		scheduleDtos = await ScheduelService.GetAllAsync();
		ScreenTypeDtos = await ScreenTypeService.GetAllScreenTypes();	
		TranslationTypeDtos = await TranslationTypeService.GetAllTranslationTypes();
		FilmValidate = from film in Films
								join schedule in scheduleDtos on film.Id equals schedule.FilmId
								where (schedule.StartDate.Date <= Date && Date <= schedule.EndDate)
								select film;

		ShowTime.Desciption = "Đang chiếu";
	}

	public void ResetForm()
	{
		idFilm = Guid.Empty; 
		ShowTime.FilmId = Guid.Empty;
		ShowTime.StartTime = null;
		ShowTime.EndTime = null;
		ShowTime.ScreenTypeId = null;
		ShowTime.TranslationTypeId = null;
		ShowTime.ScheduleId = null;
		selectedFilmId = ""; 
		startTimeValue = "";
		screenTypeErrorMessage = "";
		StateHasChanged();
	}


	private async Task OnFilmChange(ChangeEventArgs e)
	{
		selectedFilmId = e.Value?.ToString();
		screenTypeErrorMessage = ""; // Xóa thông báo lỗi cũ
		ShowTime.FilmId = null;
		ShowTime.StartTime = null;
		ShowTime.EndTime = null;
		ShowTime.ScreenTypeId = null;
		ShowTime.TranslationTypeId = null;
		ShowTime.ScheduleId = null;
		idFilm = Guid.Empty;
		startTimeValue = "";

		// Reset danh sách hình thức chiếu và hình thức dịch
		ScreenTypeValidate.Clear();
		TranslationTypeValidate.Clear();

		if (Guid.TryParse(selectedFilmId, out Guid filmId))
		{
			ShowTime.FilmId = filmId;
			idFilm = filmId;

			// Lấy lịch chiếu của phim
			var schedule = scheduleDtos.FirstOrDefault(x => x.FilmId == filmId);

			if (schedule != null)
			{
				ShowTime.ScheduleId = schedule.Id;
			}

			// Lấy thông tin phim
			var film = Films.FirstOrDefault(x => x.Id == filmId);
			if (film != null)
			{
				// Lấy danh sách hình thức chiếu phù hợp với loại phòng chiếu
				var result = await CinemaService.GetCinemaById(CinemaId.Value);
				cinemas = result.Data;
				var cinemaTypeDtosData = await CinemaTypeService.GetListCinemaTypesAsync();
				cinemaTypes = cinemaTypeDtosData.FirstOrDefault(x => x.Id == cinemas.CinemaTypeId);

				ScreenTypeValidate = film.ScreenTypeDtos
					.Where(x =>
						x.Type == cinemaTypes.Name ||
						((cinemaTypes.Name == "Premium Class" || cinemaTypes.Name == "Gold Class") && x.Type == "2D")
					).ToList();

				TranslationTypeValidate = film.TranslationTypeDtos.ToList();

				// Nếu không có hình thức chiếu phù hợp
				if (!ScreenTypeValidate.Any())
				{
					screenTypeErrorMessage = "Phim không có hình thức chiếu nào phù hợp.";
				}
			}
		}
	}

	private async Task OnStartTime(ChangeEventArgs e)
	{
		startTimeValue = e.Value.ToString();
		if (TimeSpan.TryParse(startTimeValue, out TimeSpan time))
		{
			ShowTime.StartTime = Date.Date + time;
			int endTime = Films.FirstOrDefault(x => x.Id == idFilm).RunningTime.Value;
			if (endTime != null)
			{
				if (ShowTime.StartTime.HasValue)
				{
					ShowTime.EndTime = ShowTime.StartTime.Value.AddMinutes(endTime);
				}
			}
		}
	}

	private async Task HandleCreateAsync()
	{
		var result = await ShowTimeService.Create(ShowTime);

		if (result.Status == 200)
		{
			await _IJSRuntime.ToastrSuccess(result.Message);
			await OnCreateSuccess.InvokeAsync((CinemaCenterId.Value, CinemaId.Value, ShowTime.ShowtimeDate.Value));
			ResetForm();
		}
		else
		{
			await _IJSRuntime.ToastrError(result.Message);
		}
	}

}
