@page "/create-film"
@using MovieTicket.Application.DataTransferObjs.Film
@using MovieTicket.Application.DataTransferObjs.ScreenType
@using MovieTicket.Application.DataTransferObjs.TranslationType
@using MovieTicket.Domain.Enums
@attribute [Authorize(Roles = "Admin")]
@inject IFilmService FilmService
@inject IScreenTypeServices ScreenTypeService
@inject NavigationManager NavigationManager
@inject IJSRuntime _JSRuntime
@inject ITranslationTypeService TranslationTypeService
@inject ICloudinaryService CloudinaryService
<div class="container-fluid">
    <EditForm Model="filmCreateRequest" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <a class="btn btn-outline-secondary mb-3" href="/film">Quay lại</a>
        <button type="submit" class="btn btn-primary mb-3">Submit</button>
        <div class="row mb-3">
            <div class="col-md-6">
                <label for="tenPhim" class="form-label">Tên phim</label>
                <InputText class="form-control" id="tenPhim" @bind-Value="filmCreateRequest.Name" placeholder="Enter name" />
                <ValidationMessage For="@(() => filmCreateRequest.Name)" />
            </div>
            <div class="col-md-6">
                <label class="form-label">Hình thức chiếu</label>
                <div class="d-flex flex-wrap ">
                    @foreach (var screenType in screenTypes)
                    {
                        <div class="form-check me-3">
                            <input class="form-check-input" type="checkbox" value="@screenType.Id" @onchange="(e) => OnScreenTypeChanges(e, screenType.Id)" />
                            <label class="form-check-label" for="screenType_@screenType.Id">@screenType.Type</label>
                        </div>
                    }
                </div>
                @if (!string.IsNullOrEmpty(ScreenTypeError))
                {
                    <span class="validation-message">@ScreenTypeError</span>
                }
            </div>
            
        </div>

        <div class="row mb-3">
            <div class="col-md-6">
                <label for="tenPhimEng" class="form-label">Tên phim (tiếng anh)</label>
                <InputText class="form-control" id="tenPhimEng" @bind-Value="filmCreateRequest.EnglishName" placeholder="Enter name in English" />
                <ValidationMessage For="@(() => filmCreateRequest.EnglishName)" />
            </div>
            <div class="col-md-6">
                <label class="form-label">Hình thức dịch</label>
                <div class="d-flex flex-wrap ">
                    @foreach (var translationType in translationTypes)
                    {
                        <div class="form-check me-3">
                            <input class="form-check-input" type="checkbox" value="@translationType.Id" @onchange="(e) => OnTranslationTypeChanges(e, translationType.Id)" />
                            <label class="form-check-label" for="translationType_@translationType.Id">@translationType.Type</label>
                        </div>
                    }
                </div>
                @if (!string.IsNullOrEmpty(TranslationTypeError))
                {
                    <span class="validation-message">@TranslationTypeError</span>
                }
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-6">
                <label for="trailer" class="form-label">Trailer</label>
                <InputText class="form-control" id="trailer" @bind-Value="filmCreateRequest.Trailer" placeholder="Enter trailer" />
                <ValidationMessage For="@(() => filmCreateRequest.Trailer)" />
            </div>
            <div class="col-md-6">
                <label for="doTuoi" class="form-label">Độ tuổi xem phim</label>
                <select class="form-select" @bind="filmCreateRequest.Rating">
                    <option selected disabled>Lựa chọn độ tuổi của phim</option>
                    <option value="12">Phim dành cho mọi lứa tuổi</option>
                    <option value="13">13 tuổi trở lên</option>
                    <option value="16">16 tuổi trở lên</option>
                    <option value="18">18 tuổi trở lên</option>
                </select>
                <ValidationMessage For="@(() => filmCreateRequest.Rating)" />
            </div>
        </div>

        <div class="mb-3">
            <label for="moTa" class="form-label">Mô tả</label>
            <InputTextArea class="form-control" id="moTa" @bind-Value="filmCreateRequest.Description" rows="3" placeholder="Enter description"></InputTextArea>
            <ValidationMessage For="@(() => filmCreateRequest.Description)" />
        </div>

        <div class="row mb-3">
            <div class="col-md-4">
                <label for="theLoai" class="form-label">Thể loại</label>
                <InputText class="form-control" id="theLoai" @bind-Value="filmCreateRequest.Gerne" placeholder="Enter genre" />
                <ValidationMessage For="@(() => filmCreateRequest.Gerne)" />
            </div>
            <div class="col-md-4">
                <label for="daoDien" class="form-label">Đạo diễn</label>
                <InputText class="form-control" id="daoDien" @bind-Value="filmCreateRequest.Director" placeholder="Enter director" />
                <ValidationMessage For="@(() => filmCreateRequest.Director)" />
            </div>
            <div class="col-md-4">
                <label for="dienVien" class="form-label">Diễn viên</label>
                <InputText class="form-control" id="dienVien" @bind-Value="filmCreateRequest.Cast" placeholder="Enter cast" />
                <ValidationMessage For="@(() => filmCreateRequest.Cast)" />
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-4">
                <label for="ngayChieu" class="form-label">Lịch khởi chiếu</label>
                <InputDate class="form-control" id="ngayChieu" @bind-Value="filmCreateRequest.StartDate" />
                <ValidationMessage For="@(() => filmCreateRequest.StartDate)" />
            </div>
            <div class="col-md-4">
                <label for="namPhatHanh" class="form-label">Năm phát hành</label>
                <InputNumber class="form-control" id="namPhatHanh" @bind-Value="filmCreateRequest.ReleaseYear" placeholder="Enter release year" />
                <ValidationMessage For="@(() => filmCreateRequest.ReleaseYear)" />
            </div>
            <div class="col-md-4">
                <label for="thoiLuong" class="form-label">Thời lượng phim (phút)</label>
                <InputNumber class="form-control" id="thoiLuong" @bind-Value="filmCreateRequest.RunningTime" placeholder="Enter duration" />
                <ValidationMessage For="@(() => filmCreateRequest.RunningTime)" />
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-6">
                <label for="language" class="form-label">Ngôn ngữ</label>
                <InputText class="form-control" id="language" @bind-Value="filmCreateRequest.Language" placeholder="Enter language" />
                <ValidationMessage For="@(() => filmCreateRequest.Language)" />
            </div>
            <div class="col-md-6">
                <label for="quocGia" class="form-label">Quốc gia</label>
                <InputText class="form-control" id="quocGia" @bind-Value="filmCreateRequest.Nation" placeholder="Enter nation" />
                <ValidationMessage For="@(() => filmCreateRequest.Nation)" />
            </div>
        </div>

        <div class="row mb-3">
            <label for="image" class="form-label">Tải hình ảnh</label>
            <InputFile OnChange="HandleImageChange" class="form-control" />
            <ValidationMessage For="@(() => filmCreateRequest.Poster)" />
        </div>
        @if (!string.IsNullOrEmpty(filmCreateRequest.Poster))
        {
            <div class="mb-3">
                <label>Preview:</label>
                <img src="@filmCreateRequest.Poster" alt="Preview Image" style="max-width: 200px; max-height: 200px;" />
            </div>
        }
    </EditForm>
</div>
<style>
    .validation-message {
    color: red;
    }
</style>
@code {
    private FilmCreateRequest filmCreateRequest = new FilmCreateRequest();
    private List<ScreenTypeDto> screenTypes = new List<ScreenTypeDto>();
    private List<TranslationTypeDto> translationTypes = new List<TranslationTypeDto>();
    private List<Guid> selectedScreenTypeIds = new List<Guid>();
    private List<Guid> selectedTranslationTypeId = new List<Guid>();
    private string? ScreenTypeError { get; set; }
    private string? TranslationTypeError { get; set; }


    protected override async Task OnInitializedAsync()
    {
        screenTypes = await ScreenTypeService.GetAllScreenTypes();
        translationTypes = await TranslationTypeService.GetAllTranslationTypes();
    }

    private async Task HandleValidSubmit()
    {
        ScreenTypeError = null;
        TranslationTypeError = null;

        if (!selectedScreenTypeIds.Any())
        {
            ScreenTypeError = "Vui lòng chọn ít nhất một Hình thức chiếu.";
        }

        if (!selectedTranslationTypeId.Any())
        {
            TranslationTypeError = "Vui lòng chọn ít nhất một Hình thức dịch.";
        }

        if (ScreenTypeError != null || TranslationTypeError != null)
        {
            StateHasChanged();
            return;
        }
        if (string.IsNullOrEmpty(filmCreateRequest.Poster))
        {
            await JSRuntime.ToastrError("Vui lòng tải lên ảnh hợp lệ.");
            return;
        }
        filmCreateRequest.ScreenTypeIds = selectedScreenTypeIds;
        filmCreateRequest.TranslationTypeIds = selectedTranslationTypeId;
        var result = await FilmService.CreateFilm(filmCreateRequest);
        if (result != null)
        {
            await _JSRuntime.ToastrSuccess("Tạo thành công");
            NavigationManager.NavigateTo("/film");
        }
        else
        {
            await _JSRuntime.ToastrError("Tạo phim thất bại");
        }
        StateHasChanged();
    }

    private async Task HandleImageChange(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            try
            {
                // Kiểm tra kích thước file trước khi xử lý
                if (file.Size > 10 * 1024 * 1024) // 10 MB
                {
                    await JSRuntime.ToastrError("Kích thước file vượt quá giới hạn cho phép (10 MB).");
                    return;
                }

                using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // 10 MB
                using var content = new MultipartFormDataContent();
                using var fileContent = new StreamContent(stream);

                fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);
                content.Add(fileContent, "formFile", file.Name);

                // Gọi API để upload ảnh
                var imageUrl = await CloudinaryService.UploadImageAsync(content);
                if (!string.IsNullOrEmpty(imageUrl))
                {
                    filmCreateRequest.Poster = imageUrl;
                    await JSRuntime.ToastrSuccess("Upload ảnh thành công.");
                }
                else
                {
                    await JSRuntime.ToastrError("Upload ảnh thất bại.");
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.ToastrError($"Đã xảy ra lỗi: {ex.Message}");
            }
        }
    }

    private void OnScreenTypeChanges(ChangeEventArgs e, Guid screenTypeId)
    {
        var isChecked = (bool)e.Value;
        if (isChecked)
        {
            if (!selectedScreenTypeIds.Contains(screenTypeId))
            {
                selectedScreenTypeIds.Add(screenTypeId);
            }
        }
        else
        {
            selectedScreenTypeIds.Remove(screenTypeId);
        }
    }
    private void OnTranslationTypeChanges(ChangeEventArgs e, Guid translationTypeId)
    {
        var isChecked = (bool)e.Value;

        if (isChecked)
        {
            if (!selectedTranslationTypeId.Contains(translationTypeId))
            {
                selectedTranslationTypeId.Add(translationTypeId);
            }
        }
        else
        {
            selectedTranslationTypeId.Remove(translationTypeId);
        }
    }
}
