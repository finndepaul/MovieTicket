@page "/film/update/{Id:guid}"
@using MovieTicket.Application.DataTransferObjs.Film
@using MovieTicket.Application.DataTransferObjs.ScreenType
@using MovieTicket.Application.DataTransferObjs.TranslationType
@using MovieTicket.Domain.Enums
@attribute [Authorize(Roles = "Admin")]
@inject IFilmService FilmService
@inject NavigationManager NavigationManager
@inject IJSRuntime _JSRuntime
@inject ITranslationTypeService TranslationTypeService
@inject IScreenTypeServices ScreenTypeService
<div class="container-fluid">
    <EditForm Model="filmUpdateRequest" OnValidSubmit="HandleFilmUpdate">
        <DataAnnotationsValidator />
        <a class="btn btn-outline-secondary mb-3" href="/film">Quay lại</a>
        <button type="submit" class="btn btn-primary mb-3">Submit</button>
        <div class="row mb-3">
            <div class="col-md-6">
                <label for="tenPhim" class="form-label">Tên phim</label>
                <InputText @bind-Value="filmUpdateRequest.Name" class="form-control" id="tenPhim" placeholder="Enter name" />
                <ValidationMessage For="@(() => filmUpdateRequest.Name)" />
            </div>
            <div class="col-md-6">
                <label class="form-label">Hình thức chiếu</label>
                <div class="d-flex flex-wrap">
                    @foreach (var screenType in screenTypes)
                    {
                        <div class="form-check me-3">
                            <input type="checkbox" class="form-check-input" @onchange="(e) => OnScreenTypeCheckbox(screenType.Id, e.Value)" checked="@selectedScreenTypeIds.Contains(screenType.Id)" />
                            <label class="form-check-label">@screenType.Type</label>
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-6">
                <label for="tenPhimEng" class="form-label">Tên phim (tiếng anh)</label>
                <InputText @bind-Value="filmUpdateRequest.EnglishName" class="form-control" id="tenPhimEng" placeholder="Enter english name" />
                <ValidationMessage For="@(() => filmUpdateRequest.EnglishName)" />
            </div>
            <div class="col-md-6">
                <label class="form-label">Hình thức dịch</label>
                <div class="d-flex flex-wrap ">
                    @foreach (var translationType in translationTypes)
                    {
                        <div class="form-check me-3">
                            <input type="checkbox" class="form-check-input" @onchange="(e) => OnTranslationTypeCheckbox(translationType.Id, e.Value)" checked="@selectedTranslationTypeIds.Contains(translationType.Id)" />
                            <label class="form-check-label">@translationType.Type</label>
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-6">
                <label for="trailer" class="form-label">Trailer</label>
                <InputText @bind-Value="filmUpdateRequest.Trailer" class="form-control" id="trailer" placeholder="Enter trailer" />
                <ValidationMessage For="@(() => filmUpdateRequest.Trailer)" />
            </div>
            <div class="col-md-6">
                <label for="doTuoi" class="form-label">Độ tuổi xem phim</label>
                <select class="form-select" @bind="filmUpdateRequest.Rating">
                    <option selected>Lựa chọn độ tuổi của phim</option>
                    <option value="12">Phim dành cho mọi lứa tuổi</option>
                    <option value="13">13 tuổi trở lên</option>
                    <option value="16">16 tuổi trở lên</option>
                    <option value="18">18 tuổi trở lên</option>
                </select>
                <ValidationMessage For="@(() => filmUpdateRequest.Rating)" />
            </div>
        </div>

        <div class="mb-3">
            <label for="moTa" class="form-label">Mô tả</label>
            <InputTextArea class="form-control" id="moTa" @bind-Value="filmUpdateRequest.Description" rows="3" placeholder="Enter description"></InputTextArea>
            <ValidationMessage For="@(() => filmUpdateRequest.Description)" />
        </div>

        <div class="row mb-3">
            <div class="col-md-4">
                <label for="theLoai" class="form-label">Thể loại</label>
                <InputText class="form-control" id="theLoai" @bind-Value="filmUpdateRequest.Gerne" placeholder="Enter genre" />
                <ValidationMessage For="@(() => filmUpdateRequest.Gerne)" />
            </div>
            <div class="col-md-4">
                <label for="daoDien" class="form-label">Đạo diễn</label>
                <InputText class="form-control" id="daoDien" @bind-Value="filmUpdateRequest.Director" placeholder="Enter director" />
                <ValidationMessage For="@(() => filmUpdateRequest.Director)" />
            </div>
            <div class="col-md-4">
                <label for="dienVien" class="form-label">Diễn viên</label>
                <InputText class="form-control" id="dienVien" @bind-Value="filmUpdateRequest.Cast" placeholder="Enter cast" />
                <ValidationMessage For="@(() => filmUpdateRequest.Cast)" />
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-4">
                <label for="ngayChieu" class="form-label">Lịch chiếu</label>
                <InputDate class="form-control" id="ngayChieu" @bind-Value="filmUpdateRequest.StartDate" />
                <ValidationMessage For="@(() => filmUpdateRequest.StartDate)" />
            </div>
            <div class="col-md-4">
                <label for="namPhatHanh" class="form-label">Năm phát hành</label>
                <InputNumber class="form-control" id="namPhatHanh" @bind-Value="filmUpdateRequest.ReleaseYear" placeholder="Enter release year" />
                <ValidationMessage For="@(() => filmUpdateRequest.ReleaseYear)" />
            </div>
            <div class="col-md-4">
                <label for="thoiLuong" class="form-label">Thời lượng phim (phút)</label>
                <InputNumber class="form-control" id="thoiLuong" @bind-Value="filmUpdateRequest.RunningTime" placeholder="Enter duration" />
                <ValidationMessage For="@(() => filmUpdateRequest.RunningTime)" />
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-6">
                <label for="language" class="form-label">Ngôn ngữ</label>
                <InputText type="text" class="form-control" id="language" @bind-Value="filmUpdateRequest.Language" placeholder="Enter language"/>
                <ValidationMessage For="@(() => filmUpdateRequest.Language)" />
            </div>
            <div class="col-md-6">
                <label for="quocGia" class="form-label">Quốc gia</label>
                <InputText class="form-control" id="quocGia" @bind-Value="filmUpdateRequest.Nation" placeholder="Enter nation" />
                <ValidationMessage For="@(() => filmUpdateRequest.Nation)" />
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-12">
                @if (filmUpdateRequest.Poster == null)
                {
                    <label for="customFile" class="form-label">Upload Image</label>
                    <InputFile OnChange="LoadFiles" class="form-control" id="customFile" accept="image/x-png,image/jpeg"></InputFile>
                }
                @if (filmUpdateRequest.Poster != null)
                {
                    <div class="row">
                        <div class="col-md-12 pt-3">
                            <img src="@filmUpdateRequest.Poster" alt="Film Image" class="img-thumbnail img-fluid" style="max-width: 100%; height: auto;">
                        </div>
                        <div class="col-md-12 pt-3">
                            <a type="button" class="btn btn-danger" @onclick="DeleteImage">Xóa ảnh</a>
                        </div>
                    </div>
                }
            </div>
        </div>
    </EditForm>
</div>
<style>
    .validation-message {
        color: red;
    }
</style>
@code {
    [Parameter]
    public Guid Id { get; set; }
    private FilmUpdateRequest filmUpdateRequest = new FilmUpdateRequest();
    private FilmDto filmDto = new FilmDto();
    private string? _directoryPath { get; set; }
    private List<ScreenTypeDto> screenTypes = new List<ScreenTypeDto>();
    private List<TranslationTypeDto> translationTypes = new List<TranslationTypeDto>();
    private List<Guid> selectedScreenTypeIds = new List<Guid>();
    private List<Guid> selectedTranslationTypeIds = new List<Guid>();
    protected async override Task OnInitializedAsync()
    {

        //Lấy thông tin phim theo id
        filmDto = await FilmService.GetById(Id);
        //Gọi API lấy danh sách hình thức chiếu và dịch
        screenTypes = await ScreenTypeService.GetAllScreenTypes();
        translationTypes = await TranslationTypeService.GetAllTranslationTypes();
        if(filmDto != null)
        {
            filmUpdateRequest = new FilmUpdateRequest()
            {   
                Name = filmDto.Name,
                EnglishName = filmDto.EnglishName,
                Trailer = filmDto.Trailer,
                Description = filmDto.Description,
                Gerne = filmDto.Gerne,
                Director = filmDto.Director,
                Cast = filmDto.Cast,
                Rating = filmDto.Rating,
                StartDate = filmDto.StartDate,
                ReleaseYear = filmDto.ReleaseYear,
                RunningTime = filmDto.RunningTime,
                Nation = filmDto.Nation,
                Poster = filmDto.Poster,
                Language = filmDto.Language
            };

            selectedScreenTypeIds = filmDto.ScreenTypeDtos.Select(st => st.Id).ToList();
            selectedTranslationTypeIds = filmDto.TranslationTypeDtos.Select(tt => tt.Id).ToList();
            _directoryPath = Path.Combine(WebHostEnv.WebRootPath, "img", "posterFilm");
        }
        else
        {
            await _JSRuntime.ToastrError("Có lỗi");
        }
        
    }

    private async Task HandleFilmUpdate()
    {
        filmUpdateRequest.ScreenTypeIds = selectedScreenTypeIds;
        filmUpdateRequest.TranslationTypeIds = selectedTranslationTypeIds;
        var response = await FilmService.UpdateFilm(Id, filmUpdateRequest);
        if (response != null)
        {
            await _JSRuntime.ToastrSuccess("Cập nhật phim thành công");
            NavigationManager.NavigateTo("/film");
        }
        else
        {
            await _JSRuntime.ToastrError("Cập nhật phim thất bại");
        }

    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        var file = e.File;
        FileInfo fileInfo = new(file.Name);
        var newFileName = $"{Guid.NewGuid()}{fileInfo.Extension}";
        if (!Directory.Exists(_directoryPath))
        {
            Directory.CreateDirectory(_directoryPath);
        }
        var path = Path.Combine(_directoryPath, newFileName);
        await using FileStream fs = new(path, FileMode.Create);
        await file.OpenReadStream(file.Size).CopyToAsync(fs);
        filmUpdateRequest.Poster = $"/img/posterFilm/{newFileName}";
    }

    void DeleteImage()
    {
        if (filmUpdateRequest.Poster == null)
        {
            return;
        }
        var fileToDelete = filmUpdateRequest.Poster.Split('/').Reverse().First();
        var filePathToDeleteImage = Path.Combine(_directoryPath, fileToDelete);
        if (!File.Exists(filePathToDeleteImage))
        {
            filmUpdateRequest.Poster = null;
            return;
        }
        File.Delete(filePathToDeleteImage);

        filmUpdateRequest.Poster = null;
        return;
    }

    private void OnScreenTypeCheckbox(Guid screenTypeId, object isChecked)
    {
        if ((bool)isChecked)
        {
            if (!selectedScreenTypeIds.Contains(screenTypeId))
            {
                selectedScreenTypeIds.Add(screenTypeId);
            }
        }
        else
        {
            if (selectedScreenTypeIds.Contains(screenTypeId))
            {
                selectedScreenTypeIds.Remove(screenTypeId);
            }
        }
    }

    private void OnTranslationTypeCheckbox(Guid translationTypeId, object isChecked)
    {
        if ((bool)isChecked)
        {
            if (!selectedTranslationTypeIds.Contains(translationTypeId))
            {
                selectedTranslationTypeIds.Add(translationTypeId);
            }
        }
        else
        {
            if (selectedTranslationTypeIds.Contains(translationTypeId))
            {
                selectedTranslationTypeIds.Remove(translationTypeId);
            }
        }
    }
}
