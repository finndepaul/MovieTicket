@page "/film"
@using MovieTicket.Application.DataTransferObjs.Film
@using MovieTicket.Application.ValueObjs.Paginations
@using MovieTicket.Domain.Enums
@attribute [Authorize(Roles = "Admin")]
@inject IFilmService FilmService
@inject NavigationManager NavigationManager
@inject IJSRuntime _JSRuntime

<style>
    .badge-coming-soon {
        background-color: yellow;
        color: black;
    }

    .badge-now-showing {
        background-color: green;
        color: white;
    }

    .badge-ended {
        background-color: red;
        color: white;
    }
</style>

<div class="modal fade" id="DeleteFilmModalToggle" aria-hidden="true" aria-labelledby="DeleteFilmModalToggle" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header" data-bs-theme="dark">
                <h1 class="modal-title fs-5" id="DeleteFilmModalToggle">Xác nhận xóa phim</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Bạn có chắc chắn muốn xóa phim này không?</p>
                <button type="button" class="btn btn-danger" data-bs-dismiss="modal" @onclick="() => HandleDeleteFilm(SelectedDeleteFilmId)">Xóa</button>
            </div>
        </div>
    </div>
</div>

<div class="container-fluid">

    <div class="row align-items-center">
        <!-- Nút Tạo Phim -->
        <div class="col-auto">
            <button class="btn btn-primary" @onclick="CreateFilm">+ Tạo phim</button>
        </div>

        <!-- Tìm kiếm theo tên -->
        <div class="col-auto">
            <input type="text"
                   class="form-control"
                   placeholder="Tìm kiếm theo tên"
                   @bind="searchName"
                   @oninput="OnSearchNameInput" />
        </div>

        <!-- Tìm kiếm theo năm phát hành -->
        <div class="col-auto">
            <input type="number"
                   class="form-control"
                   placeholder="Tìm kiếm theo năm phát hành"
                   @bind="searchReleaseYear"
                   @oninput="OnSearchReleaseYearInput" />
        </div>

        <!-- Lọc theo ngày bắt đầu -->
        <div class="col-auto">
            <input type="date"
                   class="form-control"
                   @bind="searchStartDate"
                   @oninput="OnSearchStartDateInput" />
        </div>

        <!-- Lọc theo ngày tạo -->
        <div class="col-auto">
            <input type="date"
                   class="form-control"
                   @bind="searchCreateDate"
                   @oninput="OnSearchCreateDateInput" />
        </div>

        <!-- Nút Huỷ Lọc -->
        <div class="col-auto">
            <button class="btn btn-secondary" @onclick="CancelFilters">Huỷ Lọc</button>
        </div>
    </div>


    <!-- Movie Table -->
    <div class="table-responsive mb-3">
        <table class="table">
            <thead class="table-light">
                <tr>
                    <th scope="col">Tên phim</th>
                    <th scope="col">Năm phát hành</th>
                    <th scope="col">Thể loại</th>
                    <th scope="col">Lịch chiếu</th>
                    <th scope="col">Trạng thái</th>
                    <th scope="col">Ngày tạo</th>
                    <th scope="col">Action</th>
                </tr>
            </thead>
            <tbody>
                @if (filmDto != null)
                {
                    @if (filmDto.Any())
                    {
                        @foreach (var film in filmDto)
                        {
                            <tr class="align-middle">
                                <td>@film.Name</td>
                                <td>@film.ReleaseYear</td>
                                <td>
                                    <span class="badge text-bg-primary" style="white-space: normal; width: 200px;">@film.Gerne</span>
                                </td>
                                <td class="text-danger">@film.StartDate?.ToString("dd-MM-yyyy")</td>
                                <td>
                                    <span class="badge @(GetBadgeClass(film.Status))">@film.Status</span>
                                </td>
                                <td>@film.CreatDate?.ToString("dd-MM-yyyy")</td>
                                <td>
                                    <a class="btn btn-outline-primary" href="@($"film/update/{film.Id}")">
                                        <i class="bi bi-pencil-square"></i>
                                    </a>
                                    <button class="btn btn-outline-danger" @onclick="() => GetFilmDeleteId(film.Id)">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="7"><em>No film found</em></td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="7"><em>Loading...</em></td>
                    </tr>
                }
            </tbody>
            <tfoot>
                <Pagination MetaData="metaData" SelectedPage="SelectedPage" Spread="2" />
            </tfoot>
        </table>
    </div>

</div>

<script>
    function openModalDelete(modalId) {
        var modal = new bootstrap.Modal(document.getElementById(modalId));
        modal.show();
    }
</script>

@code {
    private IEnumerable<FilmDto> filmDto { get; set; } = new List<FilmDto>();
    private PagingParameters pagingParameters = new PagingParameters { PageNumber = 1, PageSize = 10 };
    private MetaData metaData = new MetaData();
    private string searchName = string.Empty;
    private int? searchReleaseYear;
    private DateTime? searchCreateDate;
    private DateTime? searchStartDate;
    private Guid SelectedDeleteFilmId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadFilms();
    }

    private async Task LoadFilms()
    {
        var pagedFilms = await FilmService.GetAllPaging(pagingParameters);
        filmDto = pagedFilms.Item;
        metaData = pagedFilms.MetaData;
    }

    private async Task GetFilmDeleteId(Guid id)
    {
        SelectedDeleteFilmId = id;
        await JSRuntime.InvokeVoidAsync("openModalDelete", "DeleteFilmModalToggle");
    }

    private async Task HandleDeleteFilm(Guid id)
    {
        var result = await FilmService.DeleteFilm(id);
        if (result != null)
        {
            await _JSRuntime.ToastrSuccess("Xóa thành công");
            await ApplyFilters();
        }
        else
        {
            await _JSRuntime.ToastrError("Xóa thất bại");
        }
    }

    private void CreateFilm()
    {
        NavigationManager.NavigateTo("/create-film");
    }

    private string GetBadgeClass(FilmStatus? status)
    {
        return status switch
        {
            FilmStatus.ComingSoon => "badge-coming-soon",
            FilmStatus.NowShowing => "badge-now-showing",
            FilmStatus.Ended => "badge-ended",
            _ => "badge-secondary"
        };
    }

    private async Task SelectedPage(int page)
    {
        pagingParameters.PageNumber = page;
        await ApplyFilters();
    }

    private async Task OnSearchNameInput(ChangeEventArgs e)
    {
        searchName = e.Value.ToString();
        pagingParameters.PageNumber = 1;
        await ApplyFilters();
    }

    private async Task OnSearchReleaseYearInput(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int year))
        {
            searchReleaseYear = year;
        }
        else
        {
            searchReleaseYear = null;
        }
        pagingParameters.PageNumber = 1;
        await ApplyFilters();
    }

    private async Task OnSearchCreateDateInput(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value.ToString(), out DateTime date))
        {
            searchCreateDate = date;
        }
        else
        {
            searchCreateDate = null;
        }
        pagingParameters.PageNumber = 1;
        await ApplyFilters();
    }

    private async Task OnSearchStartDateInput(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value.ToString(), out DateTime date))
        {
            searchStartDate = date;
        }
        else
        {
            searchStartDate = null;
        }
        pagingParameters.PageNumber = 1;
        await ApplyFilters();
    }

    private async Task ApplyFilters()
    {
        var pagedFilms = await FilmService.GetFiltering(searchName, searchReleaseYear, searchCreateDate, searchStartDate, pagingParameters);
        filmDto = pagedFilms.Item;
        metaData = pagedFilms.MetaData;
    }

    private async Task CancelFilters()
    {
        searchName = string.Empty;
        searchReleaseYear = null;
        searchCreateDate = null;
        searchStartDate = null;
        pagingParameters.PageNumber = 1;
        await LoadFilms();
    }
}
