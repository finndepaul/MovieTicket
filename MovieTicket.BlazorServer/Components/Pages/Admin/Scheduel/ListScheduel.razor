@page "/scheduel"
@using MovieTicket.Application.DataTransferObjs.Schedule
@using MovieTicket.BlazorServer.Services.Interfaces
@attribute [Authorize(Roles = "Admin")]
@inject IJSRuntime JSRuntime
@inject IScheduelService _scheduleService
@inject NavigationManager _navigationManager

<div class="container-fluid">
    <div class="d-grid gap-2 d-md-flex justify-content-md-start">
        <div class="d-flex align-items-center">
            <div class="d-flex align-items-center me-4">
                <label for="input" class="me-2 mb-0">Tên Phim:</label>
                <input type="text" id="text" class="form-control form-control-sm" style="width: 250px;" placeholder="Nhập tên phim để tìm kiếm" @bind="filmName">
            </div>
            <div class="d-flex align-items-center me-4">
                <label for="date" class="me-2 mb-0">Ngày bắt đầu:</label>
                <input type="date" id="date" class="form-control form-control-sm" style="width: 150px;" @bind="startDate">
            </div>
            <div class="d-flex align-items-center me-4">
                <label for="date" class="me-2 mb-0">Ngày kết thúc:</label>
                <input type="date" id="date" class="form-control form-control-sm" style="width: 150px;" @bind="endDate">
            </div>
            <div class="d-flex align-items-center">
                <button class="btn btn-primary btn-sm" @onclick="Refresh">Tìm kiếm</button>
            </div>
        </div>
        <div class="ms-auto">
            <button class="btn add-btn" id="btnAdd" data-bs-toggle="modal" data-bs-target="#addModal">
                <i class="bi bi-plus-square"></i>
                Tạo lịch chiếu
            </button>
        </div>
        <div class="modal fade" id="addModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header" data-bs-theme="dark">
                        <h4 class="modal-title">Tạo lịch chiếu</h4>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <MovieTicket.BlazorServer.Components.Pages.Admin.Scheduel.AddScheduel />
                    </div>
                </div>
            </div>
        </div>

        <div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header" data-bs-theme="dark">
                        <h4 class="modal-title">Sửa lịch chiếu</h4>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <MovieTicket.BlazorServer.Components.Pages.Admin.Scheduel.UpdateScheduel ScheduleId="@selectedScheduleId" />
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="table-responsive mb-3">
        <table class="table table-hover">
            <thead class="table-light">
                <tr>
                    <th scope="col">STT</th>
                    <th scope="col">Phim chiếu</th>
                    <th scope="col">Thời gian chiếu</th>
                    <th scope="col">Trạng thái</th>
                    <th scope="col">Phân loại</th>
                    <th scope="col"></th>
                </tr>
            </thead>
            <tbody>
                @if (Schedules != null)
                {
                    int index = 1;
                    foreach (var item in Schedules)
                    {
                        <tr>
                            <th scope="row">@index</th>
                            <td>@item.FilmName</td>
                            <td>
                                <span class="badge text-bg-secondary">
                                    @((item.StartDate is DateTime ? ((DateTime)item.StartDate).ToString("dd-MM-yyyy") : "Invalid Date"))
                                </span>
                                <span class="badge text-bg-secondary">
                                    @((item.StartDate is DateTime ? ((DateTime)item.EndDate).ToString("dd-MM-yyyy") : "Invalid Date"))
                                </span>

                            </td>
                            <td>
                                @if (item.Status.ToString() == "Ended")
                                {
                                    <span class="badge bg-danger">Đã chiếu</span>
                                }
                                else if (item.Status.ToString() == "ComingSoon")
                                {
                                    <span class="badge bg-soon">Sắp chiếu</span>
                                }
                                else if (item.Status.ToString() == "Showing")
                                {
                                    <span class="badge bg-now">Đang chiếu</span>
                                }
                            </td>
                            <td>
                                @if (item.Type.ToString() == "Early")
                                {
                                    <span class="badge bg-soon">Suất chiếu sớm</span>
                                }
                                else if (item.Type.ToString() == "Regular")
                                {
                                    <span class="badge bg-now">Đang chiếu</span>
                                }
                                else if (item.Type.ToString() == "Special")
                                {
                                    <span class="badge bg-warning">Suất chiếu đặc biệt</span>
                                }
                            </td>
                            <td>
                                <button class="btn btn-sm edit-btn" data-id="@item.Id" @onclick="() => OpenEditModal(item.Id.ToString())">
                                    <i class="bi bi-pencil-square"></i>
                                    Sửa
                                </button>

                                <button class="btn btn-sm btn-outline-danger" @onclick = "() => HandleRemoveSchedule(item.Id.ToString())">
                                    <i class="bi bi-trash"></i>
                                    Xóa
                                </button>
                            </td>

                        </tr>
                        index++;
                    }
                }
                else
                {
                    <tr>
                        <td colspan="5" class="text-center">Loading...</td>
                    </tr>
                }
            </tbody>
            <tfoot>
                <Pagination MetaData="metaData" Spread="3" SelectedPage="SelectedPage"></Pagination>
            </tfoot>
        </table>
    </div>
</div>

<style>
    .add-btn {
        -webkit-transition: all 0.5s ease-in-out;
        background-color: #64B5F6;
        color: #fff;
    }

        .add-btn:hover {
            -webkit-transform: scale(1.1);
            background-color: #64B5F6;
            color: #fff;
        }

    .bg-soon {
        background-color: #B3E5FC;
        color: #03A9F4;
        outline: thin solid #03A9F4;
    }

    .bg-now {
        background-color: #F1F8E9;
        color: #76FF03;
        outline: thin solid #76FF03;
    }

    .edit-btn {
        background-color: #FFA726;
        color: #fff;
    }

        .edit-btn:hover {
            background-color: #FFA726;
            color: #fff;
        }

    .btn {
        -webkit-transition: all 0.5s ease-in-out;
    }

        .btn:hover {
            -webkit-transform: scale(1.1);
        }
</style>
<script>
    function openModal(modalId) {
        var modal = new bootstrap.Modal(document.getElementById(modalId));
        modal.show();
    }
    
</script>

@code {
    private List<ScheduleDto> Schedules;
    private string selectedScheduleId;
    private string filmName {get; set;}
    private DateTime startDate { get; set; } = DateTime.Now;
    private DateTime endDate { get; set; } = DateTime.Now;
    private PagingParameters pagingParameters = new PagingParameters();
    CancellationToken cancellationToken;
    private MetaData metaData { get; set; } = new MetaData();
    override protected async Task OnInitializedAsync()
    {
        var pagination = await _scheduleService.GetAllAsync(
            filmName,
            startDate,
            endDate,
            new PagingParameters
            {
                PageNumber = pagingParameters.PageNumber,
                PageSize = 10
            },
            cancellationToken);
        Schedules = pagination.Item.ToList();
        metaData = pagination.MetaData;
        StateHasChanged();
    }

    private async Task SelectedPage(int page)
    {
        pagingParameters.PageNumber = page;
        await Refresh();
    }
    private async Task OpenEditModal(string id)
    {
        selectedScheduleId = id;  // Lưu Id của lịch chiếu khi nhấn nút Sửa
        await JSRuntime.InvokeVoidAsync("openModal", "editModal");  // Mở modal sửa
    }
    private async Task Refresh()
    {
        var pagination = await _scheduleService.GetAllAsync(
            filmName,
            startDate,
            endDate,
            new PagingParameters
                {
                    PageNumber = pagingParameters.PageNumber,
                    PageSize = 10
                },
            cancellationToken);
        Schedules = pagination.Item.ToList();
        metaData = pagination.MetaData;
    }
    private async Task HandleRemoveSchedule(string id)
    {
        var result = await _scheduleService.DeleteAsync(Guid.Parse(id), cancellationToken);
        if (result)
        {
            _navigationManager.NavigateTo("/scheduel", forceLoad: true);
        }
    }
}