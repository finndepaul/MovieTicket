@page "/dich-vu/update/{Id:guid}"
@inject IComboService ComboService
@inject ICloudinaryService CloudinaryService
@attribute [Authorize(Roles = "Admin")]
<EditForm Model="updateComboRequest" OnValidSubmit="HandleOnSubmit">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <a type="button" class="btn btn-light me-2" href="/dich-vu">Quay lại</a>
        <button type="submit" class="btn btn-primary me-2">Lưu</button>
    </div>

    <div class="mb-3">
        <label for="name" class="form-label">Tên dịch vụ</label>
        <InputText id="name" class="form-control" @bind-Value="updateComboRequest.Name" />
        <ValidationMessage For="@(() => updateComboRequest.Name)" />
    </div>

    <div class="mb-3">
        <label for="price" class="form-label">Giá</label>
        <InputNumber id="price" class="form-control" @bind-Value="updateComboRequest.Price" />
        <ValidationMessage For="@(() => updateComboRequest.Price)" />
    </div>

    <div class="mb-3">
        <label for="description" class="form-label">Mô tả</label>
        <InputTextArea id="description" class="form-control" @bind-Value="updateComboRequest.Description" />
        <ValidationMessage For="@(() => updateComboRequest.Description)" />
    </div>

    <div class="mb-3">
        <label for="trangThai" class="form-label">Trạng thái</label>
        <InputSelect class="form-select" id="trangThai" @bind-Value="updateComboRequest.comboStatus">
            <option selected disabled>Select a Status</option>
            @foreach (var Item in Enum.GetValues(typeof(ComboStatus)))
            {
                <option value="@Item">@Item</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => updateComboRequest.comboStatus)" />
    </div>

    <div class="mb-3">
        <label for="image" class="form-label">Tải hình ảnh mới (nếu có)</label>
        <InputFile OnChange="HandleImageChange" class="form-control" />
        @if (!string.IsNullOrEmpty(updateComboRequest.Image))
        {
            <div class="pt-3">
                <img src="@updateComboRequest.Image" alt="Combo Image" class="img-fluid" />
            </div>
        }
        <ValidationMessage For="@(() => updateComboRequest.Image)" />
    </div>
</EditForm>

<style>
    .validation-message {
        color: red;
    }
</style>

@code {
    [Parameter]
    public Guid Id { get; set; }

    private UpdateComboRequest updateComboRequest = new UpdateComboRequest();
    private ComboDto comboDto = new ComboDto();

    protected override async Task OnInitializedAsync()
    {
        var result = await ComboService.GetById(Id);
        if (result != null)
        {
            comboDto = result;
            updateComboRequest = new UpdateComboRequest
                {
                    Name = comboDto.Name,
                    Price = comboDto.Price,
                    Description = comboDto.Description,
                    comboStatus = comboDto.comboStatus,
                    Image = comboDto.Image // Giữ ảnh hiện tại
                };
        }
    }

    private async Task HandleImageChange(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            try
            {
                // Kiểm tra kích thước file trước khi xử lý
                if (file.Size > 10 * 1024 * 1024) // 10 MB
                {
                    await JSRuntime.ToastrError("Kích thước file vượt quá giới hạn cho phép (10 MB).");
                    return;
                }

                using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // 10 MB
                using var content = new MultipartFormDataContent();
                using var fileContent = new StreamContent(stream);

                fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);
                content.Add(fileContent, "formFile", file.Name);

                // Gọi API để upload ảnh
                var imageUrl = await CloudinaryService.UploadImageAsync(content);
                if (!string.IsNullOrEmpty(imageUrl))
                {
                    updateComboRequest.Image = imageUrl;
                    await JSRuntime.ToastrSuccess("Upload ảnh thành công.");
                }
                else
                {
                    await JSRuntime.ToastrError("Upload ảnh thất bại.");
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.ToastrError($"Đã xảy ra lỗi: {ex.Message}");
            }
        }
    }

    private async Task HandleOnSubmit()
    {
        var result = await ComboService.Update(Id, updateComboRequest);
        if (result.Status == 200)
        {
            await JSRuntime.ToastrSuccess(result.Message);
            NavigationManager.NavigateTo("/dich-vu");
        }
        else
        {
            await JSRuntime.ToastrError(result.Message);
        }
    }
}
