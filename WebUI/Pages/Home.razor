@page "/"
@layout UserLayout

<PageTitle>Home</PageTitle>
@if (lstBanner.Count > 0)
{
	<div id="carouselExampleAutoplaying" class="carousel slide " data-bs-ride="carousel">
		<div class="carousel-indicators">
			@for (int i = 0; i < lstBanner.Count; i++)
			{
				<button type="button" data-bs-target="#carouselExampleAutoplaying" data-bs-slide-to="@i" class="@((i == 0) ? "active" : "")" aria-current="@((i == 0) ? "true" : "")" aria-label="Slide @(i + 1)"></button>
			}
			)
		</div>
		<div class="carousel-inner">
			@foreach (var item in lstBanner)
			{
				<div class="carousel-item @((item == lstBanner[0]) ? "active" : "")">
					<img src="@item.Image" class="d-block w-100" alt="...">
				</div>
			}

		</div>
		<button class="left carousel-control" type="button" data-bs-target="#carouselExampleAutoplaying" data-bs-slide="prev">
			<span class="carousel-control-prev-icon" aria-hidden="true"></span>
			<span class="visually-hidden">Previous</span>
		</button>
		<button class="right carousel-control" type="button" data-bs-target="#carouselExampleAutoplaying" data-bs-slide="next">
			<span class="carousel-control-next-icon" aria-hidden="true"></span>
			<span class="visually-hidden">Next</span>
		</button>
	</div>
}
else
{
	<div class="d-flex justify-content-center mt-3">
		<div class="spinner-border text-info" role="status">
			<span class="visually-hidden">Loading...</span>
		</div>
	</div>
}
<div class="container mt-4">
	<div class="tab mt-0 mb-5 d-flex justify-content-center border-bottom">
		<button class="tablinks" onclick="openCity(event, 'DangChieu')" id="defaultOpen">PHIM ĐANG CHIẾU</button>
		<button class="tablinks" onclick="openCity(event, 'SapChieu')">PHIM SẮP CHIẾU</button>
	</div>
	<div class="m-5">
		<!-- Tab content -->
		<div id="SapChieu" class="tabcontent">
			<div class="row">
				@if (listObjFilm.Count() == 0)
				{
					<div class="d-flex justify-content-center">
						<div class="spinner-border text-info" role="status">
							<span class="visually-hidden">Loading...</span>
						</div>
					</div>
				}
				else
				{
					<!-- Movie 1 -->
					@foreach (var item in listObjFilm)
					{
						if (item.SType == null)
						{
							var rating = "c" + "-" + item.Rating.Value.ToString() + ".png";
							<div class="col-lg-3 mb-5">
								<div class="movie-card">
									<a href="film-view/@item.Id"><img src="@item.Poster" alt="Movie Poster" class="object-fit-fill" style="height: 316px"></a>
									<span style="position: absolute; top: 10px; left: 10px;"><img src="./img/icons/@rating" /></span>
									<span class="sticker sticker-new"></span>

									<div class="movie-info">
										<h5 class="text-primary"><a href="film-view/@item.Id" style="text-decoration:none">@item.Name</a></h5>
										<p><strong class="me-2">Thể loại:</strong>@item.Gerne</p>
										<p><strong class="me-2">Thời lượng:</strong>@item.RunningTime</p>
										<p><strong>Ngày khởi chiếu:</strong> @item.StartDate.Value.ToString("dd-MM-yyyy")</p>
									</div>

								</div>
							</div>
						}
						if (item.SType == ScheduleType.Early)
						{
							var rating = "c" + "-" + item.Rating.Value.ToString() + ".png";
							<div class="col-lg-3 mb-5">
								<div class="movie-card">
									<a href="film-view/@item.Id"><img src="@item.Poster" alt="Movie Poster" class="object-fit-fill" style="height: 316px"></a>
									<span style="position: absolute; top: 10px; left: 10px;"><img src="./img/icons/@rating" /></span>
									<span class="sticker sticker-new"></span>

									<div class="movie-info">
										<h5 class="text-primary"><a href="film-view/@item.Id" style="text-decoration:none">@item.Name</a></h5>
										<p><strong class="me-2">Thể loại:</strong>@item.Gerne</p>
										<p><strong class="me-2">Thời lượng:</strong>@item.RunningTime</p>
										<p><strong>Ngày khởi chiếu:</strong> @item.StartDate.Value.ToString("dd-MM-yyyy")</p>
									</div>
									<a style="display: block;bottom:0" @onclick="() => OpenModalShowTime(item.Id.ToString())" class="btn btn-2 btn-mua-ve2 fancybox-fast-view">
										<span><i class="bi bi-ticket-perforated"></i></span>
										MUA VÉ
									</a>
								</div>
							</div>
						}
					}
				}
			</div>
		</div>

		<div id="DangChieu" class="tabcontent">
			<div class="row">
				<!-- Movie 1 -->
				@if (listObjFilm.Count() == 0)
				{
					<div class="d-flex justify-content-center">
						<div class="spinner-border text-info" role="status">
							<span class="visually-hidden">Loading...</span>
						</div>
					</div>
					
				}
				else
				{
					@foreach (var item in listObjFilm)
					{
						@if (item.SType == ScheduleType.Regular)
						{
							var rating = "c" + "-" + item.Rating.Value.ToString() + ".png";
							<div class="col-lg-3 mb-5">
								<div class="movie-card">
									<a href="film-view/@item.Id"><img src="@item.Poster" alt="Movie Poster" class="object-fit-fill" style="height: 316px"></a>
									<span style="position: absolute; top: 10px; left: 10px;"><img src="./img/icons/@rating" /></span>
									<span class="sticker sticker-new"></span>

									<div class="movie-info">
										<h5 class="text-primary"><a href="film-view/@item.Id" style="text-decoration:none">@item.Name</a></h5>
										<p><strong class="me-2">Thể loại:</strong>@item.Gerne</p>
										<p><strong class="me-2">Thời lượng:</strong>@item.RunningTime phút</p>
									</div>
									<a style="display: block;bottom:0" @onclick="() => OpenModalShowTime(item.Id.ToString())" class="btn btn-2 btn-mua-ve2 fancybox-fast-view">
										<span><i class="bi bi-ticket-perforated"></i></span>
										MUA VÉ
									</a>
								</div>
							</div>
						}
					}
				}

			</div>
		</div>
	</div>

</div>
<div id="myModalBuyTicket" class="modal-buy">
	<div class="modal-size">
		<div class="modal-content-buy d-flex justify-content-between border-bottom ">
			<span class="close-modal-btn" onclick="closeModal()">&times;</span>
			<h5>LỊCH CHIẾU - @filmName</h5>
		</div>
		<div class="modal-body">
			<ViewShowTimeModal OnShowtimeSelected="OpenSeatSelectionModal"
							   Id="@IdFilm"
							   LoginCallback="RedirectToLogin" />
		</div>
	</div>
</div>
<!--Modal chọn ghế -->
<div class="modal fade" id="SeatSelectionModal" tabindex="-1" data-bs-backdrop="static" aria-hidden="true">
	<div class="modal-dialog modal-fullscreen modal-dialog-scrollable">
		<div class="modal-content">
			<div class="modal-header" style="height:10%" data-bs-theme="dark">
				<h4 class="modal-title text-center">Chọn ghế</h4>
				<button type="button" class="btn-close" @onclick="() => ShowCloseConfirmation()" aria-label="Close"></button>
			</div>
			<div class="modal-body" style="background-color: #fdfcf0;height:70%">
				<SeatSelectionModal @ref="seatSelectionModalref"
									ShowtimeId="@ShowTimeId"
									OnSeatSelection="HandleSelectedSeats" />
			</div>
			<div class="modal-footer" style="width:100%;height:20%; background-color:#031529;color:#fff">
				<SeatFooter ShowtimeId="@ShowTimeId"
							SeatDTOs="lstSeats"
							@ref="seatFooterRef"
							SeatsSelectedstr="@SeatsSelectedstr"
							TotalTicket="@TotalTicket"
							NextToComboModal="OpenComboSelectionModal"
							BackToShowtimeModal="ShowCloseConfirmation"
							resetSeat ="ResetSeatSelection"/>
			</div>
		</div>
	</div>
</div>
<!--Modal combo -->
<div class="modal fade" id="ComboSelectionModal" tabindex="-1" data-bs-backdrop="static" aria-hidden="true">
	<div class="modal-dialog modal-fullscreen modal-dialog-scrollable">
		<div class="modal-content">
			<div class="modal-header" style="height:10%" data-bs-theme="dark">
				<h4 class="modal-title">Chọn dịch vụ mua kèm</h4>
			</div>
			<div class="modal-body" style="height:70%">
				<ComboSelectionModal @ref="comboSelectionModalref"
									 BillId="@BillId"
									 OnComboSelection="HandleSelectedCombos" />
			</div>
			<div class="modal-footer" style="width:100%;height:20%;background-color:#031529;color:#fff">
				<ComboFooter ShowtimeId="@ShowTimeId"
							 CheckedSeats="lstCheckedSeats"
							 SelectedCombos="lstSelectedCombos"
							 BillId="@BillId" @ref="comboFooterRef"
							 AccountId="@AccountId"
							 SeatsSelectedstr="@SeatsSelectedstr"
							 TotalCombo="@TotalCombo"
							 TotalMoney="@TotalMoney"
							 TotalTicket="@TotalTicket"
							 BackToSeatModal="PreComboSelectionModal"
							 NextToDiscount="OpenDiscountModal" />
			</div>
		</div>
	</div>
</div>
<!--Modal Discount-->
<div class="modal fade" id="DiscountSelectionModal" tabindex="-1" data-bs-backdrop="static" aria-hidden="true">
	<div class="modal-dialog modal-fullscreen modal-dialog-scrollable">
		<div class="modal-content">
			<div class="modal-header" style="height:10%" data-bs-theme="dark">
				<h4 class="modal-title">Thanh toán</h4>
			</div>
			<div class="modal-body" style="height:67%">
				<DiscountSelectionModal
					BillId="@BillId" 
					@ref="DiscountSelectionModalRef" 
					OpenDiscount="OpenDiscount" 
					OnAppliedDiscount="HandleAppliedDisCount" 
					AccountId="@AccountId" 
					Mempoint="HandleMembershipPoint"
					TimerOutDiscount="HandleTimerOutDiscount" />
			</div>
			<div class="modal-footer" style="width:100%;height:23%;background-color:#031529;color:#fff">
				<DiscountFooter ShowtimeId="@ShowTimeId"
								CheckedSeats="lstCheckedSeats"
								SeatsSelectedstr="@SeatsSelectedstr"
								TotalCombo="@TotalCombo"
								TotalMoney="@TotalMoney"
								TotalTicket="@TotalTicket"
								Discount="@Discount"
								BillId="@BillId"
								BillCombo="ComboCheckRequest"
								Mempoint="@mempoint"
								@ref="DiscountFooterRef"
								BackToSeat="CancelCheckout" />
			</div>
		</div>
	</div>
</div>


<style>
	.carousel-item img {
		width: 100%;
		height: 700px;
		object-fit: cover;
	}
	/* Hover effect for prev/next buttons */

	.carousel-control.left {
		position: absolute;
		top: 0;
		left: 0;
		bottom: 0;
		width: 5%;
		text-align: center;
		opacity: 0.5;
		background: none;
		border: none;
	}

	.carousel-control.right {
		position: absolute;
		top: 0;
		right: 0;
		bottom: 0;
		width: 5%;
		opacity: 0.5;
		text-align: center;
		background: none;
		border: none;
	}

		.carousel-control.left:hover, .carousel-control.right:hover, .carousel-control.left:focus, .carousel-control.right:focus {
			background-image: -webkit-linear-gradient(left, rgba(0,0,0,0.5) 0, rgba(0,0,0,0.0001) 100%);
			background-image: -o-linear-gradient(left, rgba(0,0,0,0.5) 0, rgba(0,0,0,0.0001) 100%);
			background-image: -webkit-gradient(linear, left top, right top, color-stop(0, rgba(0,0,0,0.5)), to(rgba(0,0,0,0.0001)));
			background-image: linear-gradient(to right, rgba(0,0,0,0.5) 0, rgba(0,0,0,0.0001) 100%);
		}

	.movie-card {
		display: flex;
		flex-direction: column;
		height: 100%;
		position: relative;
		border: none;
		width: 200px;
		margin: 0 auto;
		overflow: hidden;
	}



		.movie-card img {
			width: 100%;
			border-radius: 10px;
		}



	.movie-info {
		text-align: left; /* Căn giữa thông tin phim */
		margin: 3px;
	}

		.movie-info h5 {
			font-size: 16px;
			font-weight: bold;
		}

		.movie-info p {
			margin: 0;
		}

	.sticker {
		position: absolute;
		top: 0;
		left: 0;
		width: 63px !important;
		height: 63px !important;
	}

	.sticker-new {
		background: url(https://betacinemas.vn/assets/frontend/layout/img/hot.png) no-repeat;
		left: auto;
		right: 0;
	}
	/* Style the tab */
	.tab {
		width: 100%;
		overflow: hidden;
		display: flex;
		justify-content: center;
		background: none;
	}

		/* Style the buttons that are used to open the tab content */
		.tab button {
			background: none;
			float: left;
			border: none;
			width: 300px;
			outline: none;
			cursor: pointer;
			padding: 14px 16px;
			transition: 0.3s;
			color: black;
			font-size: 25px;
			width: 300px;
			font-weight: bold;
			transition: transform 0.2s;
		}

			/* Change background color of buttons on hover */
			/* 	.tab button:hover {
		border-bottom: 2px solid blue;
		} */

			/* Create an active/current tablink class */
			.tab button.active {
				padding-top: 3px;
				color: rgb(56, 172, 239);
				border-bottom: 3px solid rgb(56, 172, 239);
			}


	.btn-mua-ve2 {
		margin-top: auto; /* Đẩy nút xuống dưới */
		text-align: center;
		border: none;
		background-color: rgb(19, 113, 180);
		border-radius: 4px !important;
		transition: transform 0.2s ease-in-out;
		color: #fff;
		font-weight: bold;
		font-size: large;
		text-transform: uppercase;
	}

		.btn-mua-ve2:hover {
			background-image: linear-gradient(to right, #0a64a7 0%, #258dcf 51%, #3db1f3 100%) !important;
			color: #fff;
		}

	.mr3 {
		font-size: 70px;
		position: absolute;
		left: -10px;
		opacity: 0.5;
		color: #fff;
	}

	.open-modal-btn {
		background-color: #007bff;
		color: white;
		padding: 10px 20px;
		border: none;
		border-radius: 5px;
		cursor: pointer;
		font-size: 16px;
	}

	/* Định dạng cho modal */
	.modal-buy {
		display: none; /* Ẩn modal mặc định */
		position: fixed;
		z-index: 99999;
		left: 0;
		top: 0;
		width: 100%;
		height: 100%;
		background-color: rgba(0, 0, 0, 0.5); /* Màu nền mờ */
		justify-content: center;
		align-items: center;
	}

	.modal-size {
		width: 85%;
		height: 800px;
		background-color: #fff;
	}
	/* Nội dung của modal */
	.modal-content-buy {
		background-color: #fff;
		padding: 20px;
		border-radius: 5px;
		position: relative;
	}

	.modal-body-showtime {
		height: 613px;
	}
	/* Nút đóng modal */
	.close-modal-btn {
		position: absolute;
		top: 10px;
		right: 15px;
		color: #333;
		font-size: 35px;
		font-weight: bold;
		cursor: pointer;
	}

</style>

<script>
	document.getElementById("defaultOpen").click();
	function openCity(evt, cityName) {
		// Declare all variables
		var i, tabcontent, tablinks;

		// Get all elements with class="tabcontent" and hide them
		tabcontent = document.getElementsByClassName("tabcontent");
		for (i = 0; i < tabcontent.length; i++) {
			tabcontent[i].style.display = "none";
		}

		// Get all elements with class="tablinks" and remove the class "active"
		tablinks = document.getElementsByClassName("tablinks");
		for (i = 0; i < tablinks.length; i++) {
			tablinks[i].className = tablinks[i].className.replace(" active", "");
		}

		// Show the current tab, and add an "active" class to the button that opened the tab
		document.getElementById(cityName).style.display = "block";
		evt.currentTarget.className += " active";
	}
	function openModalShowTime() {
		document.getElementById('myModalBuyTicket').style.display = 'flex';
	}

	// Đóng modal
	function closeModal() {
		document.getElementById('myModalBuyTicket').style.display = 'none';
		localStorage.removeItem('showtimeModalOpen');
		localStorage.removeItem('showtimeModalFilmId');
	}

	function openModal(modalId) {
		var modalElement = document.getElementById(modalId);
		var modal = new bootstrap.Modal(modalElement);
		modal.show();
	}
	function closeModall(modalId) {
		var modalElement = document.getElementById(modalId);
		var modal = bootstrap.Modal.getInstance(modalElement);
		if (modal) {
			modal.hide();
		}
	}
</script>

@code {
	private List<UserHomeDto> listObjFilm = new List<UserHomeDto>();
	private List<SeatDTO> lstSeats = new List<SeatDTO>();
	private List<SeatDTO> lstCheckedSeats = new List<SeatDTO>();
	private List<ComboRequest> lstSelectedCombos = new();
	private string IdFilm;
	private string filmName { get; set; }     
	private Guid ShowTimeId;
	public SeatSelectionModal seatSelectionModalref;
	public ComboSelectionModal comboSelectionModalref;
	public DiscountSelectionModal DiscountSelectionModalRef;
	private Guid BillId = Guid.Empty;
	private Guid AccountId = Guid.Empty;
	private SeatFooter seatFooterRef;
	private ComboFooter comboFooterRef;
	private DiscountFooter DiscountFooterRef;
	private string SeatsSelectedstr;
	private decimal TotalTicket;
	private decimal TotalCombo = 0;
	private decimal TotalMoney = 0;
	private decimal Discount;
	private ComboCheckRequest ComboCheckRequest;
	private bool isFirstRender = true;
	private List<BannerDTO> lstBanner = new();
	private int mempoint;
	private CancellationToken cancellationToken;
	private List<BillDto> billDtos = new();
	private bool OpenDiscount = false;

	public class EventCallbackHomeArgs
	{
		public Guid AccountId { get; set; }
		public List<SeatDTO> lstSeats { get; set; }
		public string str { get; set; }
		public decimal TotalMoney { get; set; }
		public decimal TotalTicket { get; set; }
		public decimal TotalCombo { get; set; }
		public decimal Discount { get; set; }
		public List<ComboDto>? lstCombo { get; set; }
		public Guid BillId { get; set; }
		public List<SeatDTO> lstCheckedSeat { get; set; }
		public List<ComboRequest> _lstCombo = new();
		public ComboCheckRequest ComboCheckRequest { get; set; }
		public bool NextToDiscount { get; set; }
	}

	protected async override Task OnInitializedAsync()
	{
		await DeletePendingBill();
		listObjFilm = await UserHomeService.GetAllFilmForUserHome();
		var banners = await BannerService.GetBannersAsync();
		if (banners != null)
		{
			lstBanner = banners.Where(b => b.Status == BannerStatus.Active).ToList();
		}
		var AuthenState = await AuthStateProvider.GetAuthenticationStateAsync();
		var getUserId = AuthenState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
		var userRole = AuthenState.User.FindFirst(ClaimTypes.Role)?.Value;
        if (userRole == "Staff")
        {
            NavigationManager.NavigateTo("/offline-counter");
		}
		base.OnInitialized();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			var showtimeModalOpen = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "showtimeModalOpen");
			var showtimeModalFilmId = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "showtimeModalFilmId");
			await JSRuntime.InvokeVoidAsync("localStorage.setItem", "page", "Home");
			if (showtimeModalOpen == "true" && !String.IsNullOrEmpty(showtimeModalFilmId))
			{
				await OpenModalShowTime(showtimeModalFilmId);
				StateHasChanged();
			}
		}
	}

	private async Task RedirectToLogin()
	{
		await JSRuntime.InvokeVoidAsync("closeModal");
		NavigationManager.NavigateTo("/");
		StateHasChanged();
		await JSRuntime.InvokeVoidAsync("openLoginModal");
	}

	private async Task DeletePendingBill()
	{
		var AuthenState = await AuthStateProvider.GetAuthenticationStateAsync();
		var getUserId = AuthenState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
		var userRole = AuthenState.User.FindFirst(ClaimTypes.Role)?.Value;
		if (getUserId != null && userRole == "User")
		{
			var userId = Guid.Parse(getUserId);
			if (userId != Guid.Empty)
			{
				billDtos = await BillService.GetListBillAsync();
				if (billDtos != null)
				{
					var bill = billDtos.FirstOrDefault(x => x.AccountId == userId && x.Status == BillStatus.Pending.ToString());
					if (bill != null)
					{
						await UserHomeService.DeleteCheckAsync(bill.Id, cancellationToken);
					}
				}
			}
		}
	}

	private async Task OpenModalShowTime(string id)
	{
		IdFilm = id;
		var listObj = await UserHomeService.GetAllFilmForUserHome();
		filmName = listObj.FirstOrDefault(x => x.Id == Guid.Parse(id)).Name;
		await JSRuntime.InvokeVoidAsync("localStorage.setItem", "showtimeModalOpen", "true");
		await JSRuntime.InvokeVoidAsync("localStorage.setItem", "showtimeModalFilmId", id);
		await Task.Delay(100);
		await JSRuntime.InvokeVoidAsync("openModalShowTime");
	}

	private async Task OpenSeatSelectionModal(Guid id)
	{
		//await DeletePendingBill();
		await seatSelectionModalref.Reset();
		ShowTimeId = id;
		await JSRuntime.InvokeVoidAsync("closeModal");
		await JSRuntime.InvokeVoidAsync("openModal", "SeatSelectionModal");
	}

	private void HandleSelectedSeats(EventCallbackHomeArgs args)
	{
		lstSeats = args.lstSeats;
		SeatsSelectedstr = args.str;
		TotalTicket = args.TotalTicket;
		TotalMoney = TotalTicket;
		StateHasChanged();
	}

	private async Task CloseSeatSelectionModal()
	{
		await seatSelectionModalref.Reset();
		await seatFooterRef.Reset();
		lstSeats.Clear();
		lstCheckedSeats.Clear();
		SeatsSelectedstr = "";
		BillId = Guid.Empty;
		TotalMoney = 0;
		await JSRuntime.InvokeVoidAsync("closeModall", "SeatSelectionModal"); //đóng seat selection modal
		filmName = listObjFilm.FirstOrDefault(x => x.Id == Guid.Parse(IdFilm)).Name;
		await JSRuntime.InvokeVoidAsync("openModalShowTime");
	}

	private async Task OpenComboSelectionModal(EventCallbackHomeArgs args)
	{
		await comboFooterRef.Reset();
        await comboSelectionModalref.Reset();
		await JSRuntime.InvokeVoidAsync("closeModall", "SeatSelectionModal");
		BillId = args.BillId;
		AccountId = args.AccountId;
		await JSRuntime.InvokeVoidAsync("openModal", "ComboSelectionModal");
	}

	private void HandleSelectedCombos(EventCallbackHomeArgs args)
	{
		lstSelectedCombos = args._lstCombo;
		TotalCombo = args.TotalCombo;
		TotalMoney = TotalCombo + TotalTicket;
		StateHasChanged();
	}

	private async Task PreComboSelectionModal(Guid id)
	{
		await seatSelectionModalref.Reset();
		await comboFooterRef.Reset();
		await seatFooterRef.Reset();
		await comboSelectionModalref.Reset();
		lstSeats.Clear();
		lstCheckedSeats.Clear();
		SeatsSelectedstr = "";
		BillId = Guid.Empty;
		TotalMoney = 0;
		TotalTicket = 0;
		ShowTimeId = id;
		await JSRuntime.InvokeVoidAsync("closeModall", "ComboSelectionModal");
		await JSRuntime.InvokeVoidAsync("openModal", "SeatSelectionModal");
	}

	private async Task CancelCheckout(Guid id)
	{
		await seatSelectionModalref.Reset();
		await seatFooterRef.Reset();
		await comboSelectionModalref.Reset();
        await comboFooterRef.Reset();
		lstSeats.Clear();
		lstCheckedSeats.Clear();
		SeatsSelectedstr = "";
		BillId = Guid.Empty;
		TotalMoney = 0;
		TotalTicket = 0;
		TotalCombo = 0;
		Discount = 0;
		ShowTimeId = id;
		AccountId = Guid.Empty;
		DiscountSelectionModalRef.StopTimer();
		await JSRuntime.InvokeVoidAsync("closeModall", "DiscountSelectionModal");
		await JSRuntime.InvokeVoidAsync("openModal", "SeatSelectionModal");
	}

	public async void ShowCloseConfirmation()
	{
		bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Xác nhận hủy đặt vé?");

		if (confirmed)
		{
			await CloseSeatSelectionModal();
		}
	}

	private async Task OpenDiscountModal(EventCallbackHomeArgs args)
	{
		AccountId = args.AccountId;
		OpenDiscount = args.NextToDiscount;
		await JSRuntime.InvokeVoidAsync("closeModall", "ComboSelectionModal");
		await JSRuntime.InvokeVoidAsync("openModal", "DiscountSelectionModal");
	}

	private async Task HandleMembershipPoint(int point)
	{
		mempoint = point;
		StateHasChanged();
	}

	private void HandleAppliedDisCount(EventCallbackHomeArgs args)
	{
		Discount = args.Discount;
		TotalMoney = TotalTicket + TotalCombo + Discount;
		StateHasChanged();
	}

	private async Task HandleTimerOutDiscount()
	{
		await JSRuntime.InvokeVoidAsync("alert", "Hết thời gian");
		await JSRuntime.InvokeVoidAsync("closeModall", "DiscountSelectionModal");
		NavigationManager.Refresh();
	}

	public async Task ResetSeatSelection()
	{
		await seatSelectionModalref.Reset();
		await seatFooterRef.Reset();
		lstSeats.Clear();
		lstCheckedSeats.Clear();
		SeatsSelectedstr = "";
		BillId = Guid.Empty;
		TotalMoney = 0;
        TotalTicket = 0;
	}
}