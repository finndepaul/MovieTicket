@using MovieTicket.Application.DataTransferObjs.ShowTime

<div class="container-fluid" style="max-height: 40%">
    <ul class="nav mb-3" style="">
        @if (dateRange != null)
        {
            @foreach (var item in dateRange)
            {
                <li class="date @(selectedDate == item ? "active" : "")" id="myButton">
                    <a class="nav-link" @onclick="() => GetDate(item)">
                        <span class="tab-number">@item.ToString("dd")</span>
                        <span class="month">/@item.ToString("MM")</span>
                        <span class="month"> - @ChangeDayOfWeek(item.DayOfWeek.ToString())</span>
                    </a>
                </li>
            }
        }
    </ul>
    <ul class="nav">
        @if (City != null)
        {
            @foreach (var item in City)
            {
                var isActive = (item == selectedCityName) ? "active" : "";
                <li class="sort-show-time @isActive" @onclick="()=>SelectedCityName(item)">
                    <p>@item</p>
                </li>
            }
        }
    </ul>
    <hr/>
    <ul class="nav mt-3">
        @if (ShowTimes.Any())
        {
            @foreach (var item in ShowTimeSort.Distinct(new ShowTimeComparer()))
            {
                var isActive = (item.ScreenTypeName == selectedScreenTypeSort && item.TranslationTypeName == selectedTranslationTypeSort) ? "active" : "";

                <li class="sort-show-time @isActive" @onclick="() => SelectedSort(item.ScreenTypeName, item.TranslationTypeName)" id="myButton1">
                    @item.ScreenTypeName - @item.TranslationTypeName
                </li>

            }
        }
    </ul>
</div>

<div class="px-3 scrollable" style="max-height: 40%">
    @if (ShowTimes.Any())
    {
        string previousCinemaCenter = null;
        string previousScreenType = null;

        foreach (var item in ShowTimes)
        {
            if (item.CinemaCenterName != previousCinemaCenter || item.ScreenTypeName != previousScreenType)
            {
                <hr />
                <div class="text-dark fs-3 mb-2">@item.CinemaCenterName</div>
                <div class="text-dark fs-5 mb-2">Rạp @item.ScreenTypeName</div>
                previousCinemaCenter = item.CinemaCenterName;
                previousScreenType = item.ScreenTypeName;
            }
            <button class="btn btn-outline-secondary me-2 my-2" @onclick="() => CheckLogged(item.Id,item.StartTime.Value)">
                @item.StartTime.Value.ToString("HH:mm")
            </button>
        }
    }
    else
    {
        <div class="">Xin lỗi, không có suất chiếu vào ngày này, hãy chọn một ngày khác.</div>
    }
</div>

<style>
    .sort-show-time.active {
    background-color: #0056b3;
    color: white;
    }

    .sort-show-time {
    background-color: white;
    color: black;
    border: 1px solid #0056b3;
    border-radius: 5px;
    padding: 5px 10px;
    margin-right: 5px;
    cursor: pointer;
    }

    .date.active {
    border-bottom: 3px solid #0056b3;
    }

    .date.active a {
    color: #0056b3;
    }

    .date a {
    color: black;
    }

    .date {
    border-bottom: 1px solid rgb(199, 200, 201);
    transition: background-color 0.3s ease, color 0.3s ease;
    }

    .date:hover {
    background-color: #f8f9fa;
    cursor: pointer;
    }

    .nav-tabs .nav-link {
    font-size: 24px;
    font-weight: bold;
    }

    .tab-number {
    font-size: 40px;
    }

    .scrollable {
    max-height: 100%;
    accent-color: rgb(56, 172, 239);
    overflow-y: scroll;
    }
</style>

@code {
    [Parameter] public string Id { get; set; }
    [Parameter] public EventCallback<Guid> OnShowtimeSelected { get; set; }
    [Parameter] public EventCallback LoginCallback { get; set; }
    private AuthenticationState AuthenState;
    private List<DateTime> dateRange = new List<DateTime>();
    private DateTime selectedDate = DateTime.Today;
    private List<ShowTimeDto> ShowTimes = new List<ShowTimeDto>();
    private PagingParameters PagingParameters = new PagingParameters();
    private List<ShowTimeDto> ShowTimeSort = new List<ShowTimeDto>();
    public MetaData MetaData { get; set; } = new MetaData();
    private string selectedScreenTypeSort;
    private string selectedTranslationTypeSort;
    private string selectedCityName = "Hà Nội";
    private List<string> City = new();
    private Guid ShowTimeId;
    private string UserRole = null;
    private DateTime dateCheck = DateTime.Today;
    protected async override Task OnParametersSetAsync()
    {
        if (!String.IsNullOrEmpty(Id))
        {
            var lstObjScheduel = await ScheduelService.GetAllAsync();
            var film = lstObjScheduel.FirstOrDefault(x => x.FilmId == Guid.Parse(Id));

            if (film != null)
            {
                dateRange = GetDatesInRange(DateTime.Now, DateTime.Now.AddDays(14));
            }
            await LoadShowTimesAsync();
            // Set the first item's ScreenType and TranslationType as active by default
            if (ShowTimeSort.Any())
            {
                var firstItem = ShowTimeSort.Distinct(new ShowTimeComparer()).First();
                selectedScreenTypeSort = firstItem.ScreenTypeName;
                selectedTranslationTypeSort = firstItem.TranslationTypeName;
            }
        }
    }

    private async Task LoadShowTimesAsync()
    {
        var paginationResponse = await ShowTimeService.GetAll(new ShowTimeSearch() { ShowtimeDate = selectedDate }, new PagingParameters() { PageSize = 30 });
        var cinemaCenter = await CinemaCenterService.GetCinemaCentersAsync(new CinemaCenterSearch());
        City = cinemaCenter.Select(x => x.AddresCity).Distinct().ToList();
        ShowTimeSort = paginationResponse.Item
            .Where(x => x.FilmId == Guid.Parse(Id) && x.StartTime.Value > DateTime.Now)
            .GroupBy(x => new { x.CinemaCenterName, x.ScreenTypeName })
            .SelectMany(x => x)
            .OrderBy(x => x.ScreenTypeName)
            .ToList();
     
        if (!String.IsNullOrEmpty(selectedCityName))
        {
            ShowTimes = ShowTimeSort.Where(x => x.City == selectedCityName).ToList();
            if (ShowTimes.Count != 0)
            {
                if (!String.IsNullOrEmpty(selectedScreenTypeSort))
                {
                    ShowTimes = ShowTimeSort.Where(x => x.ScreenTypeName == selectedScreenTypeSort && x.TranslationTypeName == selectedTranslationTypeSort).ToList();
                }
                else
                {
                    ShowTimes = ShowTimeSort.Where(x => x.ScreenTypeName == ShowTimeSort[0].ScreenTypeName && x.TranslationTypeName == ShowTimeSort[0].TranslationTypeName).ToList();
                }
            }
            else
            {
                ShowTimes = new List<ShowTimeDto>();
            }

        }
        MetaData = paginationResponse.MetaData;
        AuthenState = await AuthStateProvider.GetAuthenticationStateAsync();
        UserRole = AuthenState.User.FindFirst(ClaimTypes.Role)?.Value;
    }

    private async Task CheckLogged(Guid showtimeId,DateTime startTime)
    {
        if (UserRole=="User")
        {
            if (DateTime.Now.AddMinutes(15) >= startTime)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Lịch chiếu sẽ bắt đầu ngay sau đây, hãy đặt vé tại địa điểm bạn muốn xem phim.");
            }
            else
            {
                await OpenSeatSelection(showtimeId);
            }
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Bạn cần đăng nhập để chọn ghế");
            await LoginCallback.InvokeAsync();
        }
    }
    private async Task SelectedCityName(string city)
    {
        selectedCityName = city;
        await LoadShowTimesAsync();
    }
    private async Task GetDate(DateTime date)
	{
		selectedScreenTypeSort = null;
		selectedTranslationTypeSort = null;
		selectedDate = date;
		await LoadShowTimesAsync();
		if (ShowTimeSort.Any())
		{
			var firstItem = ShowTimeSort.Distinct(new ShowTimeComparer()).First();
			selectedScreenTypeSort = firstItem.ScreenTypeName;
			selectedTranslationTypeSort = firstItem.TranslationTypeName;
		}
	}

	private List<DateTime> GetDatesInRange(DateTime start, DateTime end)
	{
		return Enumerable.Range(0, (end.Date - start.Date).Days + 1)
							.Select(day => start.Date.AddDays(day))
							.ToList();
	}

	private async Task SelectedSort(string screenType, string translationType)
	{
		selectedScreenTypeSort = screenType;
		selectedTranslationTypeSort = translationType;
		await LoadShowTimesAsync();
	}

	private async Task OpenSeatSelection(Guid id)
	{
		ShowTimeId = id;
		await OnShowtimeSelected.InvokeAsync(ShowTimeId);
	}
	private string ChangeDayOfWeek(string day)
	{
		string result = "";
		switch (day)
		{
			case "Monday":
				result = "T2";
				break;
			case "Tuesday":
				result = "T3";
				break;
			case "Wednesday":
				result = "T4";
				break;
			case "Thursday":
				result = "T5";
				break;
			case "Friday":
				result = "T6";
				break;
			case "Saturday":
				result = "T7";
				break;
			case "Sunday":
				result = "CN";
				break;
		}
		return result;
	} 
	// Custom equality comparer to be used with Distinct for ShowTimeDto
	public class ShowTimeComparer : IEqualityComparer<ShowTimeDto>
	{
		public bool Equals(ShowTimeDto x, ShowTimeDto y) =>
			x.ScreenTypeName == y.ScreenTypeName && x.TranslationTypeName == y.TranslationTypeName;

		public int GetHashCode(ShowTimeDto obj) =>
			HashCode.Combine(obj.ScreenTypeName, obj.TranslationTypeName);
	}
}
