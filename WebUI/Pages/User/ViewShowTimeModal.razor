@using MovieTicket.Application.DataTransferObjs.ShowTime

<div class="container-fluid" style="max-height: 40%">
	<div class="date-navigation">
		<button class="nav-btn" @onclick="PreviousPage" disabled="@(PageIndex == 0)"> &lt; </button>
		<div class="dates" style="flex-wrap: wrap">
			@foreach (var date in VisibleDates)
			{
				<div class="d-flex date-item @(selectedDate == date ? "active" : "")" id="myButton"
					 @onclick="() => GetDate(date)">
					<div class="d-flex align-items-center me-2">
						<span class="tab-number">@date.ToString("dd")</span>
					</div>
					<div class="">
						<span class="month">@date.ToString("MM")</span>
						<hr/>
						<span class="month">@ChangeDayOfWeek(date.DayOfWeek.ToString())</span>
					</div>

				</div>
			}
		</div>
		<button class="nav-btn" @onclick="NextPage" disabled="@(PageIndex == TotalPages - 1)"> > </button>
	</div>
	@*  <ul class="nav mb-3" style="">
	@if (dateRange != null)
	{
	@foreach (var item in dateRange)
	{
	<li class="date @(selectedDate == item ? "active" : "")" id="myButton">
	<a class="nav-link" @onclick="() => GetDate(item)">
	<span class="tab-number">@item.ToString("dd")</span>
	<span class="month">/@item.ToString("MM")</span>
	<span class="month"> - @ChangeDayOfWeek(item.DayOfWeek.ToString())</span>
	</a>
	</li>
	}
	}
	</ul> *@
	<ul class="nav">
		@if (City != null)
		{
			@foreach (var item in City)
			{
				var isActive = (item == selectedCityName) ? "active" : "";
				<li class="sort-city p-2 @isActive" style="" @onclick="()=>SelectedCityName(item)">
					<p class="m-0">@item</p>
				</li>
			}
		}
	</ul>
	<hr />
	<ul class="nav mt-3">
		@if (ShowTimes.Any())
		{
			@foreach (var item in ShowTimeSort.Distinct(new ShowTimeComparer()))
			{
				var isActive = (item.ScreenTypeName == selectedScreenTypeSort && item.TranslationTypeName == selectedTranslationTypeSort) ? "active" : "";

				<li class="sort-show-time p-2 @isActive" @onclick="() => SelectedSort(item.ScreenTypeName, item.TranslationTypeName)" id="myButton1">
					@item.ScreenTypeName - @item.TranslationTypeName
				</li>

			}
		}
	</ul>
</div>

<div class="px-3" style="height: 450px; overflow-y: auto">
	@if (ShowTimes.Any())
	{
		string previousCinemaCenter = null;
		string previousScreenType = null;

		foreach (var item in ShowTimes)
		{
			if (item.CinemaCenterName != previousCinemaCenter || item.ScreenTypeName != previousScreenType)
			{
				<hr />
				<div class="text-dark fs-3 mb-2">@item.CinemaCenterName</div>
				<div class="text-dark fs-5 mb-2">Rạp @item.ScreenTypeName</div>
				previousCinemaCenter = item.CinemaCenterName;
				previousScreenType = item.ScreenTypeName;
			}
			<button class="btn btn-outline-secondary me-2 my-2" @onclick="() => CheckLogged(item.Id,item.StartTime.Value)">
				@item.StartTime.Value.ToString("HH:mm")
			</button>
		}
	}
	else
	{
		<div class="">Xin lỗi, không có suất chiếu vào ngày này, hãy chọn một ngày khác.</div>
	}
</div>

<style>
	/* Phần lịch chiếu */
	.schedule-container {
		width: 80%;
		margin: 20px auto;
		border-top: 2px solid black;
		padding-top: 20px;
	}

	.date-navigation {
		display: flex;
		justify-content: center;
		align-items: center;
		margin-bottom: 20px;
	}

	.nav-btn {
		background-color: black;
		color: white;
		border: none;
		padding: 10px 15px;
		font-size: 16px;
		cursor: pointer;
		border-radius: 5px;
		transition: background-color 0.3s ease;
	}

		.nav-btn:disabled {
			opacity: 0.5;
			cursor: not-allowed;
		}

	.dates {
		display: flex;
		justify-content: center;
		gap: 10px;
		margin: 0 15px;
	}

	.date-item {
		padding: 10px 15px;
		border: 1px solid #ccc;
		background-color: white;
		border-radius: 5px;
		text-align: center;
		cursor: pointer;
		color: #555;
		transition: background-color 0.3s ease, font-weight 0.3s ease;
	}

		.date-item:hover {
			background-color: #ccc;
			font-weight: bold;
		}

		.date-item.active {
			background-color: #444;
			color: white;
			font-weight: bold;
		}

	.sort-show-time.active {
		background-color: #0056b3;
		color: white;
	}

	.sort-show-time {
		background-color: white;
		color: black;
		border: 1px solid #0056b3;
		border-radius: 5px;
		padding: 5px 10px;
		margin-right: 5px;
		cursor: pointer;
	}

	.sort-city.active {
		background-color: #0056b3;
		color: white;
	}

	.sort-city {
		background-color: white;
		color: black;
		border: 1px solid #0056b3;
		border-radius: 5px;
		padding: 5px;
		margin-right: 5px;
		cursor: pointer;
	}

	.date.active {
		border-bottom: 3px solid #0056b3;
	}

		.date.active a {
			color: #0056b3;
		}

	.date a {
		color: black;
	}

	.date {
		border-bottom: 1px solid rgb(199, 200, 201);
		transition: background-color 0.3s ease, color 0.3s ease;
	}

		.date:hover {
			background-color: #f8f9fa;
			cursor: pointer;
		}

	.nav-tabs .nav-link {
		font-size: 24px;
		font-weight: bold;
	}

	.tab-number {
		font-size: 40px;
	}

	.scrollable {
		max-height: 100%;
		accent-color: rgb(56, 172, 239);
		overflow-y: scroll;
	}
</style>

@code {
	[Parameter] public string Id { get; set; }
	[Parameter] public EventCallback<Guid> OnShowtimeSelected { get; set; }
	[Parameter] public EventCallback LoginCallback { get; set; }
	private AuthenticationState AuthenState;
	private List<DateTime> dateRange = new List<DateTime>();
	private DateTime selectedDate = DateTime.Today;
	private List<ShowTimeDto> ShowTimes = new List<ShowTimeDto>();
	private PagingParameters PagingParameters = new PagingParameters();
	private List<ShowTimeDto> ShowTimeSort = new List<ShowTimeDto>();
	public MetaData MetaData { get; set; } = new MetaData();
	private string selectedScreenTypeSort;
	private string selectedTranslationTypeSort;
	private string selectedCityName = "Hà Nội";
	private List<string> City = new();
	private Guid ShowTimeId;
	private string UserRole = null;
	private DateTime dateCheck = DateTime.Today;
	private List<DateTime> Dates = new();
	private List<DateTime> VisibleDates => Dates.Skip(PageIndex * ItemsPerPage).Take(ItemsPerPage).ToList();
	private int PageIndex = 0;
	private int ItemsPerPage = 12;
	private int TotalPages => (int)Math.Ceiling((double)Dates.Count / ItemsPerPage);
	protected async override Task OnParametersSetAsync()
	{
		if (!String.IsNullOrEmpty(Id))
		{
			Dates = Enumerable.Range(0, 24).Select(offset => DateTime.Today.AddDays(offset)).ToList();
			var lstObjScheduel = await ScheduelService.GetAllAsync();
			var film = lstObjScheduel.FirstOrDefault(x => x.FilmId == Guid.Parse(Id));

			if (film != null)
			{
				dateRange = GetDatesInRange(DateTime.Now, DateTime.Now.AddDays(14));
			}
			await LoadShowTimesAsync();
			// Set the first item's ScreenType and TranslationType as active by default
			if (ShowTimeSort.Any())
			{
				var firstItem = ShowTimeSort.Distinct(new ShowTimeComparer()).First();
				selectedScreenTypeSort = firstItem.ScreenTypeName;
				selectedTranslationTypeSort = firstItem.TranslationTypeName;
			}
		}
	}

	private async Task LoadShowTimesAsync()
	{
		var paginationResponse = await ShowTimeService.GetAll(new ShowTimeSearch() { ShowtimeDate = selectedDate }, new PagingParameters() { PageSize = 30 });
		var cinemaCenter = await CinemaCenterService.GetCinemaCentersAsync(new CinemaCenterSearch());
		City = cinemaCenter.Select(x => x.AddresCity).Distinct().ToList();
		ShowTimeSort = paginationResponse.Item
			.Where(x => x.FilmId == Guid.Parse(Id) && x.City == selectedCityName && x.StartTime.Value > DateTime.Now)
			.GroupBy(x => new { x.CinemaCenterName, x.ScreenTypeName })
			.SelectMany(x => x)
			.OrderBy(x => x.ScreenTypeName)
			.ToList();

		if (!String.IsNullOrEmpty(selectedCityName))
		{
			ShowTimes = ShowTimeSort.Where(x => x.City == selectedCityName).ToList();
			if (ShowTimes.Count != 0)
			{
				if (!String.IsNullOrEmpty(selectedScreenTypeSort))
				{
					ShowTimes = ShowTimeSort.Where(x => x.ScreenTypeName == selectedScreenTypeSort && x.TranslationTypeName == selectedTranslationTypeSort).ToList();
				}
				else
				{
					ShowTimes = ShowTimeSort.Where(x => x.ScreenTypeName == ShowTimeSort[0].ScreenTypeName && x.TranslationTypeName == ShowTimeSort[0].TranslationTypeName).ToList();
				}
			}
			else
			{
				ShowTimes = new List<ShowTimeDto>();
			}

		}
		MetaData = paginationResponse.MetaData;
		AuthenState = await AuthStateProvider.GetAuthenticationStateAsync();
		UserRole = AuthenState.User.FindFirst(ClaimTypes.Role)?.Value;
	}

	private async Task CheckLogged(Guid showtimeId, DateTime startTime)
	{
		if (UserRole == "User")
		{
			if (DateTime.Now.AddMinutes(15) >= startTime)
			{
				await JSRuntime.InvokeVoidAsync("alert", "Lịch chiếu sẽ bắt đầu ngay sau đây, hãy đặt vé tại địa điểm bạn muốn xem phim.");
			}
			else
			{
				await OpenSeatSelection(showtimeId);
			}
		}
		else
		{
			await JSRuntime.InvokeVoidAsync("alert", "Bạn cần đăng nhập để chọn ghế");
			await LoginCallback.InvokeAsync();
		}
	}
	private async Task SelectedCityName(string city)
	{
		selectedCityName = city;
		selectedScreenTypeSort = null;
		selectedTranslationTypeSort = null;
		await LoadShowTimesAsync();
		if (ShowTimeSort.Any())
		{
			var firstItem = ShowTimeSort.Distinct(new ShowTimeComparer()).First();
			selectedScreenTypeSort = firstItem.ScreenTypeName;
			selectedTranslationTypeSort = firstItem.TranslationTypeName;
		}
	}
	private async Task GetDate(DateTime date)
	{
		selectedScreenTypeSort = null;
		selectedTranslationTypeSort = null;
		selectedDate = date;
		await LoadShowTimesAsync();
		if (ShowTimeSort.Any())
		{
			var firstItem = ShowTimeSort.Distinct(new ShowTimeComparer()).First();
			selectedScreenTypeSort = firstItem.ScreenTypeName;
			selectedTranslationTypeSort = firstItem.TranslationTypeName;
		}
	}

	private List<DateTime> GetDatesInRange(DateTime start, DateTime end)
	{
		return Enumerable.Range(0, (end.Date - start.Date).Days + 1)
							.Select(day => start.Date.AddDays(day))
							.ToList();
	}

	private async Task SelectedSort(string screenType, string translationType)
	{
		selectedScreenTypeSort = screenType;
		selectedTranslationTypeSort = translationType;
		await LoadShowTimesAsync();
	}

	private async Task OpenSeatSelection(Guid id)
	{
		ShowTimeId = id;
		await OnShowtimeSelected.InvokeAsync(ShowTimeId);
	}
	private string ChangeDayOfWeek(string day)
	{
		string result = "";
		switch (day)
		{
			case "Monday":
				result = "Mon";
				break;
			case "Tuesday":
				result = "Tue";
				break;
			case "Wednesday":
				result = "Wed";
				break;
			case "Thursday":
				result = "Thu";
				break;
			case "Friday":
				result = "Fri";
				break;
			case "Saturday":
				result = "Sat";
				break;
			case "Sunday":
				result = "Sun";
				break;
		}
		return result;
	}
	// Custom equality comparer to be used with Distinct for ShowTimeDto
	public class ShowTimeComparer : IEqualityComparer<ShowTimeDto>
	{
		public bool Equals(ShowTimeDto x, ShowTimeDto y) =>
			x.ScreenTypeName == y.ScreenTypeName && x.TranslationTypeName == y.TranslationTypeName;

		public int GetHashCode(ShowTimeDto obj) =>
			HashCode.Combine(obj.ScreenTypeName, obj.TranslationTypeName);
	}
	private void PreviousPage()
	{
		if (PageIndex > 0)
		{
			PageIndex--;
		}
	}

	private void NextPage()
	{
		if (PageIndex < TotalPages - 1)
		{
			PageIndex++;
		}
	}
}
