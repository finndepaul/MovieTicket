@page "/film-user"
@using static WebUI.Pages.Home
@layout UserLayout

<div class="container">
	<div class="tab my-5 d-flex justify-content-center border-bottom">
		<button class="tablinks" onclick="openCity(event, 'SapChieu')">PHIM SẮP CHIẾU</button>
		<button class="tablinks" onclick="openCity(event, 'DangChieu')" id="defaultOpen">PHIM ĐANG CHIẾU</button>
		<button class="tablinks" onclick="openCity(event, 'Dacbiet')">SUẤT CHIẾU ĐẶC BIỆT</button>
	</div>
	<div class="m-5">
		<!-- Tab content -->
		<div id="SapChieu" class="tabcontent">
			<div class="row">
				@if (listObjFilm == null)
				{
					<p>Chưa có phim</p>
				}
				else
				{
					<!-- Movie 1 -->
					@foreach (var item in listObjFilm)
					{
						@if (item.SType == ScheduleType.Early)
						{
							var rating = "c" + "-" + item.Rating.Value.ToString() + ".png";
							<div class="col-lg-3 mb-5">
								<div class="movie-card">
									<img src="@item.Poster" alt="Movie Poster" class="object-fit-fill" style="height: 316px">
									<span style="position: absolute; top: 10px; left: 10px;"><img src="./img/icons/@rating" /></span>
									<span class="sticker sticker-new"></span>

									<div class="movie-info">
										<h5 class="text-primary">@item.Name</h5>
										<p><strong class="me-2">Thể loại:</strong>@item.Gerne</p>
										<p><strong class="me-2">Thời lượng:</strong>@item.RunningTime</p>
										<p><strong>Ngày khởi chiếu:</strong> @item.StartDate.Value.ToString("dd-MM-yyyy")</p>
									</div>

								</div>
							</div>
						}
					}
				}



			</div>
		</div>

		<div id="DangChieu" class="tabcontent">
			<div class="row">
				<!-- Movie 1 -->
				@if (listObjFilm == null)
				{
					<p>Chưa có phim</p>
				}
				else
				{
					@foreach (var item in listObjFilm)
					{
						@if (item.SType == ScheduleType.Regular)
						{
							var rating = "c" + "-" + item.Rating.Value.ToString() + ".png";
							<div class="col-lg-3 mb-5">
								<div class="movie-card">
									<img src="@item.Poster" alt="Movie Poster" class="object-fit-fill" style="height: 316px">
									<span style="position: absolute; top: 10px; left: 10px;"><img src="./img/icons/@rating" /></span>
									<span class="sticker sticker-new"></span>

									<div class="movie-info">
										<h5 class="text-primary">@item.Name</h5>
										<p><strong class="me-2">Thể loại:</strong>@item.Gerne</p>
										<p><strong class="me-2">Thời lượng:</strong>@item.RunningTime</p>
									</div>
									<a style="display: block;" @onclick="() => OpenModalShowTime(item.Id.ToString())" class="btn btn-2 btn-mua-ve2 fancybox-fast-view">
										<span><i class="bi bi-ticket-perforated"></i></span>
										MUA VÉ
									</a>
								</div>
							</div>
						}
					}
				}

			</div>
		</div>

		<div id="Dacbiet" class="tabcontent">
			<div class="row">
				@if (listObjFilm == null)
				{
					<p>Chưa có phim</p>
				}
				else
				{
					@foreach (var item in listObjFilm)
					{
						@if (item.SType == ScheduleType.Special)
						{
							var rating = "c" + "-" + item.Rating.Value.ToString() + ".png";
							<div class="col-lg-3 mb-5">
								<div class="movie-card">
									<img src="@item.Poster" alt="Movie Poster" class="object-fit-fill" style="height: 316px">
									<span style="position: absolute; top: 10px; left: 10px;"><img src="./img/icons/@rating" /></span>
									<span class="sticker sticker-new"></span>

									<div class="movie-info">
										<h5 class="text-primary">@item.Name</h5>
										<p><strong class="me-2">Thể loại:</strong>@item.Gerne</p>
										<p><strong class="me-2">Thời lượng:</strong>@item.RunningTime</p>
									</div>
									<a style="display: block;" @onclick="() => OpenModalShowTime(item.Id.ToString())" class="btn btn-2 btn-mua-ve2 fancybox-fast-view">
										<span><i class="bi bi-ticket-perforated"></i></span>
										MUA VÉ
									</a>
								</div>
							</div>
						}
					}
				}
			</div>
		</div>
	</div>

</div>
<div id="myModalBuyTicket" class="modal-buy">
	<div class="modal-size">
		<div class="modal-content-buy d-flex justify-content-between border-bottom ">
			<span class="close-modal-btn" onclick="closeModal()">&times;</span>
			<h5>LỊCH CHIẾU - @filmName</h5>
		</div>
		<div class="modal-body">
			<ViewShowTimeModal
				OnShowtimeSelected="OpenSeatSelectionModal" 
				Id="@IdFilm" 
				LoginCallback="RedirectToLogin" />
		</div>
	</div>
</div>
<!--Modal chọn ghế -->
<div class="modal fade" id="SeatSelectionModal" tabindex="-1" data-bs-backdrop="static" aria-hidden="true">
	<div class="modal-dialog modal-fullscreen modal-dialog-scrollable">
		<div class="modal-content">
			<div class="modal-header" data-bs-theme="dark">
				<h4 class="modal-title text-center">Chọn ghế</h4>
				<button type="button" class="btn-close" @onclick="() => ShowCloseConfirmation()" aria-label="Close"></button>
			</div>
			<div class="modal-body" style="background-color: #fdfcf0">
				<SeatSelectionModal @ref="seatSelectionModalref" ShowtimeId="@ShowTimeId" OnSeatSelection="HandleSelectedSeats" />
			</div>
			<div class="modal-footer" style="width:100%;height:150px; background-color:#031529;color:#fff">
				<SeatFooter ShowtimeId="@ShowTimeId"
				SeatDTOs="lstSeats"
				@ref="seatFooterRef"
				SeatsSelectedstr="@SeatsSelectedstr"
				TotalTicket="@TotalTicket"
				NextToComboModal="OpenComboSelectionModal"
				BackToShowtimeModal="ShowCloseConfirmation" />
			</div>
		</div>
	</div>
</div>
<!--Modal combo -->
<div class="modal fade" id="ComboSelectionModal" tabindex="-1" data-bs-backdrop="static" aria-hidden="true">
	<div class="modal-dialog modal-fullscreen modal-dialog-scrollable">
		<div class="modal-content">
			<div class="modal-header" data-bs-theme="dark">
				<h4 class="modal-title">Chọn Combo</h4>
			</div>
			<div class="modal-body">
				<ComboSelectionModal @ref="comboSelectionModalref" BillId="@BillId" OnComboSelection="HandleSelectedCombos" />
			</div>
			<div class="modal-footer" style="width:100%;height:150px">
				<ComboFooter ShowtimeId="@ShowTimeId"
				CheckedSeats="lstCheckedSeats"
				SelectedCombos="lstSelectedCombos"
				BillId="@BillId" @ref="comboFooterRef"
				SeatsSelectedstr="@SeatsSelectedstr"
				TotalCombo="@TotalCombo"
				TotalMoney="@TotalMoney"
				TotalTicket="@TotalTicket"
				BackToSeatModal="PreComboSelectionModal"/>
			</div>
		</div>
	</div>
</div>
<!--Modal Discount-->
<div class="modal fade" id="DiscountSelectionModal" tabindex="-1" data-bs-backdrop="static" aria-hidden="true">
	<div class="modal-dialog modal-fullscreen modal-dialog-scrollable">
		<div class="modal-content">
			<div class="modal-header" data-bs-theme="dark">
				<h4 class="modal-title">Thanh toán</h4>
			</div>
			<div class="modal-body">
				<DiscountSelectionModal />
			</div>
			<div class="modal-footer" style="width:100%;height:150px">
				<DiscountFooter ShowtimeId="@ShowTimeId"
				CheckedSeats="lstCheckedSeats"
				SeatsSelectedstr="@SeatsSelectedstr"
				TotalCombo="@TotalCombo"
				TotalMoney="@TotalMoney"
				TotalTicket="@TotalTicket"
				BillCombo="ComboCheckRequest"
				BackToSeat="CancelCheckout" />
			</div>
		</div>
	</div>
</div>
<style>
	.carousel-item img {
		width: 100%;
		height: 700px;
		object-fit: cover;
	}
	/* Hover effect for prev/next buttons */

	.carousel-control.left {
		position: absolute;
		top: 0;
		left: 0;
		bottom: 0;
		width: 5%;
		text-align: center;
		opacity: 0.5;
		background: none;
		border: none;
	}

	.carousel-control.right {
		position: absolute;
		top: 0;
		right: 0;
		bottom: 0;
		width: 5%;
		opacity: 0.5;
		text-align: center;
		background: none;
		border: none;
	}

		.carousel-control.left:hover, .carousel-control.right:hover, .carousel-control.left:focus, .carousel-control.right:focus {
			background-image: -webkit-linear-gradient(left, rgba(0,0,0,0.5) 0, rgba(0,0,0,0.0001) 100%);
			background-image: -o-linear-gradient(left, rgba(0,0,0,0.5) 0, rgba(0,0,0,0.0001) 100%);
			background-image: -webkit-gradient(linear, left top, right top, color-stop(0, rgba(0,0,0,0.5)), to(rgba(0,0,0,0.0001)));
			background-image: linear-gradient(to right, rgba(0,0,0,0.5) 0, rgba(0,0,0,0.0001) 100%);
		}

	.movie-card {
		position: relative;
		margin: 0 auto; /* Căn giữa phần tử */
		width: 200px;
		text-align: center; /* Căn giữa nội dung bên trong */
	}



		.movie-card img {
			width: 100%;
			border-radius: 10px;
		}



	.movie-info {
		text-align: left; /* Căn giữa thông tin phim */
		margin: 3px;
	}

		.movie-info h5 {
			font-size: 16px;
			font-weight: bold;
		}

		.movie-info p {
			margin: 0;
		}

	.sticker {
		position: absolute;
		top: 0;
		left: 0;
		width: 63px !important;
		height: 63px !important;
	}

	.sticker-new {
		background: url(https://betacinemas.vn/assets/frontend/layout/img/hot.png) no-repeat;
		left: auto;
		right: 0;
	}
	/* Style the tab */
	.tab {
		width: 100%;
		overflow: hidden;
		display: flex;
		justify-content: center;
		background: none;
	}

		/* Style the buttons that are used to open the tab content */
		.tab button {
			background: none;
			float: left;
			border: none;
			width: 300px;
			outline: none;
			cursor: pointer;
			padding: 14px 16px;
			transition: 0.3s;
			color: black;
			font-size: 25px;
			width: 300px;
			font-weight: bold;
			transition: transform 0.2s;
		}

			/* Change background color of buttons on hover */
			/* 	.tab button:hover {
		border-bottom: 2px solid blue;
		} */

			/* Create an active/current tablink class */
			.tab button.active {
				padding-top: 3px;
				color: rgb(56, 172, 239);
				border-bottom: 3px solid rgb(56, 172, 239);
			}

	.btn-mua-ve2 {
		/*padding: 10px 70px;*/
		position: relative;
		font-size: large;
		border: none;
		font-weight: bold;
		color: #fff;
		background-color: rgb(19, 113, 180);
		border-radius: 4px !important;
		transition: transform 0.2s ease-in-out;
	}

		.btn-mua-ve2:hover {
			background-image: linear-gradient(to right, #0a64a7 0%, #258dcf 51%, #3db1f3 100%) !important;
			color: #fff;
		}

	.mr3 {
		font-size: 70px;
		position: absolute;
		left: -10px;
		opacity: 0.5;
		color: #fff;
	}

	.open-modal-btn {
		background-color: #007bff;
		color: white;
		padding: 10px 20px;
		border: none;
		border-radius: 5px;
		cursor: pointer;
		font-size: 16px;
	}

	/* Định dạng cho modal */
	.modal-buy {
		display: none; /* Ẩn modal mặc định */
		position: fixed;
		z-index: 99999;
		left: 0;
		top: 0;
		width: 100%;
		height: 100%;
		background-color: rgba(0, 0, 0, 0.5); /* Màu nền mờ */
		justify-content: center;
		align-items: center;
	}

	.modal-size {
		width: 85%;
		height: 80vh;
		background-color: #fff;
	}
	/* Nội dung của modal */
	.modal-content-buy {
		background-color: #fff;
		padding: 20px;
		border-radius: 5px;
		position: relative;
	}

	.modal-body-showtime {
		height: 613px;
	}
	/* Nút đóng modal */
	.close-modal-btn {
		position: absolute;
		top: 10px;
		right: 15px;
		color: #333;
		font-size: 35px;
		font-weight: bold;
		cursor: pointer;
	}

</style>

<script>
	document.getElementById("defaultOpen").click();
	function openCity(evt, cityName) {
	// Declare all variables
	var i, tabcontent, tablinks;

	// Get all elements with class="tabcontent" and hide them
	tabcontent = document.getElementsByClassName("tabcontent");
	for (i = 0; i < tabcontent.length; i++) {
	tabcontent[i].style.display = "none";
	}

	// Get all elements with class="tablinks" and remove the class "active"
	tablinks = document.getElementsByClassName("tablinks");
	for (i = 0; i < tablinks.length; i++) {
	tablinks[i].className = tablinks[i].className.replace(" active", "");
	}

	// Show the current tab, and add an "active" class to the button that opened the tab
	document.getElementById(cityName).style.display = "block";
	evt.currentTarget.className += " active";
	}
	function openModalShowTime() {
	document.getElementById('myModalBuyTicket').style.display = 'flex';
	}

	// Đóng modal
	function closeModal() {
	document.getElementById('myModalBuyTicket').style.display = 'none';
	localStorage.removeItem('showtimeModalOpen');
	localStorage.removeItem('showtimeModalFilmId');
	}

	function openModal(modalId) {
	var modalElement = document.getElementById(modalId);
	var modal = new bootstrap.Modal(modalElement);
	modal.show();
	}
	function closeModall(modalId) {
	var modalElement = document.getElementById(modalId);
	var modal = bootstrap.Modal.getInstance(modalElement);
	if (modal) {
	modal.hide();
	}
	}
</script>

@code {
	private List<UserHomeDto> listObjFilm = new List<UserHomeDto>();
	private List<SeatDTO> lstSeats = new List<SeatDTO>();
	private List<SeatDTO> lstCheckedSeats = new List<SeatDTO>();
	private List<ComboRequest> lstSelectedCombos = new();
	private string IdFilm;
	private string filmName { get; set; }
	private Guid ShowTimeId;
	public SeatSelectionModal seatSelectionModalref;
	public ComboSelectionModal comboSelectionModalref;
	private Guid BillId = Guid.Empty;
	private SeatFooter seatFooterRef;
	private ComboFooter comboFooterRef;
	private string SeatsSelectedstr;
	private decimal TotalTicket;
	private decimal TotalCombo = 0;
	private decimal TotalMoney = 0;
	private decimal Discount;
	private ComboCheckRequest ComboCheckRequest;
	private bool isFirstRender = true;

	protected async override Task OnInitializedAsync()
	{	
		listObjFilm = await UserHomeService.GetAllFilmForUserHome();
        base.OnInitialized();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			var showtimeModalOpen = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "showtimeModalOpen");
			var showtimeModalFilmId = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "showtimeModalFilmId");

			if (showtimeModalOpen == "true" && !String.IsNullOrEmpty(showtimeModalFilmId))
			{
				await OpenModalShowTime(showtimeModalFilmId);
				StateHasChanged();
			}
		}
	}

	private async Task RedirectToLogin()
	{
		await JSRuntime.InvokeVoidAsync("closeModal");
		NavigationManager.NavigateTo("/");
		StateHasChanged();
		await JSRuntime.InvokeVoidAsync("openLoginModal");
	}

	private async Task OpenModalShowTime(string id)
	{
		IdFilm = id;
		var listObj = await UserHomeService.GetAllFilmForUserHome();
		filmName = listObj.FirstOrDefault(x => x.Id == Guid.Parse(id)).Name;
		await JSRuntime.InvokeVoidAsync("localStorage.setItem", "showtimeModalOpen", "true");
		await JSRuntime.InvokeVoidAsync("localStorage.setItem", "showtimeModalFilmId", id);
		await Task.Delay(100);
		await JSRuntime.InvokeVoidAsync("openModalShowTime");
	}

	private async Task OpenSeatSelectionModal(Guid id)
	{
		await seatSelectionModalref.Reset();
		ShowTimeId = id;
		await JSRuntime.InvokeVoidAsync("closeModal");
		await JSRuntime.InvokeVoidAsync("openModal", "SeatSelectionModal");
	}

	private void HandleSelectedSeats(EventCallbackHomeArgs args)
	{
		lstSeats = args.lstSeats;
		SeatsSelectedstr = args.str;
		TotalTicket = args.TotalTicket;
		TotalMoney = TotalTicket;
		StateHasChanged();
	}

	private async Task OpenComboSelectionModal(EventCallbackHomeArgs args)
	{
		Task.Delay(300);
		BillId = args.BillId;
		await JSRuntime.InvokeVoidAsync("closeModall", "SeatSelectionModal");
		await JSRuntime.InvokeVoidAsync("openModal", "ComboSelectionModal");
	}

	private async Task CloseSeatSelectionModal()
	{
		await seatSelectionModalref.Reset();
		await seatFooterRef.Reset();
		lstSeats.Clear();
		SeatsSelectedstr = "";
		BillId = Guid.Empty;
		TotalMoney = 0;
		await JSRuntime.InvokeVoidAsync("closeModall", "SeatSelectionModal"); //đóng seat selection modal
        filmName = listObjFilm.FirstOrDefault(x => x.Id == Guid.Parse(IdFilm)).Name;
		await JSRuntime.InvokeVoidAsync("openModalShowTime");
	}

	private async Task PreComboSelectionModal(Guid id)
	{
		await seatSelectionModalref.Reset();
		await comboFooterRef.Reset();
		await seatFooterRef.Reset();
		lstSeats.Clear();
		SeatsSelectedstr = "";
		BillId = Guid.Empty;
		TotalMoney = 0;
		TotalTicket = 0;
		ShowTimeId = id;
		await JSRuntime.InvokeVoidAsync("closeModall", "ComboSelectionModal");
		await JSRuntime.InvokeVoidAsync("openModal", "SeatSelectionModal");
	}

	private async Task CancelCheckout(Guid id)
	{
		await seatSelectionModalref.Reset();
		await comboFooterRef.Reset();
		await seatFooterRef.Reset();
		lstSeats.Clear();
		SeatsSelectedstr = "";
		BillId = Guid.Empty;
		TotalMoney = 0;
		TotalTicket = 0;
		TotalCombo = 0;
		Discount = 0;
		ShowTimeId = id;
		await JSRuntime.InvokeVoidAsync("closeModall", "DiscountSelectionModal");
		await JSRuntime.InvokeVoidAsync("openModal", "SeatSelectionModal");
	}

	public async void ShowCloseConfirmation()
	{
		bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Xác nhận hủy đặt vé?");

		if (confirmed)
		{
			await CloseSeatSelectionModal();
		}
	}

	private void HandleSelectedCombos(EventCallbackHomeArgs args)
	{
		lstSelectedCombos = args._lstCombo;
		TotalCombo = args.TotalCombo;
		TotalMoney = TotalCombo + TotalTicket;
		StateHasChanged();
	}

	private async Task OpenDiscountModal(EventCallbackHomeArgs args)
	{
		Task.Delay(1000);
		ComboCheckRequest = args.ComboCheckRequest;
		await JSRuntime.InvokeVoidAsync("closeModall", "ComboSelectionModal");
		await JSRuntime.InvokeVoidAsync("openModal", "DiscountSelectionModal");
	}
}