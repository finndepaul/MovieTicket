@using static WebUI.Pages.User.CinemaSystem.CinemaSystem

@if (lstCombo == null)
{
	<div class="spinner-border text-primary" role="status">
		<span class="visually-hidden">Loading...</span>
	</div>
}
else
{
	<div class="container">
		<div class="row row-cols-1 row-cols-md-3 g-4">
			@foreach (var item in lstCombo)
			{
				<div class="col" style="width:50%">
					<div class="card mb-3" style="max-width: 540px;">
						<div class="row g-0">
							<div class="col-md-4">
								<img src="@item.Image" class="img-fluid object-fit-contain rounded-start" alt="...">
							</div>
							<div class="col-md-8">
								<div class="card-body">
									<h5 class="card-title">@item.Name</h5>
									<p class="card-text">@item.Description</p>
									<p class="card-text">Giá: <span class="fw-bold">@item.Price.Value.ToString("#,##0")đ</span></p>
									<div class="input-group mb-3" style="width:50%">
										<span class="btn btn-danger input-group-text" @onclick="() => Minus(item.Id)">
											<i class="bi bi-dash-lg"></i>
										</span>
										<input type="text" class="form-control text-center" style="font-size: 18px"
										value="@comboQuantities.GetValueOrDefault(item.Id, 0)" disabled />
										<span class="btn btn-danger input-group-text" @onclick="() => Plus(item.Id)">
											<i class="bi bi-plus-lg"></i>
										</span>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
			}
		</div>
	</div>
}


@code {
	[Parameter] public Guid BillId { get; set; }
	[Parameter] public EventCallback<EventCallbackCS> OnComboSelection { get; set; }
	public EventCallbackCS args = new();
	private List<ComboDto> lstCombo = new List<ComboDto>();
	private Dictionary<Guid, int> comboQuantities = new();
	private List<ComboRequest> lstComboSelected = new List<ComboRequest>();
	CancellationToken cancellationToken;
	private TimeSpan _timeLeft;
	private Timer? _timer;
	private bool _isCountdownFinished = false;
	private DateTime EndTime = DateTime.Now.AddMinutes(5);
	private string? location;

	protected async override Task OnParametersSetAsync()
	{
		if (BillId != Guid.Empty)
		{
			lstCombo = await ComboService.GetAll();
		}
		base.OnParametersSet();
	}
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			location = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "page");
		}
	}

	private async Task Plus(Guid comboId)
	{
		if (!comboQuantities.ContainsKey(comboId))
		{
			comboQuantities[comboId] = 0;
		}
		if (comboQuantities[comboId] >= 4)
		{
			return;
		}
		comboQuantities[comboId]++;
		var existingItem = lstComboSelected.FirstOrDefault(x => x.ComboId == comboId);
		if (existingItem != null)
		{
			existingItem.Quantity = comboQuantities[comboId];
		}
		else
		{
			lstComboSelected.Add(new ComboRequest { ComboId = comboId, Quantity = comboQuantities[comboId] });
		}
		args = new EventCallbackCS
			{
				_lstCombo = lstComboSelected,
				TotalCombo = CalculateTotal()
			};
		await OnComboSelection.InvokeAsync(args);
		StateHasChanged();
	}

	private async Task Minus(Guid comboId)
	{
		if (comboQuantities.ContainsKey(comboId) && comboQuantities[comboId] > 0)
		{
			comboQuantities[comboId]--;
		}
		else
		{
			comboQuantities[comboId] = 0;
		}
		var existingItem = lstComboSelected.FirstOrDefault(x => x.ComboId == comboId);
		if (existingItem != null)
		{
			if (comboQuantities[comboId] == 0)
			{
				lstComboSelected.Remove(existingItem);
			}
			else
			{
				existingItem.Quantity = comboQuantities[comboId];
			}
		}
		args = new EventCallbackCS
			{
				_lstCombo = lstComboSelected,
				TotalCombo = CalculateTotal()
			};
		await OnComboSelection.InvokeAsync(args);
		StateHasChanged();
	}

	private decimal CalculateTotal()
	{
		decimal totalCombo = 0;
		foreach (var item in lstComboSelected)
		{
			var combo = lstCombo.FirstOrDefault(x => x.Id == item.ComboId);
			totalCombo += (Decimal)combo.Price.Value * item.Quantity;
		}
		return totalCombo;
	}
}
