@page "/cinema-system"
@using MovieTicket.Application.DataTransferObjs.Film
@layout WebUI.Layout.UserLayout

<div class="container">
    <div class="theatre-list">
        <h1 class="header">VHD CINEMAS</h1>
        <div class="cinemas">
            <p class="cinema-item @(AddressCity == "Hà Nội" ? "selected" : "")" @onclick='() => OnCitySelected("Hà Nội")'>Hà Nội</p>
            <p class="cinema-item @(AddressCity == "Hà Nam" ? "selected" : "")" @onclick='() => OnCitySelected("Hà Nam")'>Hà Nam</p>
            <p class="cinema-item @(AddressCity == "Ninh Bình" ? "selected" : "")" @onclick='() => OnCitySelected("Ninh Bình")'>Ninh Bình</p>
            <p class="cinema-item @(AddressCity == "Phú Thọ" ? "selected" : "")" @onclick='() => OnCitySelected("Phú Thọ")'>Phú Thọ</p>
        </div>
        <hr />
        <div class="cinemas">
            @foreach (var item in CinemaCenterDtos)
            {
                <p @onclick="() => OnCinemaCenterSelected(item.Id)"
                   class="cinema-item @(showTimeSearch.CinemaCenterId == item.Id ? "selected" : "")">
                    @item.Name
                </p>
            }
        </div>
    </div>

    <div id="carouselExampleAutoplaying" class="carousel slide" data-bs-ride="carousel">
        <div class="carousel-indicators">
            <button type="button" data-bs-target="#carouselExampleAutoplaying" data-bs-slide-to="0" class="active" aria-current="true" aria-label="Slide 1"></button>
            <button type="button" data-bs-target="#carouselExampleAutoplaying" data-bs-slide-to="1" aria-label="Slide 2"></button>
            <button type="button" data-bs-target="#carouselExampleAutoplaying" data-bs-slide-to="2" aria-label="Slide 3"></button>
        </div>
        <div class="carousel-inner">
            <div class="carousel-item active">
                <img src="/img/banner/bannerCinema1.jpg" class="d-block w-100" alt="Slide 1">
            </div>
            <div class="carousel-item">
                <img src="/img/banner/bannerCinema2.jpg" class="d-block w-100" alt="Slide 2">
            </div>
            <div class="carousel-item">
                <img src="/img/banner/bannerCinema3.jpg" class="d-block w-100" alt="Slide 3">
            </div>
        </div>
        <button class="left carousel-control" type="button" data-bs-target="#carouselExampleAutoplaying" data-bs-slide="prev">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Previous</span>
        </button>
        <button class="right carousel-control" type="button" data-bs-target="#carouselExampleAutoplaying" data-bs-slide="next">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Next</span>
        </button>
    </div>

    <div class="schedule-container">
        <div class="date-navigation">
            <button class="nav-btn" @onclick="PreviousPage" disabled="@(PageIndex == 0)"> &lt; </button>
            <div class="dates">
                @foreach (var date in VisibleDates)
                {
                    <div class="date-item @(date == showTimeSearch.ShowtimeDate ? "active" : "")"
                         @onclick="() => OnDateSelected(date)">
                        @date.ToString("dd/MM")
                    </div>
                }
            </div>
            <button class="nav-btn" @onclick="NextPage" disabled="@(PageIndex == TotalPages - 1)"> > </button>
        </div>

        <div class="movie-info">
            @if (showTimeDtos.Any())
            {
                <div class="movie-schedule">
                    @foreach (var group in showTimeDtos.GroupBy(s => s.FilmId))
                    {
                        var film = filmDto.FirstOrDefault(f => f.Id == group.Key);
                        if (film != null)
                        {
                            <div class="movie-info">
                                <h3 class="movie-title">@film.Name</h3>
                                <div class="rating-tag">@film.Rating</div>
                                <div class="movie-details">
                                    <img src="@film.Poster" alt="@film.Name" class="poster">
                                    <div class="showtimes">
                                        @foreach (var subGroup in group.GroupBy(s => new { s.ScreenTypeName, s.TranslationTypeName }))
                                        {
                                            <p><b>Suất chiếu:</b> @subGroup.Key.ScreenTypeName | @subGroup.Key.TranslationTypeName</p>
                                            <div class="time-slots">
                                                @foreach (var showtime in subGroup)
                                                {
                                                    <button @onclick="() => CheckLogged(showtime.Id, showtime.StartTime.Value)"
                                                            class="time-slot @(ShowTimeId == showtime.Id ? "selected" : "")">
                                                        @showtime.StartTime.Value.ToString("HH:mm")
                                                    </button>
                                                }
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                    }
                </div>
            }
            else
            {
                <p>Không có suất chiếu nào cho ngày đã chọn.</p>
            }
        </div>
    </div>
</div>

<!--Modal chọn ghế -->
<div class="modal fade" id="SeatSelectionModal" tabindex="-1" data-bs-backdrop="static" aria-hidden="true">
    <div class="modal-dialog modal-fullscreen modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header" data-bs-theme="dark">
                <h4 class="modal-title">Chọn ghế</h4>
                <button type="button" class="btn-close" @onclick="() => ShowCloseConfirmation()" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <SeatSelectionModal @ref="seatSelectionModalref" ShowtimeId="@ShowTimeId" OnSeatSelectionCinemaSystem="HandleSelectedSeats" />
            </div>
            <div class="modal-footer" style="width:100%;height:150px">
                <SeatFooter ShowtimeId="@ShowTimeId"
                            SeatDTOs="lstSeats"
                            @ref="seatFooterRef"
                            SeatsSelectedstr="@SeatsSelectedstr"
                            TotalTicket="@TotalTicket"
                            NextToComboModalCinemaSystem="OpenComboSelectionModal"
                            BackToShowtimeCinemaSystem="ShowCloseConfirmation" />
            </div>
        </div>
    </div>
</div>
<!--Modal combo -->
<div class="modal fade" id="ComboSelectionModal" tabindex="-1" data-bs-backdrop="static" aria-hidden="true">
    <div class="modal-dialog modal-fullscreen modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header" data-bs-theme="dark">
                <h4 class="modal-title">Chọn Combo</h4>
            </div>
            <div class="modal-body">
                <ComboSelectionModal @ref="comboSelectionModalref" BillId="@BillId" OnComboSelectionCinemaSystem="HandleSelectedCombos" />
            </div>
            <div class="modal-footer" style="width:100%;height:150px">
                <ComboFooter ShowtimeId="@ShowTimeId"
                             CheckedSeats="lstCheckedSeats"
                             SelectedCombos="lstSelectedCombos"
                             BillId="@BillId" @ref="comboFooterRef"
                             SeatsSelectedstr="@SeatsSelectedstr"
                             TotalCombo="@TotalCombo"
                             TotalMoney="@TotalMoney"
                             TotalTicket="@TotalTicket"
                             BackToSeatModalCinemaSystem="PreComboSelectionModal" />
            </div>
        </div>
    </div>
</div>
<!--Modal Discount-->
<div class="modal fade" id="DiscountSelectionModal" tabindex="-1" data-bs-backdrop="static" aria-hidden="true">
    <div class="modal-dialog modal-fullscreen modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header" data-bs-theme="dark">
                <h4 class="modal-title">Thanh toán</h4>
            </div>
            <div class="modal-body">
                <DiscountSelectionModal />
            </div>
            <div class="modal-footer" style="width:100%;height:150px">
                <DiscountFooter ShowtimeId="@ShowTimeId"
                                CheckedSeats="lstCheckedSeats"
                                SeatsSelectedstr="@SeatsSelectedstr"
                                TotalCombo="@TotalCombo"
                                TotalMoney="@TotalMoney"
                                TotalTicket="@TotalTicket"
                                BillCombo="ComboCheckRequest"
                                BackToSeatCinemaSystem="CancelCheckout" />
            </div>
        </div>
    </div>
</div>
<style>
    /* Phần chung */
    .theatre-list {
        font-family: Arial, sans-serif;
        background-color: #1c1c1c;
        color: white;
        width: 100%;
        margin: 50px auto;
        padding: 20px;
    }

    .header {
        text-align: center;
        font-size: 36px;
        font-weight: bold;
        color: #ccc;
        margin-bottom: 20px;
    }

    .cinemas {
        display: flex;
        flex-wrap: wrap; /* Cho phép các phần tử xuống hàng khi không đủ không gian */
        gap: 15px; /* Khoảng cách giữa các phần tử */
    }

    .cinema-item {
        margin: 0;
        padding: 10px;
        background-color: #2c2c2c;
        border-radius: 5px;
        text-align: center;
        color: white;
        transition: background-color 0.3s ease;
        cursor: pointer;
        flex-basis: calc(25% - 15px); /* Đảm bảo mỗi phần tử chiếm 1/4 chiều rộng của container, trừ khoảng cách */
        box-sizing: border-box; /* Đảm bảo padding và margin không ảnh hưởng đến kích thước phần tử */
    }

        .cinema-item:hover {
            background-color: red;
        }

        .cinema-item.selected {
            background-color: red;
            font-weight: bold;
            transition: none; /* Tắt transition cho phần tử đã chọn */
        }

            .cinema-item.selected:hover {
                background-color: #cc0000;
            }

    /* Carousel */
    .carousel-item img {
        width: 100%;
        height: 500px;
        object-fit: cover;
    }

    .carousel-control.left,
    .carousel-control.right {
        position: absolute;
        top: 0;
        bottom: 0;
        width: 5%;
        text-align: center;
        opacity: 0.5;
        background: none;
        border: none;
        transition: opacity 0.3s ease;
    }

        .carousel-control.left:hover,
        .carousel-control.right:hover {
            opacity: 0.8;
            background-image: linear-gradient(to right, rgba(0,0,0,0.5) 0, rgba(0,0,0,0.0001) 100%);
        }

    /* Phần lịch chiếu */
    .schedule-container {
        width: 80%;
        margin: 20px auto;
        border-top: 2px solid black;
        padding-top: 20px;
    }

    .date-navigation {
        display: flex;
        justify-content: center;
        align-items: center;
        margin-bottom: 20px;
    }

    .nav-btn {
        background-color: black;
        color: white;
        border: none;
        padding: 10px 15px;
        font-size: 16px;
        cursor: pointer;
        border-radius: 5px;
        transition: background-color 0.3s ease;
    }

        .nav-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

    .dates {
        display: flex;
        justify-content: center;
        gap: 10px;
        margin: 0 15px;
    }

    .date-item {
        padding: 10px 15px;
        border: 1px solid #ccc;
        background-color: white;
        border-radius: 5px;
        text-align: center;
        cursor: pointer;
        color: #555;
        transition: background-color 0.3s ease, font-weight 0.3s ease;
    }

        .date-item:hover {
            background-color: #ccc;
            font-weight: bold;
        }

        .date-item.active {
            background-color: #444;
            color: white;
            font-weight: bold;
        }

    /* Phần thông tin phim */
    .movie-info {
        margin-top: 20px;
    }

    .movie-title {
        text-transform: uppercase;
        font-size: 24px;
        margin-bottom: 10px;
    }

    .rating-tag {
        display: inline-block;
        background-color: yellow;
        font-weight: bold;
        padding: 2px 5px;
        border-radius: 3px;
        margin-bottom: 15px;
    }

    .movie-details {
        display: flex;
        gap: 20px;
    }

    .poster {
        width: 200px;
        height: auto;
        border: 1px solid #ccc;
    }

    .showtimes {
        flex: 1;
    }

    .time-slots {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
    }

        .time-slots button {
            padding: 10px;
            border: 1px solid #ccc;
            background-color: white;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s ease, transform 0.2s ease;
        }

            .time-slots button:hover {
                background-color: #ddd;
                transform: scale(1.1);
            }

    /* Các nút modal */
    .modal-footer .nav-btn {
        background-color: #444;
        color: white;
        border: none;
        padding: 10px 20px;
        font-size: 16px;
        border-radius: 5px;
        cursor: pointer;
        margin-top: 10px;
    }

        .modal-footer .nav-btn:hover {
            background-color: #666;
        }

</style>

<script>
    function openModalShowTime() {
    document.getElementById('myModalBuyTicket').style.display = 'flex';
    }
    function openModal(modalId) {
        var modalElement = document.getElementById(modalId);
        var modal = new bootstrap.Modal(modalElement);
        modal.show();
    }
    function closeModall(modalId) {
        var modalElement = document.getElementById(modalId);
        var modal = bootstrap.Modal.getInstance(modalElement);
        if (modal) {
            modal.hide();
        }
    }
</script>

@code {
    private IQueryable<CinemaCenterDto> CinemaCenterDtos = Enumerable.Empty<CinemaCenterDto>().AsQueryable();
    private List<CinemaDto> AllCinemas = new List<CinemaDto>();
    private List<CinemaDto> CinemaDtos = new List<CinemaDto>();
    private List<ShowTimeDto> showTimeDtos = new List<ShowTimeDto>();
    private CinemaCenterSearch CinemaCenterSearch = new CinemaCenterSearch();
    private PagingParameters PagingParameters = new PagingParameters();
    private CinemaDto Cinema = new CinemaDto();
    private ShowTimeSearch showTimeSearch = new ShowTimeSearch();
    private IEnumerable<FilmDto> filmDto { get; set; } = new List<FilmDto>();
    private AuthenticationState AuthenState;
    private List<SeatDTO> lstSeats = new List<SeatDTO>();
    private Guid ShowTimeId;
    private List<DateTime> Dates = new();
    private List<DateTime> VisibleDates => Dates.Skip(PageIndex * ItemsPerPage).Take(ItemsPerPage).ToList();
    private int PageIndex = 0;
    private int ItemsPerPage = 9;
    private int TotalPages => (int)Math.Ceiling((double)Dates.Count / ItemsPerPage);
    private SeatSelectionModal seatSelectionModalref;
    private ComboSelectionModal comboSelectionModalref;
    private SeatFooter seatFooterRef;
    private ComboFooter comboFooterRef;
    private string SeatsSelectedstr;
    private Guid BillId;
    private string IdFilm;
    private string filmName { get; set; }
    private List<SeatDTO> lstCheckedSeats = new List<SeatDTO>();
    private List<ComboRequest> lstSelectedCombos = new();
    private decimal TotalTicket;
    private decimal TotalCombo = 0;
    private decimal TotalMoney = 0;
    private decimal Discount;
    private ComboCheckRequest ComboCheckRequest;
    private bool isFirstRender = true;
	private string AddressCity = "Hà Nội";
    public class EventCallbackCinemaSystemArgs
    {
        public List<SeatDTO> lstSeats { get; set; }
        public string str { get; set; }
        public decimal TotalMoney { get; set; }
        public decimal TotalTicket { get; set; }
        public decimal TotalCombo { get; set; }
        public decimal Discount { get; set; }
        public List<ComboDto>? lstCombo { get; set; }
        public Guid BillId { get; set; }
        public List<SeatDTO> lstCheckedSeat { get; set; }
        public List<ComboRequest> _lstCombo = new();
        public ComboCheckRequest ComboCheckRequest { get; set; }
        public Guid MembershipId { get; set; }
    }

   
    protected override async Task OnInitializedAsync()
    {
        Dates = Enumerable.Range(0, 28).Select(offset => DateTime.Today.AddDays(offset)).ToList();
        showTimeSearch.ShowtimeDate = DateTime.Today;
        AuthenState = await AuthStateProvider.GetAuthenticationStateAsync();
		await LoadCinemas(AddressCity);
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "page", "CinemaSystem");
            var showtimeModalOpen = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "showtimeModalOpen");
            var showtimeModalFilmId = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "showtimeModalFilmId");
        }
    }

    private async Task LoadCinemas(string city)
    {
        AddressCity = city;
        var cinemaCenterDtos = await CinemaCenterService.GetCinemaCentersAsync(new CinemaCenterSearch());
		CinemaCenterDtos = cinemaCenterDtos.Where(c => c.AddresCity == AddressCity);
        if (CinemaCenterDtos.Any())
        {
            var firstCinemaCenterId = CinemaCenterDtos.First().Id;
            showTimeSearch.CinemaCenterId = firstCinemaCenterId;
            await OnCinemaCenterSelected(firstCinemaCenterId);
        }
        else
        {
            showTimeDtos.Clear();
            filmDto = new List<FilmDto>();
        }
		StateHasChanged();
    }

    private async Task OnCitySelected(string city)
	{
		await LoadCinemas(city);
	}

    private async Task OnCinemaCenterSelected(Guid cinemaCenterId)
    {
        showTimeSearch.CinemaCenterId = cinemaCenterId;
        await LoadShowTimes();
    }

    private async Task OnDateSelected(DateTime date)
    {
        showTimeSearch.ShowtimeDate = date;
        await LoadShowTimes();
    }

    private async Task LoadShowTimes()
    {
        if (showTimeSearch.CinemaCenterId.HasValue && showTimeSearch.ShowtimeDate.HasValue)
        {
            var pagingResponse = await ShowTimeService.GetAll(showTimeSearch, new PagingParameters() { PageSize = 50 });
            showTimeDtos = pagingResponse.Item.ToList();

            var filmIds = showTimeDtos.Select(s => s.FilmId).Distinct();
            filmDto = (await FilmService.GetAllFilms()).Where(f => filmIds.Contains(f.Id)).ToList();
        }
        else
        {
            showTimeDtos.Clear();
            filmDto = new List<FilmDto>();
        }
    }

    private void PreviousPage()
    {
        if (PageIndex > 0)
        {
            PageIndex--;
        }
    }

    private void NextPage()
    {
        if (PageIndex < TotalPages - 1)
        {
            PageIndex++;
        }
    }
    private async Task CheckLogged(Guid id, DateTime startTime)
    {
        if (AuthenState.User.Identity.IsAuthenticated)
        {
            if (DateTime.Now.AddMinutes(15) >= startTime)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Lịch chiếu sẽ bắt đầu ngay sau đây, hãy đặt vé tại địa điểm bạn muốn xem phim.");
            }
            else
            {
                await OpenSeatSelectionModal(id);
            }
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Bạn cần đăng nhập để chọn ghế");
            NavigationManager.NavigateTo("login");
        }
    }
    private async Task OpenSeatSelectionModal(Guid id)
    {
        await seatSelectionModalref.Reset();
        ShowTimeId = id;
        await JSRuntime.InvokeVoidAsync("openModal", "SeatSelectionModal");
    }

    private void HandleSelectedSeats(EventCallbackCinemaSystemArgs args)
    {
        lstSeats = args.lstSeats;
        SeatsSelectedstr = args.str;
        TotalTicket = args.TotalTicket;
        TotalMoney = TotalTicket;
        StateHasChanged();
    }

    private async Task CloseSeatSelectionModal()
    {
        await seatSelectionModalref.Reset();
        await seatFooterRef.Reset();
        lstSeats.Clear();
        SeatsSelectedstr = "";
        BillId = Guid.Empty;
        TotalMoney = 0;
        await JSRuntime.InvokeVoidAsync("closeModall", "SeatSelectionModal"); //đóng seat selection modal
        //filmName = listObjFilm.FirstOrDefault(x => x.Id == Guid.Parse(IdFilm)).Name;
    }

    private async Task PreComboSelectionModal()
    {
        await JSRuntime.InvokeVoidAsync("closeModall", "ComboSelectionModal"); //đóng seat selection modal
        await JSRuntime.InvokeVoidAsync("openModal", "SeatSelectionModal");
    }
    private async void ShowCloseConfirmation()
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Xác nhận hủy đặt vé?");
        if (confirmed)
        {
            await CloseSeatSelectionModal();
        }
    }

    private async Task OpenComboSelectionModal(EventCallbackCinemaSystemArgs args)
    {
        Task.Delay(300);
        BillId = args.BillId;
        await JSRuntime.InvokeVoidAsync("closeModall", "SeatSelectionModal");
        await JSRuntime.InvokeVoidAsync("openModal", "ComboSelectionModal");
    }

    private async Task OpenDiscountModal(EventCallbackCinemaSystemArgs args)
    {
        Task.Delay(1000);
        ComboCheckRequest = args.ComboCheckRequest;
        await JSRuntime.InvokeVoidAsync("closeModall", "ComboSelectionModal");
        await JSRuntime.InvokeVoidAsync("openModal", "DiscountSelectionModal");
    }

    private void HandleSelectedCombos(EventCallbackCinemaSystemArgs args)
    {
        lstSelectedCombos = args._lstCombo;
        TotalCombo = args.TotalCombo;
        TotalMoney = TotalCombo + TotalTicket;
        StateHasChanged();
    }

    private async Task CancelCheckout(Guid id)
    {
        await seatSelectionModalref.Reset();
        await comboFooterRef.Reset();
        await seatFooterRef.Reset();
        lstSeats.Clear();
        SeatsSelectedstr = "";
        BillId = Guid.Empty;
        TotalMoney = 0;
        TotalTicket = 0;
        TotalCombo = 0;
        Discount = 0;
        ShowTimeId = id;
        await JSRuntime.InvokeVoidAsync("closeModall", "DiscountSelectionModal");
        await JSRuntime.InvokeVoidAsync("openModal", "SeatSelectionModal");
    }
}