@page "/userinformation"
@using Microsoft.AspNetCore.WebUtilities
@using MovieTicket.Application.DataTransferObjs.Account.Request
@using MovieTicket.Application.DataTransferObjs.Coupon
@inject IAccountService AccountService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@inject IAccountUtilitiesService AccountUtilitiesService
@inject ICloudinaryService CloudinaryService
@layout Layout.UserLayout

<div class="container py-5">
    <ul class="nav nav-underline" id="myTab" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link @(activeTab == "user-info" ? "active" : "")" id="user-info-tab" data-bs-toggle="tab" data-bs-target="#user-info" type="button" role="tab" aria-controls="user-info" aria-selected="@(activeTab == "user-info")">Thông tin người dùng</button>
        </li>
        <li class="nav-item mt-3" role="presentation">
            <button class="nav-link @(activeTab == "membership-points" ? "active" : "")" id="membership-points-tab" data-bs-toggle="tab" data-bs-target="#membership-points" type="button" role="tab" aria-controls="membership-points" aria-selected="@(activeTab == "membership-points")">Điểm VHD</button>
        </li>
        <li class="nav-item mt-3" role="presentation">
            <button class="nav-link @(activeTab == "change-password" ? "active" : "")" id="change-password-tab" data-bs-toggle="tab" data-bs-target="#change-password" type="button" role="tab" aria-controls="change-password" aria-selected="@(activeTab == "change-password")">Đổi mật khẩu</button>
        </li>
        <li class="nav-item mt-3" role="presentation">
            <button class="nav-link @(activeTab == "booking-history" ? "active" : "")" id="booking-history-tab" data-bs-toggle="tab" data-bs-target="#booking-history" type="button" role="tab" aria-controls="booking-history" aria-selected="@(activeTab == "booking-history")">Lịch sử đặt vé</button>
        </li>
        <li class="nav-item mt-3" role="presentation">
            <button class="nav-link @(activeTab == "coupon-usage-history" ? "active" : "")" id="coupon-usage-history-tab" data-bs-toggle="tab" data-bs-target="#coupon-usage-history" type="button" role="tab" aria-controls="coupon-usage-history" aria-selected="@(activeTab == "coupon-usage-history")">Lịch sử sử dụng mã giảm giá</button>
        </li>
    </ul>

    <div class="tab-content mt-3" id="myTabContent">
        <div class="tab-pane fade @(activeTab == "user-info" ? "show active" : "")" id="user-info" role="tabpanel" aria-labelledby="user-info-tab">
            <EditForm Model="userInfo" OnValidSubmit="UpdateUserInfo" class="p-4 bg-white rounded-4 shadow-sm">
                <DataAnnotationsValidator />
                <div class="mb-4 text-center">
                    @if (!string.IsNullOrEmpty(userInfo.Avatar))
                    {
                        <div class="d-flex flex-column align-items-center">
                            <img src="@userInfo.Avatar" alt="User Avatar" class="rounded-circle mb-3 border border-3 border-primary" style="width: 120px; height: 120px; object-fit: cover;">
                        </div>
                    }

                    <label for="customFile" class="form-label text-secondary">Cập nhật ảnh đại diện</label>
                    <InputFile OnChange="HandleImageChange" class="form-control border-primary" id="customFile" accept="image/x-png,image/jpeg"></InputFile>
                    
                </div>
                <!-- Row for Username and Email -->
                <div class="row mb-4">
                    <div class="col-md-6">
                        <label for="username" class="form-label text-secondary">Tên tài khoản</label>
                        <InputText id="username" class="form-control border-primary" @bind-Value="userInfo.Username" disabled />
                    </div>
                    <div class="col-md-6">
                        <label for="email" class="form-label text-secondary">Email</label>
                        <InputText id="email" class="form-control border-primary" @bind-Value="userInfo.Email" disabled />
                    </div>
                </div>

                <!-- Row for Name and Phone -->
                <div class="row mb-4">
                    <div class="col-md-6">
                        <label for="name" class="form-label text-secondary">Họ và tên</label>
                        <InputText id="name" class="form-control border-primary" @bind-Value="userInfo.Name" />
                        <ValidationMessage For="@(() => userInfo.Name)" class="text-danger small" />
                    </div>
                    <div class="col-md-6">
                        <label for="phone" class="form-label text-secondary">Số điện thoại</label>
                        <InputText id="phone" class="form-control border-primary" @bind-Value="userInfo.Phone" />
                        <ValidationMessage For="@(() => userInfo.Phone)" class="text-danger small" />
                    </div>
                </div>

                <!-- Submit Button -->
                <div class="text-center">
                    <button type="submit" class="btn btn-primary px-5 py-2 rounded-pill fw-bold">Cập nhật</button>
                </div>
            </EditForm>
        </div>

        <div class="tab-pane fade @(activeTab == "change-password" ? "show active" : "")" id="change-password" role="tabpanel" aria-labelledby="change-password-tab">
            <EditForm Model="changePasswordRequest" OnValidSubmit="ChangePassword" class="p-4 bg-white rounded-4 shadow-sm">
                <DataAnnotationsValidator />
                <div class="mb-3">
                    <label for="oldPassword" class="form-label">Nhập mật khẩu cũ</label>
                    <InputText type="password" class="form-control" id="oldPassword" @bind-Value="changePasswordRequest.OldPassword" />
                    <ValidationMessage For="@(() => changePasswordRequest.OldPassword)" />
                </div>
                <div class="mb-3">
                    <label for="newPassword" class="form-label">Nhập mật khẩu mới</label>
                    <InputText type="password" class="form-control" id="newPassword" @bind-Value="changePasswordRequest.NewPassword" />
                    <ValidationMessage For="@(() => changePasswordRequest.NewPassword)" />
                </div>
                <div class="mb-3">
                    <label for="newPasswordConfirm" class="form-label">Nhập lại mật khẩu</label>
                    <InputText type="password" class="form-control" id="newPasswordConfirm" @bind-Value="changePasswordRequest.NewPasswordConFirm" />
                    <ValidationMessage For="@(() => changePasswordRequest.NewPasswordConFirm)" />
                </div>
                <button type="submit" class="btn btn-primary">Đổi mật khẩu</button>
            </EditForm>
        </div>

        <div class="tab-pane fade @(activeTab == "booking-history" ? "show active" : "")" id="booking-history" role="tabpanel" aria-labelledby="booking-history-tab">
            @if (bookingHistory?.Item != null && bookingHistory.Item.Any())
            {
                <div class="row g-4">
                    @foreach (var bill in bookingHistory.Item)
                    {
                        <div class="col-12 col-md-6 col-lg-4">
                            <div class="card shadow-sm h-100">
                                <!-- Hình ảnh phim -->
                                <div class="position-relative">
                                    <img src="@bill.FilmPoster" alt="Film Poster" class="card-img-top img-fluid" style="object-fit: cover; height: 200px;">
                                    <span class="badge bg-warning text-dark position-absolute top-0 start-0 m-2 px-3 py-2 fs-6">
                                        @bill.FilmRating
                                    </span>
                                </div>

                                <!-- Thông tin chi tiết -->
                                <div class="card-body d-flex flex-column">
                                    <h5 class="card-title text-truncate fw-bold">@bill.FilmName</h5>
                                    <p class="mb-2 text-muted">
                                        <i class="bi bi-calendar3"></i> Ngày đặt: <span>@bill.CreateTime</span>
                                    </p>
                                    <p class="mb-2 text-muted">
                                        <i class="bi bi-clock"></i>
                                        Từ: <span>@bill.ShowStartTime?.ToString("HH:mm")</span> ~
                                        Đến: <span>@bill.ShowEndTime?.ToString("HH:mm")</span>
                                    </p>
                                    <p class="mb-2 text-muted">
                                        <i class="bi bi-geo-alt"></i> Địa điểm: <span>@bill.CinemaName</span>
                                    </p>
                                    <p class="fw-bold text-success fs-5 mt-auto">
                                        @string.Format("{0:N0}", bill.TotalMoney)<span style="text-decoration: underline;">đ</span>
                                    </p>
                                </div>

                                <!-- Trạng thái và nút -->
                                <div class="card-footer bg-light d-flex justify-content-between align-items-center">
                                    <span class="badge text-bg-success">
                                        @(bill.Status == BillStatus.Paid ? "Đã thanh toán" : bill.Status.ToString())
                                    </span>
                                    <a href="@($"BookinghistoryDetail/{bill.Id}")" class="btn btn-outline-success btn-sm">
                                        Chi tiết
                                    </a>
                                </div>
                            </div>
                        </div>
                    }

                    <Pagination MetaData="metaData" Spread="2" SelectedPage="SelectedPage"></Pagination>
                </div>
            }
            else
            {
                <div class="d-flex justify-content-center align-items-center" style="height: 300px;">
                    <p class="text-center text-muted fs-5">Không có lịch sử giao dịch</p>
                </div>
            }
        </div>


        <div class="tab-pane fade @(activeTab == "coupon-usage-history" ? "show active" : "")" id="coupon-usage-history" role="tabpanel" aria-labelledby="coupon-usage-history-tab">
            @if (couponUsageHistory?.Item != null && couponUsageHistory.Item.Any())
            {
                <div class="row g-3">
                    @foreach (var coupon in couponUsageHistory.Item)
                    {
                        <div class="col-12 col-md-6 col-lg-4">
                            <div class="card shadow-sm border-0">
                                <div class="card-body">
                                    <h5 class="card-title fw-bold">@coupon.CouponCode</h5>
                                    <p class="mb-1">Giá trị: @string.Format("{0:N0}", coupon.AmountValue)đ</p>
                                    <p class="mb-1">Ngày bắt đầu: @coupon.StartDate.ToString("dd/MM/yyyy")</p>
                                    <p class="mb-1">Ngày kết thúc: @coupon.EndDate.ToString("dd/MM/yyyy")</p>
                                    <p class="mb-1">Trạng thái: @coupon.IsActive</p>
                                </div>
                            </div>
                        </div>
                    }
                    <Pagination MetaData="metaData" Spread="2" SelectedPage="SelectedPageCoupon"></Pagination>
                </div>
            }
            else
            {
                <p class="text-center text-muted fs-5">Không có lịch sử sử dụng mã giảm giá</p>
            }
        </div>

        <div class="tab-pane fade @(activeTab == "membership-points" ? "show active" : "")" id="membership-points" role="tabpanel" aria-labelledby="membership-points-tab">
            <div class="p-4 bg-white rounded-4 shadow-sm">
                <h3 class="text-primary">Điểm VHD</h3>
                <p>Bạn hiện có <strong>@membershipPoints</strong> điểm VHD.</p>
            </div>
        </div>
    </div>
</div>
<style>
    .validation-message {
        color: red;
    }
</style>

@code {
    private AccountUpdateRequest userInfo = new AccountUpdateRequest();
    private string activeTab = "user-info";
    private string? _directoryPath { get; set; }
    private ChangePasswordRequest changePasswordRequest = new ChangePasswordRequest();
    private PageList<BillsDto>? bookingHistory = new PageList<BillsDto>();
    private PageList<CouponDto>? couponUsageHistory = new PageList<CouponDto>();
    private int membershipPoints;
    private MetaData metaData = new MetaData();
    private PagingParameters pagingParametersBooking = new PagingParameters { PageNumber = 1, PageSize = 3 };
    private PagingParameters pagingParametersCoupon = new PagingParameters { PageNumber = 1, PageSize = 3 };

    protected override async Task OnInitializedAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("tab", out var tab))
        {
            activeTab = tab;
        }
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (Guid.TryParse(userId, out var guidUserId))
            {
                var accountDto = await AccountService.GetByIdAsync(guidUserId);
                userInfo = new AccountUpdateRequest
                    {
                        Id = accountDto.Id,
                        Username = accountDto.Username,
                        Email = accountDto.Email,
                        Name = accountDto.Name,
                        Phone = accountDto.Phone,
                        Role = accountDto.Role,
                        Status = accountDto.Status,
                        Avatar = accountDto.Avatar
                    };
                changePasswordRequest.Id = guidUserId;
                membershipPoints = await AccountService.GetMembershipPointsAsync(guidUserId, CancellationToken.None);
                await LoadCouponUsageHistory(guidUserId);
                await LoadBookingHistory(guidUserId);
            }
        }
        else
        {
            NavigationManager.NavigateTo("/login");
        }
    }

    private async Task UpdateUserInfo()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (Guid.TryParse(userId, out var guidUserId))
            {
                if (string.IsNullOrEmpty(userInfo.Avatar))
                {
                    await JSRuntime.ToastrError("Vui lòng tải lên ảnh hợp lệ.");
                    return;
                }
                userInfo.Id = guidUserId;
                var result = await AccountService.UpdateAsync(userInfo);
                if (result != null)
                {
                    await JSRuntime.ToastrSuccess("Cập nhật thông tin thành công!");
                    await OnInitializedAsync();
                }
                else
                {
                    await JSRuntime.ToastrError("Cập nhật thông tin thất bại!");
                }
            }
        }
        else
        {
            NavigationManager.NavigateTo("/login");
        }

    }

    private async Task ChangePassword()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (Guid.TryParse(userId, out var guidUserId))
            {
                changePasswordRequest.Id = guidUserId;
                var result = await AccountUtilitiesService.ChangePasswordAsync(changePasswordRequest, CancellationToken.None);
                if (result)
                {
                    await JSRuntime.ToastrSuccess("Đổi mật khẩu thành công");
                    await OnInitializedAsync();

                }
                else
                {
                    await JSRuntime.ToastrError("Đổi mật khẩu thất bại");
                }
            }
        }
        else
        {
            NavigationManager.NavigateTo("/login");
        }

    }

    private async Task LoadBookingHistory(Guid userId)
    {
        bookingHistory = await AccountService.GetUserBookingHistoryAsync(userId, pagingParametersBooking);
        metaData = bookingHistory.MetaData;
    }

    private async Task LoadCouponUsageHistory(Guid userId)
    {
        couponUsageHistory = await AccountService.GetUserCouponUsageHistoryAsync(userId, pagingParametersCoupon, CancellationToken.None);
        metaData = couponUsageHistory.MetaData;
    }

    private async Task OnPageChanged(int pageNumber)
    {
        pagingParametersBooking.PageNumber = pageNumber;
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (Guid.TryParse(userId, out var guidUserId))
            {
                await LoadBookingHistory(guidUserId);
            }
        }
        else
        {
            NavigationManager.NavigateTo("/login");
        }
    }

    private async Task OnPageChangedCoupon(int pageNumber)
    {
        pagingParametersBooking.PageNumber = pageNumber;
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (Guid.TryParse(userId, out var guidUserId))
            {
                await LoadCouponUsageHistory(guidUserId);
            }
        }
        else
        {
            NavigationManager.NavigateTo("/login");
        }
    }

    private async Task SelectedPage(int pageNumber)
    {
        await OnPageChanged(pageNumber);
    }

    private async Task SelectedPageCoupon(int pageNumber)
    {
        await OnPageChangedCoupon(pageNumber);
    }

    private async Task HandleImageChange(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            try
            {
                // Kiểm tra kích thước file trước khi xử lý
                if (file.Size > 10 * 1024 * 1024) // 10 MB
                {
                    await JSRuntime.ToastrError("Kích thước file vượt quá giới hạn cho phép (10 MB).");
                    return;
                }

                using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // 10 MB
                using var content = new MultipartFormDataContent();
                using var fileContent = new StreamContent(stream);

                fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);
                content.Add(fileContent, "formFile", file.Name);

                // Gọi API để upload ảnh
                var imageUrl = await CloudinaryService.UploadImageAsync(content);
                if (!string.IsNullOrEmpty(imageUrl))
                {
                    userInfo.Avatar = imageUrl;
                    await JSRuntime.ToastrSuccess("Upload ảnh thành công.");
                }
                else
                {
                    await JSRuntime.ToastrError("Upload ảnh thất bại.");
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.ToastrError($"Đã xảy ra lỗi: {ex.Message}");
            }
        }
    }
}
