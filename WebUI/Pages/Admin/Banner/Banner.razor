@page "/banner"

@attribute [Authorize(Roles = "Admin")]

<div class="container-fluid">
    @* Nút *@
    <div class="d-grid gap-2 d-md-flex justify-content-md-start">
        <button class="btn add-btn" id="btnAdd" data-bs-toggle="modal" data-bs-target="#addBannerModal">
            <i class="bi bi-plus-square"></i>
            Thêm banner
        </button>
        <button class="btn btn-info me-md-2" style="color:white">
            <i class="bi bi-arrow-clockwise"></i>
            Refresh
        </button>
    </div>
    @*Add Modal *@
    <div class="modal fade" id="addBannerModal" tabindex="-1" data-bs-backdrop="static" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header" data-bs-theme="dark">
                    <h4 class="modal-title">Thêm Banner</h4>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <AddBannerModal />
                </div>
            </div>
        </div>
    </div>
    @*Update Modal *@
    <div class="modal fade" id="updateBannerModal" tabindex="-1" data-bs-backdrop="static" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header" data-bs-theme="dark">
                    <h4 class="modal-title">Sửa Banner</h4>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <UpdateBannerModal BannerId="@guid"/>
                </div>
            </div>
        </div>
    </div>
    @* Bảng *@
    <div class="table-responsive mb-3">
        <table class="table table-hover align-middle">
            <thead class="table-light">
                <tr>
                    <th scope="col">STT</th>
                    <th scope="col">Tên banner</th>
                    <th scope="col">Ảnh</th>
                    <th scope="col">Ngày tạo</th>
                    <th scope="col">Sửa lần cuối</th>
                    <th scope="col">Trạng thái</th>
                    <th scope="col">Thao tác</th>
                </tr>
            </thead>
            <tbody>
                @if(banners.Count == 0)
                {
                    <tr>
                        <td colspan="7" class="text-center">Không có dữ liệu</td>
                    </tr>
                }
                else
                {
                    @foreach (var (index, banner) in banners.Select((banner, index) => (index + 1, banner)))
                    {
                        <tr>
                            <td>@index</td>
                            <td>@banner.Name</td>
                            <td><img src="@banner.Image" class="object-fit-scale border rounded" alt="Banner" style="width: auto; height: 200px;" /></td>
                            <td>@banner.CreatedDate</td>
                            <td>
                                @if (banner.UpdatedDate == DateTime.MinValue)
                                {
                                    <span class="badge text-bg-secondary">Chưa sửa</span>
                                }
                                else
                                {
                                    <span class="badge text-bg-secondary">@banner.UpdatedDate</span>
                                }
                            </td>
                            <td>
                                <select class="form-select" @onchange="async (e) => await UpdateBannerStatus(banner.Id, e.Value.ToString())">
                                    <option value="1" selected="@banner.Status.Equals(BannerStatus.Active)">Active</option>
                                    <option value="0" selected="@banner.Status.Equals(BannerStatus.Inactive)">Inactive</option>
                                </select>
                            </td>
                            <td>
                                <button class="btn edit-btn" data-id="@banner.Id" @onclick="() => OpenEditModal(banner.Id)">
                                    <i class="bi bi-pencil-square"></i>
                                </button>

                                <button class="btn btn-danger" data-id="@banner.Id" @onclick="() => ShowDeleteConfirmation(banner.Id)">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

<style>
    .form-select{
    width: 75%;
    }
</style>

<script>
    function openModal(modalId) {
    var modal = new bootstrap.Modal(document.getElementById(modalId));
    modal.show();
    }
</script>

@code {
    private Guid deleteId;
    private Guid guid;
    private List<BannerDTO> banners = new();
    private BannerUpdateRequest request = new();
    private string _uploadedImgUrl;
    private string? _directoryPath;

    protected async override Task OnInitializedAsync()
    {
        banners = await BannerService.GetBannersAsync();
        // _directoryPath = Path.Combine(WebHostEnv.ContentRootPath, "img", "banner");
    }

    private async Task OpenEditModal(Guid id)
    {
        guid = id;
        Task.Delay(300);
        await JSRuntime.InvokeVoidAsync("openModal", "updateBannerModal");
    }

    private async void ShowDeleteConfirmation(Guid id)
    {
        deleteId = id;
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Xóa Banner?");
        if (confirmed)
        {
            await DeleteBanner();
        }
    }

    private async Task DeleteBanner()
    {   
        var banner = await BannerService.GetById(deleteId);

        var fileToDelete = banner.Data.Image.Split('/').Reverse().First();
        var filePathToDeleteImage = Path.Combine(_directoryPath, fileToDelete);
        File.Delete(filePathToDeleteImage);
        var response = await BannerService.Delete(deleteId);
        if (response.Status == StatusCodes.Status200OK)
        {
            await JSRuntime.InvokeVoidAsync("alert", response.Message);
            NavigationManager.NavigateTo("/banner", forceLoad: true);
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", response.Message);
        }
    }

    private async Task UpdateBannerStatus(Guid bannerId, string status)
    {
        var newStatus = (BannerStatus)Enum.Parse(typeof(BannerStatus), status);
        var banner = banners.FirstOrDefault(b => b.Id == bannerId);
        request.Id = bannerId;
        request.Name = banner.Name;
        request.Image = banner.Image;
        request.Status = newStatus;
        var response = await BannerService.Update(request);
        if (response.Status == StatusCodes.Status200OK)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Đổi trạng thái thành công");
            banners = await BannerService.GetBannersAsync();
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Đổi trạng thái không thành công");
        }
    }
}
