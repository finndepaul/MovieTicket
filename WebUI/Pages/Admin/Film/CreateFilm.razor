@page "/create-film"
@using MovieTicket.Application.DataTransferObjs.Film
@using MovieTicket.Application.DataTransferObjs.ScreenType
@using MovieTicket.Application.DataTransferObjs.TranslationType
@using MovieTicket.Domain.Enums
@attribute [Authorize(Roles = "Admin")]
@inject IFilmService FilmService
@inject IScreenTypeServices ScreenTypeService
@inject NavigationManager NavigationManager
@inject IJSRuntime _JSRuntime
@inject ITranslationTypeService TranslationTypeService

<div class="container-fluid">
    <EditForm Model="filmCreateRequest" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <a class="btn btn-outline-secondary mb-3" href="/film">Quay lại</a>
        <button type="submit" class="btn btn-primary mb-3">Submit</button>
        <div class="row mb-3">
            <div class="col-md-6">
                <label for="tenPhim" class="form-label">Tên phim</label>
                <input type="text" class="form-control" id="tenPhim" @bind="filmCreateRequest.Name" placeholder="Enter name">
                <ValidationMessage For="@(() => filmCreateRequest.Name)" />
            </div>
            <div class="col-md-6">
                <label class="form-label">Hình thức chiếu</label>
                <div class="d-flex flex-wrap ">
                    @foreach (var screenType in screenTypes)
                    {
                        <div class="form-check me-3">
                            <input class="form-check-input" type="checkbox" value="@screenType.Id" @onchange="(e) => OnScreenTypeChanges(e, screenType.Id)" />
                            <label class="form-check-label" for="screenType_@screenType.Id">@screenType.Type</label>
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-6">
                <label for="tenPhimEng" class="form-label">Tên phim (tiếng anh)</label>
                <input type="text" class="form-control" id="tenPhimEng" @bind="filmCreateRequest.EnglishName" placeholder="Enter english name">
                <ValidationMessage For="@(() => filmCreateRequest.EnglishName)" />
            </div>
            <div class="col-md-6">
                <label class="form-label">Hình thức dịch</label>
                <div class="d-flex flex-wrap ">
                    @foreach (var translationType in translationTypes)
                    {
                        <div class="form-check me-3">
                            <input class="form-check-input" type="checkbox" value="@translationType.Id" @onchange="(e) => OnTranslationTypeChanges(e, translationType.Id)" />
                            <label class="form-check-label" for="translationType_@translationType.Id">@translationType.Type</label>
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-6">
                <label for="trailer" class="form-label">Trailer</label>
                <input type="text" class="form-control" id="trailer" @bind="filmCreateRequest.Trailer" placeholder="Enter trailer">
                <ValidationMessage For="@(() => filmCreateRequest.Trailer)" />
            </div>
            <div class="col-md-6">
                <label for="doTuoi" class="form-label">Độ tuổi xem phim</label>
                <select class="form-select" @bind="filmCreateRequest.Rating">
                    <option selected>Lựa chọn độ tuổi của phim</option>
                    <option value="12">Phim dành cho mọi lứa tuổi</option>
                    <option value="13">13 tuổi trở lên</option>
                    <option value="16">16 tuổi trở lên</option>
                    <option value="18">18 tuổi trở lên</option>
                </select>
                <ValidationMessage For="@(() => filmCreateRequest.Rating)" />
            </div>
        </div>

        <div class="mb-3">
            <label for="moTa" class="form-label">Mô tả</label>
            <textarea class="form-control" id="moTa" @bind="filmCreateRequest.Description" rows="3" placeholder="Enter description"></textarea>
            <ValidationMessage For="@(() => filmCreateRequest.Description)" />
        </div>

        <div class="row mb-3">
            <div class="col-md-4">
                <label for="theLoai" class="form-label">Thể loại</label>
                <input type="text" class="form-control" id="theLoai" @bind="filmCreateRequest.Gerne" placeholder="Enter genre">
                <ValidationMessage For="@(() => filmCreateRequest.Gerne)" />
            </div>
            <div class="col-md-4">
                <label for="daoDien" class="form-label">Đạo diễn</label>
                <input type="text" class="form-control" id="daoDien" @bind="filmCreateRequest.Director" placeholder="Enter director">
                <ValidationMessage For="@(() => filmCreateRequest.Director)" />
            </div>
            <div class="col-md-4">
                <label for="dienVien" class="form-label">Diễn viên</label>
                <input type="text" class="form-control" id="dienVien" @bind="filmCreateRequest.Cast" placeholder="Enter cast">
                <ValidationMessage For="@(() => filmCreateRequest.Cast)" />
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-4">
                <label for="ngayChieu" class="form-label">Lịch chiếu</label>
                <input type="date" class="form-control" id="ngayChieu" @bind="filmCreateRequest.StartDate">
                <ValidationMessage For="@(() => filmCreateRequest.StartDate)" />
            </div>
            <div class="col-md-4">
                <label for="namPhatHanh" class="form-label">Năm phát hành</label>
                <input type="number" class="form-control" id="namPhatHanh" @bind="filmCreateRequest.ReleaseYear" placeholder="Enter release year">
                <ValidationMessage For="@(() => filmCreateRequest.ReleaseYear)" />
            </div>
            <div class="col-md-4">
                <label for="thoiLuong" class="form-label">Thời lượng phim (phút)</label>
                <input type="number" class="form-control" id="thoiLuong" @bind="filmCreateRequest.RunningTime" placeholder="Enter duration">
                <ValidationMessage For="@(() => filmCreateRequest.RunningTime)" />
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-6">
                <label for="language" class="form-label">Ngôn ngữ</label>
                <input type="text" class="form-control" id="language" @bind="filmCreateRequest.Language" placeholder="Enter language">
                <ValidationMessage For="@(() => filmCreateRequest.Language)" />
            </div>
            <div class="col-md-6">
                <label for="quocGia" class="form-label">Quốc gia</label>
                <input type="text" class="form-control" id="quocGia" @bind="filmCreateRequest.Nation" placeholder="Enter nation">
                <ValidationMessage For="@(() => filmCreateRequest.Nation)" />
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-12">
                @if (filmCreateRequest.Poster == null)
                {
                    <label for="customFile" class="form-label">Upload Image</label>
                    <InputFile OnChange="LoadFiles" class="form-control" id="customFile" accept="image/x-png,image/jpeg"></InputFile>
                }
                @if (filmCreateRequest.Poster != null)
                {
                    <div class="row">
                        <div class="col-md-12 pt-3">
                            <img src="@filmCreateRequest.Poster" alt="Film Image" class="img-thumbnail img-fluid" style="max-width: 100%; height: auto;">
                        </div>
                        <div class="col-md-12 pt-3">
                            <a type="button" class="btn btn-danger" @onclick="DeleteImage">Xóa ảnh</a>
                        </div>
                    </div>
                }
            </div>
        </div>
    </EditForm>
</div>
<style>
    .validation-message {
        color: red;
    }
</style>
@code {
    private FilmCreateRequest filmCreateRequest = new FilmCreateRequest();
    private List<ScreenTypeDto> screenTypes = new List<ScreenTypeDto>();
    private List<TranslationTypeDto> translationTypes = new List<TranslationTypeDto>();
    private string? _directoryPath { get; set; }
    private List<Guid> selectedScreenTypeIds = new List<Guid>();
    private List<Guid> selectedTranslationTypeId = new List<Guid>();

    protected override async Task OnInitializedAsync()
    {
        screenTypes = await ScreenTypeService.GetAllScreenTypes();
        translationTypes = await TranslationTypeService.GetAllTranslationTypes();
        // _directoryPath = Path.Combine(WebHostEnv.ContentRootPath, "img", "posterFilm");
    }

    private async Task HandleValidSubmit()
    {
        filmCreateRequest.ScreenTypeIds = selectedScreenTypeIds ;
        filmCreateRequest.TranslationTypeIds = selectedTranslationTypeId;
        await FilmService.CreateFilm(filmCreateRequest);
        await _JSRuntime.ToastrSuccess("Tạo thành công");
        NavigationManager.NavigateTo("/film");

    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        var file = e.File;
        FileInfo fileInfo = new(file.Name);
        var newFileName = $"{Guid.NewGuid()}{fileInfo.Extension}";
        if (!Directory.Exists(_directoryPath))
        {
            Directory.CreateDirectory(_directoryPath);
        }
        var path = Path.Combine(_directoryPath, newFileName);
        await using FileStream fs = new(path, FileMode.Create);
        await file.OpenReadStream(file.Size).CopyToAsync(fs);
        filmCreateRequest.Poster = $"/img/posterFilm/{newFileName}";
    }

    void DeleteImage()
    {
        if (filmCreateRequest.Poster == null)
        {
            return;
        }
        var fileToDelete = filmCreateRequest.Poster.Split('/').Reverse().First();
        var filePathToDeleteImage = Path.Combine(_directoryPath, fileToDelete);
        if (!File.Exists(filePathToDeleteImage))
        {
            filmCreateRequest.Poster = null;
            return;
        }
        File.Delete(filePathToDeleteImage);

        filmCreateRequest.Poster = null;
        return;
    }

    private void OnScreenTypeChanges(ChangeEventArgs e, Guid screenTypeId)
    {
        var isChecked = (bool)e.Value;
        if (isChecked)
        {
            if (!selectedScreenTypeIds.Contains(screenTypeId))
            {
                selectedScreenTypeIds.Add(screenTypeId);
            }
        }
        else
        {
            selectedScreenTypeIds.Remove(screenTypeId);
        }
    }
    private void OnTranslationTypeChanges(ChangeEventArgs e, Guid translationTypeId)
    {
        // Kiểm tra và chuyển đổi giá trị từ checkbox
        var isChecked = (bool)e.Value;

        if (isChecked)
        {
            if (!selectedTranslationTypeId.Contains(translationTypeId))
            {
                selectedTranslationTypeId.Add(translationTypeId);
            }
        }
        else
        {
            selectedTranslationTypeId.Remove(translationTypeId);
        }
    }
}
