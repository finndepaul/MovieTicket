@page "/showtime-update/{Id:guid}"
@using MovieTicket.Application.DataTransferObjs.Film
@using MovieTicket.Application.DataTransferObjs.Schedule
@using MovieTicket.Application.DataTransferObjs.ScreenType
@using MovieTicket.Application.DataTransferObjs.ShowTime
@using MovieTicket.Application.DataTransferObjs.TranslationType
@using WebUI.Services.Interfaces
@inject IFilmService FilmService
@inject IScreenTypeServices ScreenTypeService
@inject ITranslationTypeService TranslationTypeService
@inject IScheduelService ScheduelService
@inject IShowTimeService ShowTimeService
@inject IJSRuntime _IJSRuntime;

<EditForm Model="ShowTime" OnValidSubmit="HandleUpdateAsync">
	<DataAnnotationsValidator />
	<div class="mb-3">
		<label for="movieTitle" class="form-label">Phim chiếu</label>
		<select class="form-select" id="movieTitle" value="@selectedFilmId" @onchange="OnFilmChange">
			<option value="">Select a film</option>
			@foreach (var film in FilmValidate)
			{
				<option value="@film.Id" selected="@(film.Id == ShowTime.FilmId ? true : false)">@film.Name</option>
			}
		</select>
		<ValidationMessage For="@(() => ShowTime.FilmId)" class="text-danger" />
	</div>

	<div class="mb-3">
		<label for="screeningDate" class="form-label">Ngày chiếu</label>
		<input type="date" class="form-control" id="screeningDate" @bind="@Date" disabled />
	</div>

	<div class="mb-3">
		<label for="format" class="form-label">Hình thức chiếu</label>
		<select class="form-select" id="format" @bind="ShowTime.ScreenTypeId">
			<option value="">Select a screen type</option>
			@foreach (var item in ScreenTypeValidate)
			{
				<option value="@item.Id" selected="@(item.Id == ShowTime.ScreenTypeId ? true : false)">@item.Type</option>
			}
		</select>
		@if (!string.IsNullOrEmpty(screenTypeErrorMessage))
		{
			<small class="text-danger">@screenTypeErrorMessage</small>
		}
		<ValidationMessage For="@(() => ShowTime.ScreenTypeId)" class="text-danger" />
	</div>

	<div class="mb-3">
		<label for="translationType" class="form-label">Hình thức dịch</label>
		<select class="form-select" id="translationType" @bind="ShowTime.TranslationTypeId">
			<option value="">Select a translation type</option>
			@foreach (var item in TranslationTypeValidate)
			{
				<option value="@item.Id" selected="@(item.Id == ShowTime.TranslationTypeId ? true : false)">@item.Type</option>
			}
		</select>
		<ValidationMessage For="@(() => ShowTime.TranslationTypeId)" class="text-danger" />
	</div>

	<div class="mb-3">
		<label for="screeningTime" class="form-label">Thời gian chiếu</label>
		<div class="row">
			<div class="col">
				<input type="time" class="form-control" id="startTime" value="@startTimeValue" @onchange="OnStartTime" />
				<ValidationMessage For="@(() => ShowTime.StartTime)" class="text-danger" />
			</div>
			<div class="col">
				<input type="time" class="form-control" id="endTime" @bind="ShowTime.EndTime" disabled />
				<ValidationMessage For="@(() => ShowTime.EndTime)" class="text-danger" />
			</div>
		</div>
	</div>

	<div class="modal-footer">
		<button type="submit" class="btn btn-primary">Update suất chiếu</button>
	</div>
</EditForm>

@code {
	[Parameter] public string Id { get; set; }
	[Parameter] public Guid? CinemaCenterId { get; set; }
	[Parameter] public Guid? CinemaId { get; set; }
	[Parameter] public DateTime Date { get; set; }
	[Parameter] public EventCallback<(Guid CinemaCenterId, Guid CinemaId, DateTime ShowtimeDate)> OnUpdateSuccess { get; set; }
	private IEnumerable<FilmDto> Films = new List<FilmDto>();
	private IEnumerable<FilmDto> FilmValidate = new List<FilmDto>();
	private ShowTimeUpdateRequest ShowTime = new ShowTimeUpdateRequest();
	private ShowTimeDto _ShowTimeDto = new ShowTimeDto();
	private List<ScreenTypeDto> ScreenTypeDtos = new List<ScreenTypeDto>();
	private List<ScreenTypeDto> ScreenTypeValidate = new List<ScreenTypeDto>();
	private List<TranslationTypeDto> TranslationTypeDtos = new List<TranslationTypeDto>();
	private List<TranslationTypeDto> TranslationTypeValidate = new List<TranslationTypeDto>();
	private IEnumerable<ScheduleDto> scheduleDtos = new List<ScheduleDto>();
	public Guid idFilm;
	private CinemaTypeDto cinemaTypes;
	private CinemaDto cinemas;
	private string selectedFilmId = "";
	private string startTimeValue = "";
	private string screenTypeErrorMessage = "";
	protected override async Task OnParametersSetAsync()
	{
		if (!string.IsNullOrEmpty(Id))
		{
			var response = await ShowTimeService.GetById(Guid.Parse(Id));
			if (response != null && response.Data != null)
			{
				_ShowTimeDto = response.Data;
				ShowTime.Id = _ShowTimeDto.Id;
				ShowTime.ScheduleId = _ShowTimeDto.ScheduleId;
				ShowTime.CinemaId = _ShowTimeDto.CinemaId;
				ShowTime.ScreenTypeId = _ShowTimeDto.ScreenTypeId;
				ShowTime.TranslationTypeId = _ShowTimeDto.TranslationTypeId;
				ShowTime.StartTime = _ShowTimeDto.StartTime.Value;
				ShowTime.EndTime = _ShowTimeDto.EndTime.Value;
				ShowTime.FilmId = _ShowTimeDto.FilmId;
				ShowTime.ShowtimeDate = Date;
				ShowTime.Status = _ShowTimeDto.Status;

				// Thiết lập selectedFilmId
				selectedFilmId = ShowTime.FilmId.ToString();
				startTimeValue = _ShowTimeDto.StartTime.HasValue?_ShowTimeDto.StartTime.Value.ToString("HH:mm"): "";

				// Cập nhật danh sách ScreenType và TranslationType
				var selectedFilm = Films.FirstOrDefault(f => f.Id == ShowTime.FilmId);
				if (selectedFilm != null)
				{
					ScreenTypeValidate = selectedFilm.ScreenTypeDtos.ToList();
					TranslationTypeValidate = selectedFilm.TranslationTypeDtos.ToList();
				}
				var result = await CinemaService.GetCinemaById(CinemaId.Value);
				cinemas = result.Data;
				var cinemaTypeDtosData = await CinemaTypeService.GetListCinemaTypesAsync();
				cinemaTypes = cinemaTypeDtosData.FirstOrDefault(x => x.Id == cinemas.CinemaTypeId);
				var schedule = scheduleDtos.FirstOrDefault(x => x.FilmId == ShowTime.FilmId);
				ScreenTypeValidate.Clear();
				TranslationTypeValidate.Clear();

				if (Films.Any())
				{
					var film = Films.FirstOrDefault(x => x.Id == ShowTime.FilmId);
					if (film != null)
					{
						// Danh sách hình thức chiếu phù hợp với loại phòng chiếu
						var lstScreenTypeValidate = film.ScreenTypeDtos
							.Where(x =>
								x.Type == cinemaTypes.Name || // Hình thức chiếu giống loại phòng chiếu
								((cinemaTypes.Name == "Premium Class" || cinemaTypes.Name == "Gold Class") && x.Type == "2D") // Điều kiện loại phòng đặc biệt
							).ToList();
						TranslationTypeValidate = film.TranslationTypeDtos.ToList();
						ScreenTypeValidate = lstScreenTypeValidate;
					}
				}
				if (schedule != null)
				{
					ShowTime.ScheduleId = schedule.Id;
				}
			}
		}
	}


	protected override async Task OnInitializedAsync()
	{
		Films = await FilmService.GetAllFilms();
		scheduleDtos = await ScheduelService.GetAllAsync();
		ScreenTypeDtos = await ScreenTypeService.GetAllScreenTypes();
		TranslationTypeDtos = await TranslationTypeService.GetAllTranslationTypes();

		FilmValidate = from film in Films
								join schedule in scheduleDtos on film.Id equals schedule.FilmId
								where (schedule.StartDate.Date <= Date && Date <= schedule.EndDate)
								select film;
	}

	public void ResetForm()
	{
		idFilm = Guid.Empty;
		ShowTime = new ShowTimeUpdateRequest();
		selectedFilmId = "";
		startTimeValue = "";

	}
	private async Task OnFilmChange(ChangeEventArgs e)
	{
		selectedFilmId = e.Value?.ToString();

		// Reset các trường khi chọn phim mới
		ShowTime.FilmId = Guid.Empty;
		ShowTime.ScreenTypeId = null;
		ShowTime.TranslationTypeId = null;
		ScreenTypeValidate.Clear();
		TranslationTypeValidate.Clear();

		if (Guid.TryParse(selectedFilmId, out Guid filmId))
		{
			ShowTime.FilmId = filmId;
			idFilm = filmId;

			// Lấy thông tin lịch chiếu của phim
			var schedule = scheduleDtos.FirstOrDefault(x => x.FilmId == filmId);
			if (schedule != null)
			{
				ShowTime.ScheduleId = schedule.Id;
			}

			// Lấy thông tin phim
			var film = Films.FirstOrDefault(x => x.Id == filmId);
			if (film != null)
			{
				// Xác định danh sách ScreenType và TranslationType phù hợp
				var lstScreenTypeValidate = film.ScreenTypeDtos
					.Where(x =>
						x.Type == cinemaTypes.Name || // Hình thức chiếu giống loại phòng chiếu
						((cinemaTypes.Name == "Premium Class" || cinemaTypes.Name == "Gold Class") && x.Type == "2D") // Điều kiện loại phòng đặc biệt
					).ToList();

				// Kiểm tra xem có hình thức chiếu nào phù hợp không
				if (lstScreenTypeValidate.Any())
				{
					// Nếu có hình thức chiếu phù hợp, cập nhật danh sách
					ScreenTypeValidate = lstScreenTypeValidate;
					TranslationTypeValidate = film.TranslationTypeDtos.ToList();
					screenTypeErrorMessage = "";
				}
				else
				{
					// Nếu không có hình thức chiếu phù hợp, thông báo cho người dùng
					screenTypeErrorMessage = "Phim không có hình thức chiếu nào phù hợp.";
					ShowTime.ScreenTypeId = null;
					ShowTime.TranslationTypeId = null;
					ScreenTypeValidate.Clear();
					TranslationTypeValidate.Clear();
				}
			}
		}

		StateHasChanged(); // Cập nhật giao diện
	}

	private async Task OnStartTime(ChangeEventArgs e)
	{
		startTimeValue = e.Value?.ToString() ?? string.Empty;

		if (TimeSpan.TryParse(startTimeValue, out TimeSpan time))
		{
			ShowTime.StartTime = Date.Date + time;

			int runningTime = Films.FirstOrDefault(x => x.Id == ShowTime.FilmId)?.RunningTime ?? 0;
			ShowTime.EndTime = ShowTime.StartTime.Value.AddMinutes(runningTime);
		}

		StateHasChanged(); // Làm mới giao diện
	}

	private async Task HandleUpdateAsync()
	{
		var result = await ShowTimeService.Update(ShowTime);

		if (result.Status == 200)
		{
			await _IJSRuntime.ToastrSuccess(result.Message);
			await OnUpdateSuccess.InvokeAsync((CinemaCenterId.Value, CinemaId.Value, ShowTime.ShowtimeDate.Value));
			ResetForm();
			StateHasChanged();
		}
		else
		{
			await _IJSRuntime.ToastrError(result.Message);
		}
	}
}
