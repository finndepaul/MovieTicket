@page "/seat/{id:guid}"
@attribute [Authorize(Roles = "Admin")]

@if(seatTypes.Count > 0 && seat != null)
{
    <div class="container-input">
        <EditForm Model="request" OnValidSubmit="UpdateSeat">
            <DataAnnotationsValidator />

            <div class="input-group mt-3">
                <label class="input-group-text" for="CinemaCenterName">Rạp</label>
                <input type="text" value="@seat.Data.CinemaCenterName" id="CinemaCenterName" class="form-control" disabled />
            </div>

            <div class="input-group mt-3">
                <label class="input-group-text" for="CinemaName">Phòng chiếu</label>
                <input type="text" value="@seat.Data.CinemaName" id="CinemaName" class="form-control" disabled />
            </div>

            <div class="input-group mt-3">
                <label class="input-group-text" for="SeatType">Loại ghế</label>
                <div id="SeatType" class="form-control">
                    @foreach (var type in seatTypes)
                    {
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="radio" name="seatType" id="@type.Name" checked="@(seat.Data.SeatTypeName == type.Name)" @onchange="@(()=> request.SeatTypeId = type.Id.ToString())" />
                            <label class="form-check-label" for="@type.Name">@type.Name</label>
                        </div>
                    }
                </div>
            </div>

            <div class="input-group mt-3">
                <label class="input-group-text" for="Position">Vị trí</label>
                <input type="text" value="@seat.Data.Position" id="Position" class="form-control" disabled />
            </div>
            
            <div class="input-group mt-3">
                <label class="input-group-text" for="SeatStatus">Trạng thái ghế</label>
                <div id="SeatStatus" class="form-control">
                    @foreach (SeatStatus status in Enum.GetValues(typeof(SeatStatus)).Cast<SeatStatus>())
                    {
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="radio" name="seatStatus" id="@status" checked="@(seat.Data.Status == status)" @onchange="@(()=> request.Status = status)"/>
                            <label class="form-check-label" for="@status">@status</label>
                        </div>
                    }
                </div>
            </div>

            <div class="my-3 d-flex justify-content-center">
                <input type="submit" class="btn btn-success" value="Sửa" />
            </div>
        </EditForm>
    </div>
}
else
{
    <h3>Loading...</h3>
}

@code {
    [Parameter] 
    public Guid SeatId { get; set; }
    [Parameter]
    public EventCallback<string> OnSeatUpdated { get; set; }

    private ResponseObject<SeatDTO> seat { get; set; } = new();
    private SeatUpdateRequest request { get; set; } = new();
    private List<SeatTypeDto> seatTypes = new();
    public string SelectedValue { get; set; } = "";

    protected override async Task OnParametersSetAsync()
    {
        if(SeatId != Guid.Empty)
        {   
            seatTypes = await SeatTypeService.GetListSeatTypesAsync();
            seat = await SeatService.GetById(SeatId);
            request.Id = SeatId;
            request.SeatTypeId = seatTypes.FirstOrDefault(x => x.Name == seat.Data.SeatTypeName).Id.ToString();
            request.Status = seat.Data.Status;
        }
    }

    public void ResetForm()
    {   
        request = new SeatUpdateRequest();
    }

    private async Task UpdateSeat()
    {
        var response = await SeatService.Update(request);
        await Task.Delay(100);
        if (response.Status == StatusCodes.Status200OK)
        {
            await JSRuntime.InvokeVoidAsync("alert", response.Message);
            await OnSeatUpdated.InvokeAsync();
        }
        else
        {   
            await JSRuntime.InvokeVoidAsync("alert", response.Message);
            return;
        }
    }
}