@page "/bill-staff/detail/{Id}"
@using BarcodeStandard
@using System.Drawing
@using MovieTicket.Application.DataTransferObjs.Account
@using MovieTicket.Application.DataTransferObjs.Bill
@using MovieTicket.Application.DataTransferObjs.BillCombo
@using MovieTicket.Application.DataTransferObjs.Ticket
@using System.Text;
@using System.Globalization
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
@layout WebUI.Layout.StaffLayout
@attribute [Authorize(Roles = "Staff")]
<div class="container-fluid">
	<div class="mb-2">
		<NavLink @onclick="GoToListBill" class="btn btn-secondary opacity-50"><i class="bi bi-arrow-bar-left"></i> Quay lại</NavLink>
	</div>
	<div class="row">
		<!-- Thông tin đơn hàng -->
		<div class="col-md-6 mb-3">
			<div class="row">
				@if (objBill != null && objShowTime != null)
				{
					<div class="col-md-6 mb-3">
						<div class="py-2 mb-4 border-bottom">
							<h5>Thông tin đơn hàng</h5>
						</div>
						<div><strong class="me-2">Phim:</strong><span class="text-primary">@objShowTime?.FilmName</span></div>
						<p><strong class="me-2">Giờ chiếu:</strong><span class="badge bg-danger"> @(objShowTime?.StartTime?.ToString("HH:mm")) - @(objShowTime?.EndTime?.ToString("HH:mm"))</span></p>
						<p><strong>Ngày chiếu:</strong> @(objShowTime?.ShowtimeDate?.ToString("dd/MM/yyyy"))</p>
						<p><strong>Phòng chiếu:</strong> @objShowTime?.CinemaName</p>
						<p><strong class="me-2">Rạp chiếu:</strong><span class="text-primary"> @objShowTime?.CinemaCenterName</span></p>
						<p><strong>Ngày đặt:</strong> @(objBill?.CreateTime?.ToString("dd/MM/yyyy"))</p>
					</div>

					<!-- Thông tin khách hàng -->
					<div class="col-md-6 mb-3">
						<div class="py-2 mb-4 border-bottom">
							<h5>Thông tin khách hàng</h5>
						</div>
						<p><strong>Khách hàng:</strong> @(objAccount?.Name)</p>
						<p><strong>Điện thoại:</strong> @(objAccount?.Phone)</p>
						<p><strong>Email:</strong> @(objAccount?.Email)</p>
						<p><strong class="me-2">Trạng thái:</strong><span class="badge bg-success"> @objBill?.Status</span></p>
						<p><strong>Thành tiền:</strong> @(objBill?.TotalMoney?.ToString("#,##0"))</p>
						<p><strong>Giảm giá:</strong> @((objBill?.TotalMoney - objBill?.AfterDiscount)?.ToString("#,##0"))</p>
						<p><strong>Tổng tiền:</strong> @(objBill?.AfterDiscount?.ToString("#,##0"))</p>
					</div>
				}
				else
				{
					<p>Không có dữ liệu</p>
				}

			</div>
			<div class="d-flex justify-content-center border" style="width:100%">
				<div class="border border-5 border-black rounded-4 p-1"  style="width:50%">
					@if (BarcodeImage != null)
					{
						<img src="@BarcodeImage" style="width:100%" height="200" class="object-fit-contain" />
					}
					<p class="text-center fw-bold" style="font-family:Arial">@objBill.BarCode</p>
					
				</div>
				
			</div>
		</div>


		<!-- Ghế & Dịch vụ -->
		<div class="col-md-6 mb-3">
			<div class="py-2 mb-3 border-bottom">
				<h5>Ghế & Dịch vụ</h5>
			</div>
			<!-- Thông tin ghế -->
			<table class="table align-middle mb-5">
				<thead class="table-secondary">
					<tr>
						<th>Thông tin ghế</th>
						<th>Loại ghế</th>
						<th>Giá tiền</th>
					</tr>
				</thead>
				<tbody>
					@if (lstSeat.Count > 0)
					{
						@foreach (var item in lstSeat)
						{
							<tr>
								<td>@item.SeatName</td>
								<td><span class="p-2 m-2 badge text-@(FormatSeatTypeName(@item.SeatType)) bg-@(FormatSeatTypeName(@item.SeatType)) bg-opacity-10 border border-@(FormatSeatTypeName(@item.SeatType))">@item.SeatType</span></td>
								<td>@item.Price.ToString("#,##0") VND</td>
							</tr>
						}

					}
					else
					{
						<tr>
							<td colspan="3">Không có dữ liệu</td>
						</tr>
					}
				</tbody>
			</table>

			<!-- Dịch vụ -->
			<table class="table align-middle">
				<thead class="table-secondary">
					<tr>
						<th>Tên dịch vụ</th>
						<th>Số lượng</th>
						<th>Đơn giá</th>
						<th>Tổng tiền</th>
					</tr>
				</thead>
				<tbody>
					@if (lstBillCombo.Count > 0)
					{
						@foreach (var item in lstBillCombo)
						{
							<tr>
								<td>@item.ComboName</td>
								<td>@item.Quantity</td>
								<td>@item.Price.Value.ToString("#,##0") VND</td>
								<td>@item.TotalPrice.Value.ToString("#,##0") VND</td>
							</tr>
						}
					}
					else
					{
						<tr>
							<td colspan="4">Không có dữ liệu</td>
						</tr>
					}


				</tbody>
			</table>
		</div>
	</div>
	<div class="d-flex justify-content-end me-4">
        @if (objBill.Status == BillStatus.Paid.ToString())
        {
			<button class="btn btn-warning p-2" @onclick="BillPrint"><i class="bi bi-printer"></i>In hóa đơn</button>
		}
		else if (objBill.Status == BillStatus.Pending.ToString())
		{
			<button class="btn btn-warning p-2 me-3" @onclick="BillPendingPrint"><i class="bi bi-printer"></i>In vé chờ</button>
			<button class="btn btn-success text-light fs-5" style="padding:10px;width:150px;" @onclick="Checkout">Thanh toán<i class="bi bi-chevron-right m-0"></i></button>
		}
		
	</div>
</div>
<script type="text/javascript">
	// Base64 font Roboto (thay the bang ma Base64 chinh thuc cua ban)
	window.robotoFontBase64 = "AAEAAAASAQAABAAgR0RFRrRCsIIAAEAAAAXAAAA..."; // Gia tri Base64 thuc cua font Roboto

	window.generatePdf = function(pdfContentJson) {
	  var pdfContent = JSON.parse(pdfContentJson);
	  var { jsPDF } = window.jspdf;

	  if (!jsPDF) {
		console.error("jsPDF library is not loaded.");
		return;
	  }

	  var doc = new jsPDF();

	  // Them font va cai dat font
	  doc.addFileToVFS("Roboto-Regular.ttf", window.robotoFontBase64);  // Dam bao ban co Base64 dung
	  doc.addFont("Roboto-Regular.ttf", "Roboto", "normal");
	  doc.setFont("Roboto", "normal");

	  // Tieu de
	  doc.setFontSize(18);
	  doc.setFont("Roboto", "bold");
	  doc.text("VE XEM PHIM", 105, 15, { align: "center" });

	  // Phu de voi ten phim
	  doc.setFontSize(14);
	  doc.text(`Phim: ${pdfContent.FilmName}`, 105, 25, { align: "center" });

	  // Ve duong phan cach
	  doc.line(10, 30, 200, 30);

	  // Phan chi tiet
	  doc.setFontSize(12);
	  doc.setFont("Roboto", "normal");
	  doc.text(`Ngay chieu: ${pdfContent.ShowDate}`, 10, 40);
	  doc.text(`Gio chieu: ${pdfContent.Showtime}`, 10, 50);
	  doc.text(`Phong chieu: ${pdfContent.Cinema}`, 10, 60);
	  doc.text(`Rap chieu: ${pdfContent.CinemaCenter}`, 10, 70);

	  // Thong tin ghe ngoi
	  doc.text("Thong tin ghe:", 10, 80);
	  let yPosition = 90;
	  if (pdfContent.Seats && pdfContent.Seats.length > 0) {
		pdfContent.Seats.split(" ").forEach((seat) => {
		  doc.text(`- Ghe: ${seat}`, 15, yPosition);
		  yPosition += 10;
		});
	  } else {
		doc.text("Khong co thong tin ghe.", 15, yPosition);
		yPosition += 10;
	  }

	  // Chi tiet gia tien
	  doc.text(`Thanh tien: ${pdfContent.TotalMoney} VND`, 10, yPosition);
	  yPosition += 10;
	  doc.text(`Giam gia: ${pdfContent.Discount} VND`, 10, yPosition);
	  yPosition += 10;
	  doc.text(`Tong tien: ${pdfContent.AfterDiscount} VND`, 10, yPosition);

	// Footer với mã vạch (nếu có)
	if (pdfContent.BarcodeImage) {
		const leftMargin = 10;
		yPosition += 10;
		doc.text("Ma vach:", leftMargin, yPosition);
		yPosition += 10;
		try {
			if (pdfContent.BarcodeImage.startsWith("data:image/png;base64,")) {
				doc.addImage(pdfContent.BarcodeImage, "PNG", leftMargin, yPosition, 50, 20);
				yPosition += 25;
				doc.setFontSize(12);
				doc.text(pdfContent.BarcodeNumber, leftMargin, yPosition); // x = leftMargin
			} else {
				console.error("Barcode image is not a valid Base64 PNG.");
				doc.text("Lỗi: Mã vạch không hợp lệ.", leftMargin, yPosition);
			}
		} catch (error) {
			console.error("Error adding barcode image:", error);
			doc.text("Lỗi: Không thể thêm mã vạch.", leftMargin, yPosition);
		}
	}

	  // Luu hoac in
	  var iframe = document.createElement('iframe');
	  iframe.style.position = 'fixed';
	  iframe.style.width = '1px';
	  iframe.style.height = '1px';
	  iframe.style.opacity = '0.01';
	  document.body.appendChild(iframe);

	  iframe.src = doc.output('bloburl');
	  iframe.onload = function() {
		iframe.contentWindow.focus();
		iframe.contentWindow.print();
	  };
	};

	window.generatePendingPdf = function(pdfContentJson) {
	  var pdfContent = JSON.parse(pdfContentJson);
	  var { jsPDF } = window.jspdf;

	  if (!jsPDF) {
		console.error("jsPDF library is not loaded.");
		return;
	  }

	  var doc = new jsPDF();

	  // Them font va cai dat font
	  doc.addFileToVFS("Roboto-Regular.ttf", window.robotoFontBase64);  // Dam bao ban co Base64 dung
	  doc.addFont("Roboto-Regular.ttf", "Roboto", "normal");
	  doc.setFont("Roboto", "normal");

	  // Tieu de
	  doc.setFontSize(18);
	  doc.setFont("Roboto", "bold");
	  doc.text("VE CHO THANH TOAN", 105, 15, { align: "center" });

	  // Phu de voi ten phim
	  doc.setFontSize(14);
	  doc.text(`Phim: ${pdfContent.FilmName}`, 105, 25, { align: "center" });

	  // Ve duong phan cach
	  doc.line(10, 30, 200, 30);

	  // Phan chi tiet
	  doc.setFontSize(12);
	  doc.setFont("Roboto", "normal");
	  doc.text(`Ngay chieu: ${pdfContent.ShowDate}`, 10, 40);
	  doc.text(`Gio chieu: ${pdfContent.Showtime}`, 10, 50);
	  doc.text(`Phong chieu: ${pdfContent.Cinema}`, 10, 60);
	  doc.text(`Rap chieu: ${pdfContent.CinemaCenter}`, 10, 70);

	  // Thong tin ghe ngoi
	  doc.text("Thong tin ghe:", 10, 80);
	  let yPosition = 90;
	  if (pdfContent.Seats && pdfContent.Seats.length > 0) {
		pdfContent.Seats.split(" ").forEach((seat) => {
		  doc.text(`- Ghe: ${seat}`, 15, yPosition);
		  yPosition += 10;
		});
	  } else {
		doc.text("Khong co thong tin ghe.", 15, yPosition);
		yPosition += 10;
	  }

	  // Chi tiet gia tien
	  doc.text(`Thanh tien: ${pdfContent.TotalMoney} VND`, 10, yPosition);
	  yPosition += 10;
	  doc.text(`Giam gia: ${pdfContent.Discount} VND`, 10, yPosition);
	  yPosition += 10;
	  doc.text(`Tong tien: ${pdfContent.AfterDiscount} VND`, 10, yPosition);

	// Footer với mã vạch (nếu có)
	if (pdfContent.BarcodeImage) {
		const leftMargin = 10;
		yPosition += 10;
		doc.text("Ma vach:", leftMargin, yPosition);
		yPosition += 10;
		try {
			if (pdfContent.BarcodeImage.startsWith("data:image/png;base64,")) {
				doc.addImage(pdfContent.BarcodeImage, "PNG", leftMargin, yPosition, 50, 20);
				yPosition += 25;
				doc.setFontSize(12);
				doc.text(pdfContent.BarcodeNumber, leftMargin, yPosition); // x = leftMargin
			} else {
				console.error("Barcode image is not a valid Base64 PNG.");
				doc.text("Lỗi: Mã vạch không hợp lệ.", leftMargin, yPosition);
			}
		} catch (error) {
			console.error("Error adding barcode image:", error);
			doc.text("Lỗi: Không thể thêm mã vạch.", leftMargin, yPosition);
		}
	}

	  // Luu hoac in
	  var iframe = document.createElement('iframe');
	  iframe.style.position = 'fixed';
	  iframe.style.width = '1px';
	  iframe.style.height = '1px';
	  iframe.style.opacity = '0.01';
	  document.body.appendChild(iframe);

	  iframe.src = doc.output('bloburl');
	  iframe.onload = function() {
		iframe.contentWindow.focus();
		iframe.contentWindow.print();
	  };
	};
</script>

@code {
	[Parameter] public string Id { get; set; }
	private List<TicketDto> lstTicket = new List<TicketDto>();
	private TicketDto objTicket = new TicketDto();
	private ShowTimeDto objShowTime = new ShowTimeDto();
	private class BillSeat
	{
		public string SeatName { get; set; }
		public string SeatType { get; set; }
		public decimal Price { get; set; }
	}
	private class SeatPrice
	{
		public Guid SeatId { get; set; }
		public decimal Price { get; set; }
	}
	private List<BillComboDto> lstBillCombo = new List<BillComboDto>();
	private List<BillSeat> lstSeat = new List<BillSeat>();
	private List<SeatPrice> lstSeatId = new List<SeatPrice>();
	private BillDetailDto objBill = new BillDetailDto();
	private AccountDto objAccount = new AccountDto();
	private string BarcodeImage;
	private GeneratorBarcode generatorBarcode = new GeneratorBarcode();

	private class BillContent
	{
		public string FilmName { get; set; }
		public string Showtime { get; set; }
		public string ShowDate { get; set; }
		public string Cinema { get; set; }
		public string CinemaCenter { get; set; }
		public string CustomerName { get; set; }
		public string CustomerPhone { get; set; }
		public string CustomerEmail { get; set; }
		public string Seats { get; set; }
		public string Combos { get; set; }
		public string TotalMoney { get; set; }
		public string Discount { get; set; }
		public string AfterDiscount { get; set; }
		public string BarcodeImage { get; set; }
		public string BarcodeNumber { get; set; }
	}

	private class BillPendingContent
	{
		public string FilmName { get; set; }
		public string Showtime { get; set; }
		public string ShowDate { get; set; }
		public string Cinema { get; set; }
		public string CinemaCenter { get; set; }
		public string Seats { get; set; }
		public string Combos { get; set; }
		public string TotalMoney { get; set; }
		public string Discount { get; set; }
		public string AfterDiscount { get; set; }
		public string BarcodeImage { get; set; }
		public string BarcodeNumber { get; set; }
	}


	protected async override Task OnParametersSetAsync()
	{
		if (!String.IsNullOrEmpty(Id))
		{
			//lay bill theo id
			objBill = await BillService.GetBillByIdAsync(Guid.Parse(Id));
			if (objBill.MembershipId.HasValue)
			{

				objAccount = await AccountService.GetByIdAsync(objBill.UserAcountId.Value);
			}
			else
			{
				objAccount = await AccountService.GetByIdAsync(objBill.AccountId.Value);
			}
			//lay list ticket theo bill id
			lstTicket = await TicketService.GetListTicketByBillIdAsync(Guid.Parse(Id));
			//lay 1 ticket dau tien cua bill id do
			objTicket = lstTicket.FirstOrDefault(x => x.BillId == Guid.Parse(Id));
			//lay showtimeid cua ticket
			var showtimeId = objTicket.ShowTimeId.Value;
			//tim showtime theo id
			var findShowtime = await ShowTimeService.GetById(showtimeId);
			//lay showtime
			objShowTime = findShowtime.Data;
			lstSeatId = lstTicket.Select(x => new SeatPrice
				{
					SeatId = x.SeatId.Value,
					Price = x.Price
				}).ToList();
			foreach (var item in lstSeatId)
			{
				var obj = await SeatService.GetById(item.SeatId);
				var seat = obj.Data;
				lstSeat.Add(new BillSeat
					{
						SeatType = seat.SeatTypeName,
						SeatName = seat.Position,
						Price = item.Price
					});
			}
			lstBillCombo = await BillComboService.GetListBillComboByBillId(Guid.Parse(Id));
			BarcodeImage = generatorBarcode.GenerateBarcode(long.Parse(objBill.BarCode));

		}


	}
	private string FormatSeatTypeName(string type)
	{
		return type switch
		{
			"Normal" => "secondary",
			"VIP" => "warning",
			"Couple" => "danger",
			_ => "Không xác định"
		};
	}

    private async Task Checkout()
    {
        if (objBill.Status == BillStatus.Paid.ToString())
        {
            await JSRuntime.InvokeAsync<string>("alert", "Đơn hàng đã được thanh toán");
        }
        else
        {

            NavigationManager.NavigateTo($"/checkout-offline/detail/{Id}", true);
        }
    }
	private void GoToListBill()
	{
		NavigationManager.NavigateTo($"/offline-counter?tab=bill");
	}

	private async Task BillPrint()
	{
			foreach (var seat in lstSeat)
			{
				var pdfContent = new BillContent
					{
						FilmName = RemoveDiacritics(objShowTime.FilmName),
						Showtime = $"{objShowTime?.StartTime?.ToString("HH:mm")} - {objShowTime?.EndTime?.ToString("HH:mm")}",
						ShowDate = objShowTime?.ShowtimeDate?.ToString("dd/MM/yyyy"),
						Cinema = RemoveDiacritics(objShowTime?.CinemaName),
						CinemaCenter = RemoveDiacritics(objShowTime?.CinemaCenterName),
						CustomerName = RemoveDiacritics(objAccount?.Name),
						CustomerPhone = objAccount?.Phone,
						CustomerEmail = objAccount?.Email,
						Seats = RemoveDiacritics(seat.SeatName),
						TotalMoney = seat.Price.ToString("#,##0"),
						Discount = "0",
						AfterDiscount = seat.Price.ToString("#,##0"),
						BarcodeImage = BarcodeImage,
						BarcodeNumber = objBill.BarCode
					};
				var pdfContentJson = System.Text.Json.JsonSerializer.Serialize(pdfContent);
				// Gọi hàm JavaScript để tạo PDF
				await JSRuntime.InvokeVoidAsync("generatePdf", pdfContentJson);
			}
	}

	public static string RemoveDiacritics(string text)
	{
		var normalizedString = text.Normalize(NormalizationForm.FormD);
		var stringBuilder = new StringBuilder();

		foreach (var character in normalizedString)
		{
			var unicodeCategory = CharUnicodeInfo.GetUnicodeCategory(character);
			if (unicodeCategory != UnicodeCategory.NonSpacingMark)
			{
				stringBuilder.Append(character);
			}
		}

		return stringBuilder.ToString().Normalize(NormalizationForm.FormC);
	}

    private async Task BillPendingPrint()
    {
		foreach (var seat in lstSeat)
		{
			var pdfContent = new BillPendingContent
				{
					FilmName = RemoveDiacritics(objShowTime.FilmName),
					Showtime = $"{objShowTime?.StartTime?.ToString("HH:mm")} - {objShowTime?.EndTime?.ToString("HH:mm")}",
					ShowDate = objShowTime?.ShowtimeDate?.ToString("dd/MM/yyyy"),
					Cinema = RemoveDiacritics(objShowTime?.CinemaName),
					CinemaCenter = RemoveDiacritics(objShowTime?.CinemaCenterName),
					Seats = RemoveDiacritics(seat.SeatName),
					TotalMoney = seat.Price.ToString("#,##0"),
					Discount = "0",
					AfterDiscount = seat.Price.ToString("#,##0"),
					BarcodeImage = BarcodeImage,
					BarcodeNumber = objBill.BarCode
				};
			var pdfContentJson = System.Text.Json.JsonSerializer.Serialize(pdfContent);
			// Gọi hàm JavaScript để tạo PDF
			await JSRuntime.InvokeVoidAsync("generatePendingPdf", pdfContentJson);
		}
    }

}
