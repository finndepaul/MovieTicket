@page "/checkout-offline/detail/{id:guid}"
@using MovieTicket.Application.DataTransferObjs.Account
@using System.Text.RegularExpressions
@layout WebUI.Layout.StaffLayout

<style>
	body {
	background-color: #f8f8f8;
	}

	.payment-container {
	width: 80%;
	border: 1px solid #ddd;
	background-color: #fff;
	}

	.mem-search {
	width: 960px;
	margin: auto;
	}

	.container-payment {
	max-width: 1200px;
	margin: auto;
	background-color: #fff;
	}

	.payment-header {
	background-color: #333;
	color: #fff;
	padding: 15px;
	text-align: center;
	font-weight: bold;
	}

	.section-title {
	background-color: #e6e6e6;
	padding: 10px;
	font-weight: bold;
	}

	.btn-option {
	display: block;
	width: 100%;
	margin-bottom: 10px;
	text-align: left;
	padding: 10px;
	background-color: rgb(255, 241, 206);
	border: none;
	font-weight: 500;
	}

	.summary-box {
	background-color: #fffae5;
	padding: 15px;
	border: 1px solid #ddd;
	}

	.countdown-box {
	padding: 15px;
	border: 1px solid #ddd;
	text-align: center;
	}

	.total-amount {
	color: #d9534f;
	font-weight: bold;
	font-size: 1.2rem;
	}

	.form-check-input {
	margin-right: 10px;
	}

	.summary-container {
	max-width: 400px;
	margin: auto;
	background-color: #fdfbe8;
	border: 1px solid #ddd;
	padding: 15px;
	border-radius: 5px;
	}

	.summary-item {
	display: flex;
	justify-content: space-between;
	padding: 10px;
	background-color: #fff6e0;
	border: 1px solid #ddd;
	margin-bottom: 10px;
	font-size: 1rem;
	}

	.summary-item.red {
	background-color: #d9534f;
	color: #fff;
	font-weight: bold;
	text-align: center;
	}

	.countdown-container {
	text-align: center;
	background-color: #fdfbe8;
	padding: 15px;
	border-radius: 5px;
	}

	.countdown-box {
	display: inline-block;
	background-color: #d9d9d9;
	padding: 10px 15px;
	border-radius: 5px;
	margin: 5px;
	font-weight: bold;
	color: #d9534f;
	font-size: 1.5rem;
	}

	.countdown-title {
	font-size: 1rem;
	margin-bottom: 10px;
	font-weight: bold;
	}
</style>
<div class="memSearch">
	<div class="input-group mb-3">
		<input type="text" class="form-control" placeholder="Số điện thoại" aria-describedby="button-addon2" @bind-value="memPhone">
		<button class="btn btn-primary" type="button" @onclick="()=> SearchMembershipByPhone(memPhone)">Tìm kiếm</button>
	</div>
	@if (!String.IsNullOrEmpty(errorMessage))
	{
		<div class="alert alert-danger" role="alert">
			@errorMessage
		</div>
	}
</div>
<div class="d-flex container-payment p-3">
	<div class="payment-container">
		@if (accountDto != null)
		{
			<div class="memInfo">
				<div class="memName">
					<div>Thành viên: @accountDto.Name</div>
				</div>
				<div class="memPoint">
					<div>Điểm hiện tại: @CurrentPoints</div>
					<div></div>
				</div>
			</div>
			<div class="section-title d-flex justify-content-between">
				<div>GIẢM GIÁ</div>
				<button class="btn btn-secondary" @onclick="Reload">Đặt lại</button>
			</div>
			<div class="p-3">
				<!-- Phần mã giảm giá -->
				<div class="mb-3 btn-option pe-5">
					<label for="discountCode" class="form-label">Mã giảm giá:</label>
					<input type="text"
					class="form-control mb-3"
					id="discountCode"
					placeholder="Nhập mã giảm giá:"
					@bind-value="CouponCode"
					disabled="@IsVHDUsed">
					<button class="ms-2 btn btn-success" disabled="@IsVHDUsed" @onclick="UseDiscountCode">Xác nhận</button>
				</div>

				<!-- Phần điểm VHD -->
				<div class="mb-3 btn-option pe-5">
					<label for="vhdPoints" class="form-label">Điểm VHD:</label>
					<input type="number"
					class="form-control"
					id="vhdPoints"
					placeholder="Sử dụng điểm"
					@bind-value="VHDPoints"
					disabled="@IsDiscountCodeUsed">
					<div id="passwordHelpBlock" class="form-text ms-3">
						<p class="m-0 p-0">Điểm hiện tại: @CurrentPoints</p>
					</div>
					<button class="ms-2 btn btn-success" disabled="@IsDiscountCodeUsed" @onclick="UseVHDPoints">Xác nhận</button>
				</div>
			</div>
		}
		<!-- Bước 3: Hình thức thanh toán -->
		<div class="section-title">HÌNH THỨC THANH TOÁN</div>
		<div class="p-3">
			<div class="form-check">
				<input class="form-check-input" type="radio" name="payment" id="qr" value="qr" @onchange="HandlePaymentMethodChange" checked>
				<label class="form-check-label" for="vnpay">PayOS VHD</label>
			</div>
			<div class="form-check">
				<input class="form-check-input" type="radio" name="payment" id="cash" value="cash" @onchange="HandlePaymentMethodChange">
				<label class="form-check-label" for="cash">Tiền mặt</label>
			</div>
			@if (show)
			{
				<div class="mb-3 btn-option pe-5">
					<label for="vhdPoints" class="form-label">Khách đưa:</label>
					<input type="number"
					class="form-control"
					@bind-value="MoneyTake">
					<div id="passwordHelpBlock" class="form-text ms-3">
						<p class="m-0 p-0" style="font-size:20px">Trả lại: @MoneyReturn</p>
					</div>
					<button class="ms-2 btn btn-success" @onclick="ReturnChange">Xác nhận</button>
				</div>
				@if (!String.IsNullOrEmpty(errorMessage2))
				{
					<div class="alert alert-danger" role="alert">
						@errorMessage2
					</div>
				}
			}
		</div>
	</div>
</div>

<div class="container-fluid" style="width:100%;height:150px; background-color:#031529;color:#fff">
	<div class="row">
		@if (showtimeDto != null && cinemaDto != null)
		{
			<div class="col" style="width:40%">
				<div class="d-flex">
					<img src="@filmDto.Poster" class="object-fit-cover" style="width: 75px;height:110px" />
					<div class="ms-2">
						<span class="fw-bold">
							@showtimeDto.FilmName
						</span>
						<br />
						@showtimeDto.ScreenTypeName
						<br />
						@formatRating
					</div>
				</div>
			</div>
			<div class="col" style="width:20%">
				<label class="me-2">Rạp:</label>
				<span class="fw-bold">@showtimeDto.CinemaCenterName</span>
				<br />
				<label class="me-2">Phòng chiếu:</label>
				<span class="fw-bold">@cinemaDto.Name</span>
			</div>
			<div class="selectedSeats col" style="width:10%">
				<label class="me-2">Suất chiếu:</label>
				<br />
				<span class="fw-bold">@formatStartTime</span>

				<br />
				<label class="me-2">Ghế đã chọn:</label>
				<br />
				<span class="fw-bold">@SeatsSelectedstr</span>
			</div>
			<div class="ticketPrices col" style="width:5%">
				<label>Giá vé: </label>
				<br />
				<span class="fw-bold">@TotalTicket.ToString("#,##0") VND</span>
				<br />
				<label class="me-2">Phí dịch vụ:</label>
				<br />
				<span class="fw-bold">@TotalCombo.ToString("#,##0") VND</span>
			</div>
			<div class="ticketPrices col" style="width:5%">
				<label class="me-2">Giảm giá:</label>
				<br />
				<span class="fw-bold">@Discount.ToString("#,##0") VND</span>
				<br />
				<label class="me-2">Tổng tiền:</label>
				<br />
				<span class="fw-bold">@TotalMoney.ToString("#,##0") VND</span>
			</div>
		}
		<div class="col align-self-center text-end" style="width:10%;">
			<button class="btn btn-success text-light fs-5" style="padding:10px;width:150px;" @onclick="Checkout">Thanh toán<i class="bi bi-chevron-right m-0"></i></button>
		</div>
	</div>
</div>


@code {
	[Parameter] public Guid Id { get; set; }

	private string errorMessage = string.Empty;
	private string errorMessage2 = string.Empty;
	private string CouponCode { get; set; } = string.Empty;
	private int VHDPoints { get; set; } = 0;
	private int CurrentPoints { get; set; } // Ví dụ: điểm hiện tại là 100
	private bool IsDiscountCodeUsed { get; set; } = false;
	private bool IsVHDUsed { get; set; } = false;
	private bool memberCheck = true;
	private string SeatsSelectedstr = "";
	private Countdown? timer;
	private string memPhone { get; set; }
	private AccountDto accountDto { get; set; }
	private string selectedPaymentMethod;
	private decimal MoneyTake { get; set; }
	private decimal MoneyReturn { get; set; }
	private bool show = false;
	private ShowTimeDto showtimeDto = new();
	private CinemaDto cinemaDto { get; set; } = new();
	private FilmDto filmDto = new();
	private List<SeatTypeDto> seatTypeDtos = new();
	private string formatStartTime = "";
	private string formatRating = "";
	private CancellationToken cancellationToken;
	private BillDetailDto billDetailDto = new();
	private List<TicketDto> lstTicket = new();
    private List<TicketPriceDto> lstTicketPrices = new();
	private List<SeatDTO> seatDTOs = new();
	private decimal TotalMoney;
	private decimal TotalTicket;
	private string date = string.Empty;
	private decimal Discount;
	private decimal TotalCombo;
	private string SelectedMethod = "qr";
	private int Mempoint = 0;


	protected override async Task OnParametersSetAsync()
	{
		if (Id != Guid.Empty)
		{
			billDetailDto = await UserHomeService.GetBillForCheckOut(Id);
			lstTicket = await TicketService.GetListTicketByBillIdAsync(Id);
			var responseTicket = await TicketPriceService.GetAllAsync(new TicketPriceWithPaginationRequest(), new PagingParameters()
				{
					PageNumber = 1,
					PageSize = 180
				});
			lstTicketPrices = responseTicket.Item.ToList();
			if (lstTicket.Count > 0)
			{
				foreach (var item in lstTicket)
				{
					var result = await SeatService.GetById((Guid)item.SeatId);
					var seat = result.Data;
					seatDTOs.Add(seat);
				}
				var ticket = lstTicket.FirstOrDefault();
				var res = await ShowTimeService.GetById((Guid)ticket.ShowTimeId);
				showtimeDto = res.Data;
				date = showtimeDto.ShowtimeDate.Value.DayOfWeek.ToString();
                filmDto = await FilmService.GetById(showtimeDto.FilmId);
				formatRating = "T" + filmDto.Rating;
				formatStartTime = showtimeDto.StartTime.Value.ToString("HH:mm dd/MM");
                var cinemares = await CinemaService.GetCinemaById(showtimeDto.CinemaId);
                cinemaDto = cinemares.Data;
				TotalTicket = CalculateTotalTicket();
				if (seatDTOs.Count > 0)
				{
					foreach(var s in seatDTOs)
					{
						SeatsSelectedstr += s.Position + " ";
					}
				}
			}
			TotalMoney = (decimal)billDetailDto.AfterDiscount;
			Discount = (decimal)billDetailDto.TotalMoney - (decimal)billDetailDto.AfterDiscount;
            TotalCombo = (decimal)billDetailDto.TotalMoney - TotalTicket;
		}
	}

	private async void UseDiscountCode()
	{
		if (!string.IsNullOrEmpty(CouponCode))
		{
			var modal = await UserHomeService.AddDiscountToCheckAsync(new DiscountCheckRequest
				{
					BillId = Id,
					CouponCode = CouponCode,
					Point = null
				}, cancellationToken);
			if (modal != "Success")
			{
				await JSRuntime.ToastrError(modal);
			}
			else
			{
				IsDiscountCodeUsed = true;
				IsVHDUsed = false;
				memberCheck = false;
				Discount = await CalculateDiscount();
				await JSRuntime.ToastrSuccess("Áp dụng mã giảm giá thành công!");
				StateHasChanged();
			}
		}
	}

	// Xử lý khi nhấn nút xác nhận điểm VHD
	private async void UseVHDPoints()
	{
		var modal = await UserHomeService.AddDiscountToCheckAsync(new DiscountCheckRequest
			{
				BillId = Id,
				Point = VHDPoints,
				CouponCode = null,
			}, cancellationToken);
		if (modal != "Success")
		{
			await JSRuntime.ToastrError(modal);
		}
		else
		{
			IsVHDUsed = true;
			IsDiscountCodeUsed = false;
			memberCheck = false;
			Discount = await CalculateDiscount();
			await JSRuntime.ToastrSuccess("Áp dụng điểm thành công!");
            Mempoint = VHDPoints;
		}
		StateHasChanged();
	}
	private async void Reload()
	{
		var res = await UserHomeService.ResetDiscountAsync(Id, cancellationToken);
		if (res)
		{
			IsDiscountCodeUsed = false;
			IsVHDUsed = false;
			CouponCode = string.Empty;
			memberCheck = false;
			VHDPoints = 0;
			await JSRuntime.ToastrSuccess("Đặt lại thành công!");
			Discount = await CalculateDiscount();
		}
		else
		{
			await JSRuntime.ToastrError("Có lỗi xảy ra, vui lòng thử lại sau!");
		}
		StateHasChanged();
	}

	private async Task<decimal> CalculateDiscount()
	{
		var bill = await UserHomeService.GetBillForCheckOut(Id);
		return (decimal)(bill.AfterDiscount - bill.TotalMoney);
	}

	private async Task SearchMembershipByPhone(string phone)
	{
		errorMessage = string.Empty;
		if (string.IsNullOrEmpty(phone))
		{
			errorMessage = "Vui lòng nhập số điện thoại!";
			return;
		}
		if (!Regex.IsMatch(phone, @"^\d+$"))
		{
			errorMessage = "Số điện thoại chỉ được chứa chữ số!";
			return;
		}
		var listAccounts = await AccountService.GetAllAsync();
		var account = listAccounts.FirstOrDefault(x => x.Phone == phone);
		if (account == null)
		{
			errorMessage = "Không tìm thấy thành viên!";
			return;
		}
		else
		{
			accountDto = account;
			CurrentPoints = await UserHomeService.GetPointOfMembershipAsync(account.Id, cancellationToken);
			await UserHomeService.UpdateCheckMembershipIdAsync(Id, memPhone, cancellationToken);
		}
	}

	private async void ReturnChange()
	{
		errorMessage2 = string.Empty;
		if (MoneyTake < TotalMoney)
		{
			errorMessage2 = "Số tiền khách đưa không đủ!";
			return;
		}
		MoneyReturn = MoneyTake - TotalMoney;
		StateHasChanged();
	}

	private async void HandlePaymentMethodChange(ChangeEventArgs e)
	{
		selectedPaymentMethod = e.Value.ToString();
		if (selectedPaymentMethod == "qr")
		{
			show = false;
		}
		else if (selectedPaymentMethod == "cash")
		{
			show = true;
		}
		StateHasChanged();
	}

	// private async void TimerOutCallback()
	// {
	// 	await UserHomeService.DeleteCheckAsync(BillId, cancellationToken);
	// 	await TimerOutDiscount.InvokeAsync();
	// }
	public void StopTimer()
	{
		timer?.Stop();
		timer?.Dispose();
	}

	public Task Reset()
	{
		IsDiscountCodeUsed = false;
		IsVHDUsed = false;
		CouponCode = string.Empty;
		memberCheck = true;
		errorMessage = string.Empty;
		accountDto = null;
		VHDPoints = 0;
		memPhone = string.Empty;
		StateHasChanged();
		return Task.CompletedTask;
	}
	private decimal CalculateTotalTicket() //tính tổng tiền
	{
		decimal totalTicket = 0;
		foreach (var item in seatDTOs)
		{
			var ticketPrice = lstTicketPrices.FirstOrDefault(x => x.SeatName == item.SeatTypeName && x.Type == showtimeDto.ScreenTypeName && x.CinemaTypeName
				== cinemaDto.CinemaTypeName && x.Day == DayOfTheWeek(date) && x.Status == TicketPriceStatus.Active);
			if (ticketPrice != null)
			{
				totalTicket += (Decimal)ticketPrice.Price;
			}
		}
		return totalTicket;
	}
	private string DayOfTheWeek(string day) //check ngày
	{
		if (day.Equals("Saturday") || day.Equals("Sunday"))
		{
			return "T7-CN";
		}
		else
		{
			return "T2-T6";
		}
	}
	private async Task Checkout()
	{
		if (SelectedMethod == "qr")
		{
			var bill = await UserHomeService.GetBillForCheckOut(Id);
			PayOS payOS = new PayOS("696efb39-86fe-44ce-8182-a7a1bbe9881b", "d662ce34-c955-4710-a264-ab9a97e5319a",
			"1e063ea755ccf53bf11fc90b624238daa15b57bb11fdcc6535a5ec48e84be53a");
			ItemData itemData = new ItemData(bill.FilmName, 1, Convert.ToInt32(bill.AfterDiscount));
			List<ItemData> lstItemDatas = new List<ItemData>();
			lstItemDatas.Add(itemData);
			PaymentData paymentData = new PaymentData
			(
				bill.BillCode,
				Convert.ToInt32(bill.AfterDiscount),
				"VHD Cinema",
				lstItemDatas,
				$"https://localhost:9999/offline-check-out-failed/{Id}",
				$"https://localhost:9999/offline-check-out-success/{Id}&{Mempoint}"
			);
			CreatePaymentResult createPayment = await payOS.createPaymentLink(paymentData);
			NavigationManager.NavigateTo(createPayment.checkoutUrl, true);
		}
		else if (SelectedMethod == "cash")
		{
			await BillService.UpdateStatusAsync(Id, BillStatus.Paid);
			await JSRuntime.InvokeAsync<string>("alert", "Thanh toán thành công");
			NavigationManager.NavigateTo("/offline-counter");
		}
	}
}
