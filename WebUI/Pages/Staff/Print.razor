@using MovieTicket.Application.DataTransferObjs.Account
@using MovieTicket.Application.DataTransferObjs.BillCombo
@attribute [Authorize(Roles = "Staff")]
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
@layout WebUI.Layout.StaffLayout

<div class="mb-3 d-flex justify-content-center" style="width:100%">
	<div class="d-flex">
		<input type="text" class="form-control me-3 fs-5 p-2" style="width:500px" @bind-value="Barcode" placeholder="Search by BarCode or Status" />
		<button class="btn btn-primary" style="width:138px" @onclick="SearchBarCode"><i class="bi bi-search m-0"></i>Tìm kiếm</button>
	</div>
</div>

<div class="d-flex justify-content-end me-4">
	<button class="btn btn-warning p-2" @onclick="BillPrint"><i class="bi bi-printer"></i>In hóa đơn</button>
</div>

@if (IsHidden)
{
	<div class="row">
		<!-- Thông tin đơn hàng -->
		<div class="col-md-6 mb-3">
			<div class="row">
				@if (objBill != null && objShowTime != null)
				{
					<div class="col-md-6 mb-3">
						<div class="py-2 mb-4 border-bottom">
							<h5>Thông tin đơn hàng</h5>
						</div>
						<div><strong class="me-2">Phim:</strong><span class="text-primary">@objShowTime?.FilmName</span></div>
						<p><strong class="me-2">Giờ chiếu:</strong><span class="badge bg-danger"> @(objShowTime?.StartTime?.ToString("HH:mm")) - @(objShowTime?.EndTime?.ToString("HH:mm"))</span></p>
						<p><strong>Ngày chiếu:</strong> @(objShowTime?.ShowtimeDate?.ToString("dd/MM/yyyy"))</p>
						<p><strong>Phòng chiếu:</strong> @objShowTime?.CinemaName</p>
						<p><strong class="me-2">Rạp chiếu:</strong><span class="text-primary"> @objShowTime?.CinemaCenterName</span></p>
						<p><strong>Ngày đặt:</strong> @(objBill?.CreateTime?.ToString("dd/MM/yyyy"))</p>
					</div>

					<!-- Thông tin khách hàng -->
					<div class="col-md-6 mb-3">
						<div class="py-2 mb-4 border-bottom">
							<h5>Thông tin khách hàng</h5>
						</div>
						<p><strong>Khách hàng:</strong> @(objAccount?.Name)</p>
						<p><strong>Điện thoại:</strong> @(objAccount?.Phone)</p>
						<p><strong>Email:</strong> @(objAccount?.Email)</p>
						<p><strong class="me-2">Trạng thái:</strong><span class="badge bg-success"> @objBill?.Status</span></p>
						<p><strong>Thành tiền:</strong> @(objBill?.TotalMoney?.ToString("#,##0"))</p>
						<p><strong>Giảm giá:</strong> @((objBill?.TotalMoney - objBill?.AfterDiscount)?.ToString("#,##0"))</p>
						<p><strong>Tổng tiền:</strong> @(objBill?.AfterDiscount?.ToString("#,##0"))</p>
					</div>
				}
				else
				{
					<p>Không có dữ liệu</p>
				}
			</div>
		</div>
	</div>
}
else
{
	<p>Không có hóa đơn nào được tìm thấy</p>
}

<script>
    window.generatePdf = function(pdfContent) {
        const { jsPDF } = window.jspdf;
        if (!jsPDF) {
            console.error("jsPDF library is not loaded.");
            return;
        }

        const doc = new jsPDF();
        doc.setFontSize(20);
        doc.text("Hoa Don Phim", 105, 10, { align: "center" });

        doc.setFontSize(14);
        doc.text(`Phim: ${pdfContent.FilmName}`, 10, 20);
        doc.text(`Gio chieu: ${pdfContent.Showtime}`, 10, 30);
        doc.text(`Ngay Chieu: ${pdfContent.ShowDate}`, 10, 40);
        doc.text(`Phong chieu: ${pdfContent.Cinema}`, 10, 50);
        doc.text(`Rap chieu: ${pdfContent.CinemaCenter}`, 10, 60);

        doc.text(`Khach hang: ${pdfContent.CustomerName}`, 10, 70);
        doc.text(`Dien thoai: ${pdfContent.CustomerPhone}`, 10, 80);
        doc.text(`Email: ${pdfContent.CustomerEmail}`, 10, 90);

        let yPosition = 100; // Starting point for Seats
        if (Array.isArray(pdfContent.Seats) && pdfContent.Seats.length > 0) {
            doc.text("Thong tin ghe:", 10, yPosition);
            yPosition += 10;
            pdfContent.Seats.forEach((seat, index) => {
                doc.text(`${seat.SeatName} | Loai ghe: ${seat.SeatType} | Gia ghe: ${seat.Price} VND`, 10, yPosition);
                yPosition += 10;
            });
        } else {
            doc.text("Khong co ghe chon.", 10, yPosition);
            yPosition += 10;
        }

        if (Array.isArray(pdfContent.Combos) && pdfContent.Combos.length > 0) {
            doc.text("Dich vu bo sung:", 10, yPosition);
            yPosition += 10;
            pdfContent.Combos.forEach((combo, index) => {
                doc.text(`${combo.ComboName} | So luong: ${combo.Quantity} | Don gia: ${combo.Price} VND | Tong: ${combo.TotalPrice} VND`, 10, yPosition);
                yPosition += 10;
            });
        } else {
            doc.text("Khong co dich vu bo sung", 10, yPosition);
            yPosition += 10;
        }

        doc.text(`Thanh tien: ${pdfContent.TotalMoney} VND`, 10, yPosition);
        yPosition += 10;
        doc.text(`Giam gia: ${pdfContent.Discount} VND`, 10, yPosition);
        yPosition += 10;
        doc.text(`Tong tien: ${pdfContent.AfterDiscount} VND`, 10, yPosition);

        doc.save("HoaDonXemPhim.pdf");
    };
</script>


@code {
	[Parameter] public string Id { get; set; }
	private BillWithPaginationRequest request = new BillWithPaginationRequest();
	private PagingParameters pagingParameters = new PagingParameters();
	private string Barcode { get; set; } = string.Empty;
	private Guid BillId { get; set; }
	private DateTime? StartTime = DateTime.Today;
	private DateTime? EndTime = DateTime.Today.AddDays(1).AddTicks(-1);
	private bool IsHidden = false;
	private string seatConcat = string.Empty;
	private string comboConcat = string.Empty;
	private List<TicketDto> lstTicket = new List<TicketDto>();
	private TicketDto objTicket = new TicketDto();
	private ShowTimeDto objShowTime = new ShowTimeDto();
	private class BillSeat
	{
		public string SeatName { get; set; }
		public string SeatType { get; set; }
		public decimal Price { get; set; }
	}
	private class SeatPrice
	{
		public Guid SeatId { get; set; }
		public decimal Price { get; set; }
	}
	private class BillContent
	{
		public string FilmName { get; set; }
		public string Showtime { get; set; }
		public string ShowDate { get; set; }
		public string Cinema { get; set; }
		public string CinemaCenter { get; set; }
		public string CustomerName { get; set; }
		public string CustomerPhone { get; set; }
		public string CustomerEmail { get; set; }
		public string Seats { get; set; }
		public string Combos { get; set; }
		public string TotalMoney { get; set; }
		public string Discount { get; set; }
		public string AfterDiscount { get; set; }
	}

	private List<BillComboDto> lstBillCombo = new List<BillComboDto>();
	private List<BillSeat> lstSeat = new List<BillSeat>();
	private List<SeatPrice> lstSeatId = new List<SeatPrice>();
	private BillDetailDto objBill = new BillDetailDto();
	private AccountDto objAccount = new AccountDto();
	private string BarcodeImage;
	private GeneratorBarcode generatorBarcode = new GeneratorBarcode();

	protected override async Task OnParametersSetAsync()
	{
		if (!String.IsNullOrEmpty(Id))
		{
			request.StartTime = StartTime;
			request.EndTime = EndTime;
			request.CinemaCenterId = Guid.Parse(Id);
		}
	}

	private async Task SearchBarCode()
	{
		IsHidden = false;
		lstSeat.Clear();
		lstSeatId.Clear();
		lstBillCombo.Clear();
		if (!String.IsNullOrWhiteSpace(Barcode))
		{
			request.BarCode = Barcode;
			var pageList = await BillService.GetListBillWithPaginationAsync(request, new PagingParameters
				{
					PageNumber = pagingParameters.PageNumber,
					PageSize = 10
				});
			if (pageList.Item.Count() > 0)
			{
				BillId = pageList.Item.FirstOrDefault().Id;
				if (BillId != Guid.Empty)
				{
					IsHidden = true;
					objBill = await BillService.GetBillByIdAsync(BillId);
					objAccount = await AccountService.GetByIdAsync(objBill.MembershipId.Value);
					lstTicket = await TicketService.GetListTicketByBillIdAsync(BillId);
					objTicket = lstTicket.FirstOrDefault(x => x.BillId == BillId);
					var showtimeId = objTicket.ShowTimeId.Value;
					var findShowtime = await ShowTimeService.GetById(showtimeId);
					objShowTime = findShowtime.Data;
					lstSeatId = lstTicket.Select(x => new SeatPrice
						{
							SeatId = x.SeatId.Value,
							Price = x.Price
						}).ToList();

					foreach (var item in lstSeatId)
					{
						var obj = await SeatService.GetById(item.SeatId);
						var seat = obj.Data;
						lstSeat.Add(new BillSeat
							{
								SeatType = seat.SeatTypeName,
								SeatName = seat.Position,
								Price = item.Price
							});
					}

					lstBillCombo = await BillComboService.GetListBillComboByBillId(BillId);
					BarcodeImage = generatorBarcode.GenerateBarcode(long.Parse(objBill.BarCode));
					StateHasChanged();
				}
			}
		}
	}

	private string FormatSeatTypeName(string type)
	{
		return type switch
		{
			"Normal" => "secondary",
			"VIP" => "warning",
			"Couple" => "danger",
			_ => "Không xác định"
		};
	}
	private async Task BillPrint()
	{
		if (IsHidden)
		{
		
			var pdfContent = new BillContent
			{
				FilmName = objShowTime?.FilmName,
				Showtime = $"{objShowTime?.StartTime?.ToString("HH:mm")} - {objShowTime?.EndTime?.ToString("HH:mm")}",
				ShowDate = objShowTime?.ShowtimeDate?.ToString("dd/MM/yyyy"),
				Cinema = objShowTime?.CinemaName,
				CinemaCenter = objShowTime?.CinemaCenterName,
				CustomerName = objAccount?.Name,
				CustomerPhone = objAccount?.Phone,
				CustomerEmail = objAccount?.Email,
				Seats = string.Join(" ", lstSeat.Select(x=>x.SeatName)),
				Combos = string.Join(" ", lstBillCombo.Select(x => x.ComboName)),
				TotalMoney = objBill?.TotalMoney?.ToString("#,##0"),
				Discount = (objBill?.TotalMoney - objBill?.AfterDiscount)?.ToString("#,##0"),
				AfterDiscount = objBill?.AfterDiscount?.ToString("#,##0")
			};

			// Call JavaScript function to generate PDF
			await JSRuntime.InvokeVoidAsync("generatePdf", pdfContent);
		}
	}

}
